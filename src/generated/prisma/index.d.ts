
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>
/**
 * Model content
 * 
 */
export type content = $Result.DefaultSelection<Prisma.$contentPayload>
/**
 * Model store
 * 
 */
export type store = $Result.DefaultSelection<Prisma.$storePayload>
/**
 * Model product
 * 
 */
export type product = $Result.DefaultSelection<Prisma.$productPayload>
/**
 * Model review
 * 
 */
export type review = $Result.DefaultSelection<Prisma.$reviewPayload>
/**
 * Model rating
 * 
 */
export type rating = $Result.DefaultSelection<Prisma.$ratingPayload>
/**
 * Model productImage
 * 
 */
export type productImage = $Result.DefaultSelection<Prisma.$productImagePayload>
/**
 * Model payment
 * 
 */
export type payment = $Result.DefaultSelection<Prisma.$paymentPayload>
/**
 * Model order
 * 
 */
export type order = $Result.DefaultSelection<Prisma.$orderPayload>
/**
 * Model orderProducts
 * 
 */
export type orderProducts = $Result.DefaultSelection<Prisma.$orderProductsPayload>
/**
 * Model subscription
 * 
 */
export type subscription = $Result.DefaultSelection<Prisma.$subscriptionPayload>
/**
 * Model FanEngagement
 * 
 */
export type FanEngagement = $Result.DefaultSelection<Prisma.$FanEngagementPayload>
/**
 * Model favourite_content
 * 
 */
export type favourite_content = $Result.DefaultSelection<Prisma.$favourite_contentPayload>
/**
 * Model acknowledgement
 * 
 */
export type acknowledgement = $Result.DefaultSelection<Prisma.$acknowledgementPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.content`: Exposes CRUD operations for the **content** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contents
    * const contents = await prisma.content.findMany()
    * ```
    */
  get content(): Prisma.contentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.store`: Exposes CRUD operations for the **store** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stores
    * const stores = await prisma.store.findMany()
    * ```
    */
  get store(): Prisma.storeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.productDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.reviewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rating`: Exposes CRUD operations for the **rating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ratings
    * const ratings = await prisma.rating.findMany()
    * ```
    */
  get rating(): Prisma.ratingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productImage`: Exposes CRUD operations for the **productImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductImages
    * const productImages = await prisma.productImage.findMany()
    * ```
    */
  get productImage(): Prisma.productImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.paymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.orderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.orderProducts`: Exposes CRUD operations for the **orderProducts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderProducts
    * const orderProducts = await prisma.orderProducts.findMany()
    * ```
    */
  get orderProducts(): Prisma.orderProductsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subscription`: Exposes CRUD operations for the **subscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subscriptions
    * const subscriptions = await prisma.subscription.findMany()
    * ```
    */
  get subscription(): Prisma.subscriptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fanEngagement`: Exposes CRUD operations for the **FanEngagement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FanEngagements
    * const fanEngagements = await prisma.fanEngagement.findMany()
    * ```
    */
  get fanEngagement(): Prisma.FanEngagementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.favourite_content`: Exposes CRUD operations for the **favourite_content** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Favourite_contents
    * const favourite_contents = await prisma.favourite_content.findMany()
    * ```
    */
  get favourite_content(): Prisma.favourite_contentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.acknowledgement`: Exposes CRUD operations for the **acknowledgement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Acknowledgements
    * const acknowledgements = await prisma.acknowledgement.findMany()
    * ```
    */
  get acknowledgement(): Prisma.acknowledgementDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    user: 'user',
    content: 'content',
    store: 'store',
    product: 'product',
    review: 'review',
    rating: 'rating',
    productImage: 'productImage',
    payment: 'payment',
    order: 'order',
    orderProducts: 'orderProducts',
    subscription: 'subscription',
    FanEngagement: 'FanEngagement',
    favourite_content: 'favourite_content',
    acknowledgement: 'acknowledgement'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "content" | "store" | "product" | "review" | "rating" | "productImage" | "payment" | "order" | "orderProducts" | "subscription" | "fanEngagement" | "favourite_content" | "acknowledgement"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.userCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.userUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      content: {
        payload: Prisma.$contentPayload<ExtArgs>
        fields: Prisma.contentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.contentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.contentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentPayload>
          }
          findFirst: {
            args: Prisma.contentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.contentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentPayload>
          }
          findMany: {
            args: Prisma.contentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentPayload>[]
          }
          create: {
            args: Prisma.contentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentPayload>
          }
          createMany: {
            args: Prisma.contentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.contentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentPayload>[]
          }
          delete: {
            args: Prisma.contentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentPayload>
          }
          update: {
            args: Prisma.contentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentPayload>
          }
          deleteMany: {
            args: Prisma.contentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.contentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.contentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentPayload>[]
          }
          upsert: {
            args: Prisma.contentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contentPayload>
          }
          aggregate: {
            args: Prisma.ContentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContent>
          }
          groupBy: {
            args: Prisma.contentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContentGroupByOutputType>[]
          }
          count: {
            args: Prisma.contentCountArgs<ExtArgs>
            result: $Utils.Optional<ContentCountAggregateOutputType> | number
          }
        }
      }
      store: {
        payload: Prisma.$storePayload<ExtArgs>
        fields: Prisma.storeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.storeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$storePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.storeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$storePayload>
          }
          findFirst: {
            args: Prisma.storeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$storePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.storeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$storePayload>
          }
          findMany: {
            args: Prisma.storeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$storePayload>[]
          }
          create: {
            args: Prisma.storeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$storePayload>
          }
          createMany: {
            args: Prisma.storeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.storeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$storePayload>[]
          }
          delete: {
            args: Prisma.storeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$storePayload>
          }
          update: {
            args: Prisma.storeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$storePayload>
          }
          deleteMany: {
            args: Prisma.storeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.storeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.storeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$storePayload>[]
          }
          upsert: {
            args: Prisma.storeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$storePayload>
          }
          aggregate: {
            args: Prisma.StoreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStore>
          }
          groupBy: {
            args: Prisma.storeGroupByArgs<ExtArgs>
            result: $Utils.Optional<StoreGroupByOutputType>[]
          }
          count: {
            args: Prisma.storeCountArgs<ExtArgs>
            result: $Utils.Optional<StoreCountAggregateOutputType> | number
          }
        }
      }
      product: {
        payload: Prisma.$productPayload<ExtArgs>
        fields: Prisma.productFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          findFirst: {
            args: Prisma.productFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          findMany: {
            args: Prisma.productFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>[]
          }
          create: {
            args: Prisma.productCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          createMany: {
            args: Prisma.productCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.productCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>[]
          }
          delete: {
            args: Prisma.productDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          update: {
            args: Prisma.productUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          deleteMany: {
            args: Prisma.productDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.productUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.productUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>[]
          }
          upsert: {
            args: Prisma.productUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.productGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.productCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      review: {
        payload: Prisma.$reviewPayload<ExtArgs>
        fields: Prisma.reviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.reviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.reviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload>
          }
          findFirst: {
            args: Prisma.reviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.reviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload>
          }
          findMany: {
            args: Prisma.reviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload>[]
          }
          create: {
            args: Prisma.reviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload>
          }
          createMany: {
            args: Prisma.reviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.reviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload>[]
          }
          delete: {
            args: Prisma.reviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload>
          }
          update: {
            args: Prisma.reviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload>
          }
          deleteMany: {
            args: Prisma.reviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.reviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.reviewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload>[]
          }
          upsert: {
            args: Prisma.reviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$reviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReview>
          }
          groupBy: {
            args: Prisma.reviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.reviewCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewCountAggregateOutputType> | number
          }
        }
      }
      rating: {
        payload: Prisma.$ratingPayload<ExtArgs>
        fields: Prisma.ratingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ratingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ratingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ratingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ratingPayload>
          }
          findFirst: {
            args: Prisma.ratingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ratingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ratingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ratingPayload>
          }
          findMany: {
            args: Prisma.ratingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ratingPayload>[]
          }
          create: {
            args: Prisma.ratingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ratingPayload>
          }
          createMany: {
            args: Prisma.ratingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ratingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ratingPayload>[]
          }
          delete: {
            args: Prisma.ratingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ratingPayload>
          }
          update: {
            args: Prisma.ratingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ratingPayload>
          }
          deleteMany: {
            args: Prisma.ratingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ratingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ratingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ratingPayload>[]
          }
          upsert: {
            args: Prisma.ratingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ratingPayload>
          }
          aggregate: {
            args: Prisma.RatingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRating>
          }
          groupBy: {
            args: Prisma.ratingGroupByArgs<ExtArgs>
            result: $Utils.Optional<RatingGroupByOutputType>[]
          }
          count: {
            args: Prisma.ratingCountArgs<ExtArgs>
            result: $Utils.Optional<RatingCountAggregateOutputType> | number
          }
        }
      }
      productImage: {
        payload: Prisma.$productImagePayload<ExtArgs>
        fields: Prisma.productImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productImagePayload>
          }
          findFirst: {
            args: Prisma.productImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productImagePayload>
          }
          findMany: {
            args: Prisma.productImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productImagePayload>[]
          }
          create: {
            args: Prisma.productImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productImagePayload>
          }
          createMany: {
            args: Prisma.productImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.productImageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productImagePayload>[]
          }
          delete: {
            args: Prisma.productImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productImagePayload>
          }
          update: {
            args: Prisma.productImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productImagePayload>
          }
          deleteMany: {
            args: Prisma.productImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.productImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.productImageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productImagePayload>[]
          }
          upsert: {
            args: Prisma.productImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productImagePayload>
          }
          aggregate: {
            args: Prisma.ProductImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductImage>
          }
          groupBy: {
            args: Prisma.productImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.productImageCountArgs<ExtArgs>
            result: $Utils.Optional<ProductImageCountAggregateOutputType> | number
          }
        }
      }
      payment: {
        payload: Prisma.$paymentPayload<ExtArgs>
        fields: Prisma.paymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.paymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.paymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          findFirst: {
            args: Prisma.paymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.paymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          findMany: {
            args: Prisma.paymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>[]
          }
          create: {
            args: Prisma.paymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          createMany: {
            args: Prisma.paymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.paymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>[]
          }
          delete: {
            args: Prisma.paymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          update: {
            args: Prisma.paymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          deleteMany: {
            args: Prisma.paymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.paymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.paymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>[]
          }
          upsert: {
            args: Prisma.paymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.paymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.paymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      order: {
        payload: Prisma.$orderPayload<ExtArgs>
        fields: Prisma.orderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.orderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.orderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload>
          }
          findFirst: {
            args: Prisma.orderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.orderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload>
          }
          findMany: {
            args: Prisma.orderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload>[]
          }
          create: {
            args: Prisma.orderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload>
          }
          createMany: {
            args: Prisma.orderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.orderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload>[]
          }
          delete: {
            args: Prisma.orderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload>
          }
          update: {
            args: Prisma.orderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload>
          }
          deleteMany: {
            args: Prisma.orderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.orderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.orderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload>[]
          }
          upsert: {
            args: Prisma.orderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.orderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.orderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      orderProducts: {
        payload: Prisma.$orderProductsPayload<ExtArgs>
        fields: Prisma.orderProductsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.orderProductsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderProductsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.orderProductsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderProductsPayload>
          }
          findFirst: {
            args: Prisma.orderProductsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderProductsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.orderProductsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderProductsPayload>
          }
          findMany: {
            args: Prisma.orderProductsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderProductsPayload>[]
          }
          create: {
            args: Prisma.orderProductsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderProductsPayload>
          }
          createMany: {
            args: Prisma.orderProductsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.orderProductsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderProductsPayload>[]
          }
          delete: {
            args: Prisma.orderProductsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderProductsPayload>
          }
          update: {
            args: Prisma.orderProductsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderProductsPayload>
          }
          deleteMany: {
            args: Prisma.orderProductsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.orderProductsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.orderProductsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderProductsPayload>[]
          }
          upsert: {
            args: Prisma.orderProductsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$orderProductsPayload>
          }
          aggregate: {
            args: Prisma.OrderProductsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderProducts>
          }
          groupBy: {
            args: Prisma.orderProductsGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderProductsGroupByOutputType>[]
          }
          count: {
            args: Prisma.orderProductsCountArgs<ExtArgs>
            result: $Utils.Optional<OrderProductsCountAggregateOutputType> | number
          }
        }
      }
      subscription: {
        payload: Prisma.$subscriptionPayload<ExtArgs>
        fields: Prisma.subscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.subscriptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.subscriptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subscriptionPayload>
          }
          findFirst: {
            args: Prisma.subscriptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.subscriptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subscriptionPayload>
          }
          findMany: {
            args: Prisma.subscriptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subscriptionPayload>[]
          }
          create: {
            args: Prisma.subscriptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subscriptionPayload>
          }
          createMany: {
            args: Prisma.subscriptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.subscriptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subscriptionPayload>[]
          }
          delete: {
            args: Prisma.subscriptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subscriptionPayload>
          }
          update: {
            args: Prisma.subscriptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subscriptionPayload>
          }
          deleteMany: {
            args: Prisma.subscriptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.subscriptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.subscriptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subscriptionPayload>[]
          }
          upsert: {
            args: Prisma.subscriptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$subscriptionPayload>
          }
          aggregate: {
            args: Prisma.SubscriptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubscription>
          }
          groupBy: {
            args: Prisma.subscriptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.subscriptionCountArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionCountAggregateOutputType> | number
          }
        }
      }
      FanEngagement: {
        payload: Prisma.$FanEngagementPayload<ExtArgs>
        fields: Prisma.FanEngagementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FanEngagementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FanEngagementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FanEngagementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FanEngagementPayload>
          }
          findFirst: {
            args: Prisma.FanEngagementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FanEngagementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FanEngagementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FanEngagementPayload>
          }
          findMany: {
            args: Prisma.FanEngagementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FanEngagementPayload>[]
          }
          create: {
            args: Prisma.FanEngagementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FanEngagementPayload>
          }
          createMany: {
            args: Prisma.FanEngagementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FanEngagementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FanEngagementPayload>[]
          }
          delete: {
            args: Prisma.FanEngagementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FanEngagementPayload>
          }
          update: {
            args: Prisma.FanEngagementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FanEngagementPayload>
          }
          deleteMany: {
            args: Prisma.FanEngagementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FanEngagementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FanEngagementUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FanEngagementPayload>[]
          }
          upsert: {
            args: Prisma.FanEngagementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FanEngagementPayload>
          }
          aggregate: {
            args: Prisma.FanEngagementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFanEngagement>
          }
          groupBy: {
            args: Prisma.FanEngagementGroupByArgs<ExtArgs>
            result: $Utils.Optional<FanEngagementGroupByOutputType>[]
          }
          count: {
            args: Prisma.FanEngagementCountArgs<ExtArgs>
            result: $Utils.Optional<FanEngagementCountAggregateOutputType> | number
          }
        }
      }
      favourite_content: {
        payload: Prisma.$favourite_contentPayload<ExtArgs>
        fields: Prisma.favourite_contentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.favourite_contentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favourite_contentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.favourite_contentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favourite_contentPayload>
          }
          findFirst: {
            args: Prisma.favourite_contentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favourite_contentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.favourite_contentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favourite_contentPayload>
          }
          findMany: {
            args: Prisma.favourite_contentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favourite_contentPayload>[]
          }
          create: {
            args: Prisma.favourite_contentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favourite_contentPayload>
          }
          createMany: {
            args: Prisma.favourite_contentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.favourite_contentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favourite_contentPayload>[]
          }
          delete: {
            args: Prisma.favourite_contentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favourite_contentPayload>
          }
          update: {
            args: Prisma.favourite_contentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favourite_contentPayload>
          }
          deleteMany: {
            args: Prisma.favourite_contentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.favourite_contentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.favourite_contentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favourite_contentPayload>[]
          }
          upsert: {
            args: Prisma.favourite_contentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favourite_contentPayload>
          }
          aggregate: {
            args: Prisma.Favourite_contentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFavourite_content>
          }
          groupBy: {
            args: Prisma.favourite_contentGroupByArgs<ExtArgs>
            result: $Utils.Optional<Favourite_contentGroupByOutputType>[]
          }
          count: {
            args: Prisma.favourite_contentCountArgs<ExtArgs>
            result: $Utils.Optional<Favourite_contentCountAggregateOutputType> | number
          }
        }
      }
      acknowledgement: {
        payload: Prisma.$acknowledgementPayload<ExtArgs>
        fields: Prisma.acknowledgementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.acknowledgementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$acknowledgementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.acknowledgementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$acknowledgementPayload>
          }
          findFirst: {
            args: Prisma.acknowledgementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$acknowledgementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.acknowledgementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$acknowledgementPayload>
          }
          findMany: {
            args: Prisma.acknowledgementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$acknowledgementPayload>[]
          }
          create: {
            args: Prisma.acknowledgementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$acknowledgementPayload>
          }
          createMany: {
            args: Prisma.acknowledgementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.acknowledgementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$acknowledgementPayload>[]
          }
          delete: {
            args: Prisma.acknowledgementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$acknowledgementPayload>
          }
          update: {
            args: Prisma.acknowledgementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$acknowledgementPayload>
          }
          deleteMany: {
            args: Prisma.acknowledgementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.acknowledgementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.acknowledgementUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$acknowledgementPayload>[]
          }
          upsert: {
            args: Prisma.acknowledgementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$acknowledgementPayload>
          }
          aggregate: {
            args: Prisma.AcknowledgementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAcknowledgement>
          }
          groupBy: {
            args: Prisma.acknowledgementGroupByArgs<ExtArgs>
            result: $Utils.Optional<AcknowledgementGroupByOutputType>[]
          }
          count: {
            args: Prisma.acknowledgementCountArgs<ExtArgs>
            result: $Utils.Optional<AcknowledgementCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: userOmit
    content?: contentOmit
    store?: storeOmit
    product?: productOmit
    review?: reviewOmit
    rating?: ratingOmit
    productImage?: productImageOmit
    payment?: paymentOmit
    order?: orderOmit
    orderProducts?: orderProductsOmit
    subscription?: subscriptionOmit
    fanEngagement?: FanEngagementOmit
    favourite_content?: favourite_contentOmit
    acknowledgement?: acknowledgementOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    acknowledgements: number
    order: number
    payment: number
    content: number
    store: number
    review: number
    rating: number
    subscription: number
    FanEngagement: number
    favourite_content: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    acknowledgements?: boolean | UserCountOutputTypeCountAcknowledgementsArgs
    order?: boolean | UserCountOutputTypeCountOrderArgs
    payment?: boolean | UserCountOutputTypeCountPaymentArgs
    content?: boolean | UserCountOutputTypeCountContentArgs
    store?: boolean | UserCountOutputTypeCountStoreArgs
    review?: boolean | UserCountOutputTypeCountReviewArgs
    rating?: boolean | UserCountOutputTypeCountRatingArgs
    subscription?: boolean | UserCountOutputTypeCountSubscriptionArgs
    FanEngagement?: boolean | UserCountOutputTypeCountFanEngagementArgs
    favourite_content?: boolean | UserCountOutputTypeCountFavourite_contentArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAcknowledgementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: acknowledgementWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: paymentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountContentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: contentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: storeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reviewWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ratingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: subscriptionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFanEngagementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FanEngagementWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFavourite_contentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: favourite_contentWhereInput
  }


  /**
   * Count Type ContentCountOutputType
   */

  export type ContentCountOutputType = {
    subscription: number
    FanEngagement: number
    favourite_content: number
  }

  export type ContentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscription?: boolean | ContentCountOutputTypeCountSubscriptionArgs
    FanEngagement?: boolean | ContentCountOutputTypeCountFanEngagementArgs
    favourite_content?: boolean | ContentCountOutputTypeCountFavourite_contentArgs
  }

  // Custom InputTypes
  /**
   * ContentCountOutputType without action
   */
  export type ContentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentCountOutputType
     */
    select?: ContentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContentCountOutputType without action
   */
  export type ContentCountOutputTypeCountSubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: subscriptionWhereInput
  }

  /**
   * ContentCountOutputType without action
   */
  export type ContentCountOutputTypeCountFanEngagementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FanEngagementWhereInput
  }

  /**
   * ContentCountOutputType without action
   */
  export type ContentCountOutputTypeCountFavourite_contentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: favourite_contentWhereInput
  }


  /**
   * Count Type StoreCountOutputType
   */

  export type StoreCountOutputType = {
    order: number
    payment: number
    products: number
    content: number
    favourite_content: number
  }

  export type StoreCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | StoreCountOutputTypeCountOrderArgs
    payment?: boolean | StoreCountOutputTypeCountPaymentArgs
    products?: boolean | StoreCountOutputTypeCountProductsArgs
    content?: boolean | StoreCountOutputTypeCountContentArgs
    favourite_content?: boolean | StoreCountOutputTypeCountFavourite_contentArgs
  }

  // Custom InputTypes
  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreCountOutputType
     */
    select?: StoreCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeCountOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderWhereInput
  }

  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeCountPaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: paymentWhereInput
  }

  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productWhereInput
  }

  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeCountContentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: contentWhereInput
  }

  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeCountFavourite_contentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: favourite_contentWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    orderProducts: number
    ratings: number
    reviews: number
    favourite_content: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderProducts?: boolean | ProductCountOutputTypeCountOrderProductsArgs
    ratings?: boolean | ProductCountOutputTypeCountRatingsArgs
    reviews?: boolean | ProductCountOutputTypeCountReviewsArgs
    favourite_content?: boolean | ProductCountOutputTypeCountFavourite_contentArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountOrderProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderProductsWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ratingWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reviewWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountFavourite_contentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: favourite_contentWhereInput
  }


  /**
   * Count Type ProductImageCountOutputType
   */

  export type ProductImageCountOutputType = {
    product: number
  }

  export type ProductImageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductImageCountOutputTypeCountProductArgs
  }

  // Custom InputTypes
  /**
   * ProductImageCountOutputType without action
   */
  export type ProductImageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImageCountOutputType
     */
    select?: ProductImageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductImageCountOutputType without action
   */
  export type ProductImageCountOutputTypeCountProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productWhereInput
  }


  /**
   * Count Type PaymentCountOutputType
   */

  export type PaymentCountOutputType = {
    subscription: number
  }

  export type PaymentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscription?: boolean | PaymentCountOutputTypeCountSubscriptionArgs
  }

  // Custom InputTypes
  /**
   * PaymentCountOutputType without action
   */
  export type PaymentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentCountOutputType
     */
    select?: PaymentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PaymentCountOutputType without action
   */
  export type PaymentCountOutputTypeCountSubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: subscriptionWhereInput
  }


  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    orderProducts: number
    payment: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderProducts?: boolean | OrderCountOutputTypeCountOrderProductsArgs
    payment?: boolean | OrderCountOutputTypeCountPaymentArgs
  }

  // Custom InputTypes
  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountOrderProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderProductsWhereInput
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountPaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: paymentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    fullname: string | null
    email: string | null
    password: string | null
    profile_image_url: string | null
    uploadedProfileImage: string | null
    category: string | null
    imagePublicID: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
    username: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    fullname: string | null
    email: string | null
    password: string | null
    profile_image_url: string | null
    uploadedProfileImage: string | null
    category: string | null
    imagePublicID: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
    username: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    fullname: number
    email: number
    password: number
    profile_image_url: number
    uploadedProfileImage: number
    category: number
    imagePublicID: number
    role: number
    createdAt: number
    updatedAt: number
    username: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    fullname?: true
    email?: true
    password?: true
    profile_image_url?: true
    uploadedProfileImage?: true
    category?: true
    imagePublicID?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    username?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    fullname?: true
    email?: true
    password?: true
    profile_image_url?: true
    uploadedProfileImage?: true
    category?: true
    imagePublicID?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    username?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    fullname?: true
    email?: true
    password?: true
    profile_image_url?: true
    uploadedProfileImage?: true
    category?: true
    imagePublicID?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    username?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    fullname: string
    email: string
    password: string | null
    profile_image_url: string | null
    uploadedProfileImage: string | null
    category: string | null
    imagePublicID: string | null
    role: string | null
    createdAt: Date
    updatedAt: Date
    username: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullname?: boolean
    email?: boolean
    password?: boolean
    profile_image_url?: boolean
    uploadedProfileImage?: boolean
    category?: boolean
    imagePublicID?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    username?: boolean
    acknowledgements?: boolean | user$acknowledgementsArgs<ExtArgs>
    order?: boolean | user$orderArgs<ExtArgs>
    payment?: boolean | user$paymentArgs<ExtArgs>
    content?: boolean | user$contentArgs<ExtArgs>
    store?: boolean | user$storeArgs<ExtArgs>
    review?: boolean | user$reviewArgs<ExtArgs>
    rating?: boolean | user$ratingArgs<ExtArgs>
    subscription?: boolean | user$subscriptionArgs<ExtArgs>
    FanEngagement?: boolean | user$FanEngagementArgs<ExtArgs>
    favourite_content?: boolean | user$favourite_contentArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type userSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullname?: boolean
    email?: boolean
    password?: boolean
    profile_image_url?: boolean
    uploadedProfileImage?: boolean
    category?: boolean
    imagePublicID?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    username?: boolean
  }, ExtArgs["result"]["user"]>

  export type userSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullname?: boolean
    email?: boolean
    password?: boolean
    profile_image_url?: boolean
    uploadedProfileImage?: boolean
    category?: boolean
    imagePublicID?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    username?: boolean
  }, ExtArgs["result"]["user"]>

  export type userSelectScalar = {
    id?: boolean
    fullname?: boolean
    email?: boolean
    password?: boolean
    profile_image_url?: boolean
    uploadedProfileImage?: boolean
    category?: boolean
    imagePublicID?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    username?: boolean
  }

  export type userOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fullname" | "email" | "password" | "profile_image_url" | "uploadedProfileImage" | "category" | "imagePublicID" | "role" | "createdAt" | "updatedAt" | "username", ExtArgs["result"]["user"]>
  export type userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    acknowledgements?: boolean | user$acknowledgementsArgs<ExtArgs>
    order?: boolean | user$orderArgs<ExtArgs>
    payment?: boolean | user$paymentArgs<ExtArgs>
    content?: boolean | user$contentArgs<ExtArgs>
    store?: boolean | user$storeArgs<ExtArgs>
    review?: boolean | user$reviewArgs<ExtArgs>
    rating?: boolean | user$ratingArgs<ExtArgs>
    subscription?: boolean | user$subscriptionArgs<ExtArgs>
    FanEngagement?: boolean | user$FanEngagementArgs<ExtArgs>
    favourite_content?: boolean | user$favourite_contentArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type userIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type userIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {
      acknowledgements: Prisma.$acknowledgementPayload<ExtArgs>[]
      order: Prisma.$orderPayload<ExtArgs>[]
      payment: Prisma.$paymentPayload<ExtArgs>[]
      content: Prisma.$contentPayload<ExtArgs>[]
      store: Prisma.$storePayload<ExtArgs>[]
      review: Prisma.$reviewPayload<ExtArgs>[]
      rating: Prisma.$ratingPayload<ExtArgs>[]
      subscription: Prisma.$subscriptionPayload<ExtArgs>[]
      FanEngagement: Prisma.$FanEngagementPayload<ExtArgs>[]
      favourite_content: Prisma.$favourite_contentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullname: string
      email: string
      password: string | null
      profile_image_url: string | null
      uploadedProfileImage: string | null
      category: string | null
      imagePublicID: string | null
      role: string | null
      createdAt: Date
      updatedAt: Date
      username: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<userFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends userFindUniqueArgs>(args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(args: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends userFindFirstArgs>(args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends userFindManyArgs>(args?: SelectSubset<T, userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends userCreateArgs>(args: SelectSubset<T, userCreateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {userCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends userCreateManyArgs>(args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {userCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends userCreateManyAndReturnArgs>(args?: SelectSubset<T, userCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends userDeleteArgs>(args: SelectSubset<T, userDeleteArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends userUpdateArgs>(args: SelectSubset<T, userUpdateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends userDeleteManyArgs>(args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends userUpdateManyArgs>(args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {userUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends userUpdateManyAndReturnArgs>(args: SelectSubset<T, userUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends userUpsertArgs>(args: SelectSubset<T, userUpsertArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    acknowledgements<T extends user$acknowledgementsArgs<ExtArgs> = {}>(args?: Subset<T, user$acknowledgementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$acknowledgementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    order<T extends user$orderArgs<ExtArgs> = {}>(args?: Subset<T, user$orderArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payment<T extends user$paymentArgs<ExtArgs> = {}>(args?: Subset<T, user$paymentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    content<T extends user$contentArgs<ExtArgs> = {}>(args?: Subset<T, user$contentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    store<T extends user$storeArgs<ExtArgs> = {}>(args?: Subset<T, user$storeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    review<T extends user$reviewArgs<ExtArgs> = {}>(args?: Subset<T, user$reviewArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rating<T extends user$ratingArgs<ExtArgs> = {}>(args?: Subset<T, user$ratingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ratingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    subscription<T extends user$subscriptionArgs<ExtArgs> = {}>(args?: Subset<T, user$subscriptionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$subscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    FanEngagement<T extends user$FanEngagementArgs<ExtArgs> = {}>(args?: Subset<T, user$FanEngagementArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FanEngagementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    favourite_content<T extends user$favourite_contentArgs<ExtArgs> = {}>(args?: Subset<T, user$favourite_contentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$favourite_contentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user model
   */
  interface userFieldRefs {
    readonly id: FieldRef<"user", 'String'>
    readonly fullname: FieldRef<"user", 'String'>
    readonly email: FieldRef<"user", 'String'>
    readonly password: FieldRef<"user", 'String'>
    readonly profile_image_url: FieldRef<"user", 'String'>
    readonly uploadedProfileImage: FieldRef<"user", 'String'>
    readonly category: FieldRef<"user", 'String'>
    readonly imagePublicID: FieldRef<"user", 'String'>
    readonly role: FieldRef<"user", 'String'>
    readonly createdAt: FieldRef<"user", 'DateTime'>
    readonly updatedAt: FieldRef<"user", 'DateTime'>
    readonly username: FieldRef<"user", 'String'>
  }
    

  // Custom InputTypes
  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }

  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user createManyAndReturn
   */
  export type userCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }

  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * user updateManyAndReturn
   */
  export type userUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }

  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }

  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
    /**
     * Limit how many users to delete.
     */
    limit?: number
  }

  /**
   * user.acknowledgements
   */
  export type user$acknowledgementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the acknowledgement
     */
    select?: acknowledgementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the acknowledgement
     */
    omit?: acknowledgementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: acknowledgementInclude<ExtArgs> | null
    where?: acknowledgementWhereInput
    orderBy?: acknowledgementOrderByWithRelationInput | acknowledgementOrderByWithRelationInput[]
    cursor?: acknowledgementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AcknowledgementScalarFieldEnum | AcknowledgementScalarFieldEnum[]
  }

  /**
   * user.order
   */
  export type user$orderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order
     */
    omit?: orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    where?: orderWhereInput
    orderBy?: orderOrderByWithRelationInput | orderOrderByWithRelationInput[]
    cursor?: orderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * user.payment
   */
  export type user$paymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    where?: paymentWhereInput
    orderBy?: paymentOrderByWithRelationInput | paymentOrderByWithRelationInput[]
    cursor?: paymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * user.content
   */
  export type user$contentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the content
     */
    select?: contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the content
     */
    omit?: contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentInclude<ExtArgs> | null
    where?: contentWhereInput
    orderBy?: contentOrderByWithRelationInput | contentOrderByWithRelationInput[]
    cursor?: contentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContentScalarFieldEnum | ContentScalarFieldEnum[]
  }

  /**
   * user.store
   */
  export type user$storeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeInclude<ExtArgs> | null
    where?: storeWhereInput
    orderBy?: storeOrderByWithRelationInput | storeOrderByWithRelationInput[]
    cursor?: storeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * user.review
   */
  export type user$reviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    where?: reviewWhereInput
    orderBy?: reviewOrderByWithRelationInput | reviewOrderByWithRelationInput[]
    cursor?: reviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * user.rating
   */
  export type user$ratingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rating
     */
    select?: ratingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rating
     */
    omit?: ratingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ratingInclude<ExtArgs> | null
    where?: ratingWhereInput
    orderBy?: ratingOrderByWithRelationInput | ratingOrderByWithRelationInput[]
    cursor?: ratingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * user.subscription
   */
  export type user$subscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subscription
     */
    select?: subscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subscription
     */
    omit?: subscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subscriptionInclude<ExtArgs> | null
    where?: subscriptionWhereInput
    orderBy?: subscriptionOrderByWithRelationInput | subscriptionOrderByWithRelationInput[]
    cursor?: subscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * user.FanEngagement
   */
  export type user$FanEngagementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FanEngagement
     */
    select?: FanEngagementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FanEngagement
     */
    omit?: FanEngagementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FanEngagementInclude<ExtArgs> | null
    where?: FanEngagementWhereInput
    orderBy?: FanEngagementOrderByWithRelationInput | FanEngagementOrderByWithRelationInput[]
    cursor?: FanEngagementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FanEngagementScalarFieldEnum | FanEngagementScalarFieldEnum[]
  }

  /**
   * user.favourite_content
   */
  export type user$favourite_contentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favourite_content
     */
    select?: favourite_contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the favourite_content
     */
    omit?: favourite_contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favourite_contentInclude<ExtArgs> | null
    where?: favourite_contentWhereInput
    orderBy?: favourite_contentOrderByWithRelationInput | favourite_contentOrderByWithRelationInput[]
    cursor?: favourite_contentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Favourite_contentScalarFieldEnum | Favourite_contentScalarFieldEnum[]
  }

  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
  }


  /**
   * Model content
   */

  export type AggregateContent = {
    _count: ContentCountAggregateOutputType | null
    _min: ContentMinAggregateOutputType | null
    _max: ContentMaxAggregateOutputType | null
  }

  export type ContentMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    mediaUrl: string | null
    thumbnailUrl: string | null
    isPublished: boolean | null
    category: string | null
    createdAt: Date | null
    updatedAt: Date | null
    storeId: string | null
    artistId: string | null
  }

  export type ContentMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    mediaUrl: string | null
    thumbnailUrl: string | null
    isPublished: boolean | null
    category: string | null
    createdAt: Date | null
    updatedAt: Date | null
    storeId: string | null
    artistId: string | null
  }

  export type ContentCountAggregateOutputType = {
    id: number
    title: number
    description: number
    mediaUrl: number
    thumbnailUrl: number
    isPublished: number
    category: number
    createdAt: number
    updatedAt: number
    storeId: number
    artistId: number
    _all: number
  }


  export type ContentMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    mediaUrl?: true
    thumbnailUrl?: true
    isPublished?: true
    category?: true
    createdAt?: true
    updatedAt?: true
    storeId?: true
    artistId?: true
  }

  export type ContentMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    mediaUrl?: true
    thumbnailUrl?: true
    isPublished?: true
    category?: true
    createdAt?: true
    updatedAt?: true
    storeId?: true
    artistId?: true
  }

  export type ContentCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    mediaUrl?: true
    thumbnailUrl?: true
    isPublished?: true
    category?: true
    createdAt?: true
    updatedAt?: true
    storeId?: true
    artistId?: true
    _all?: true
  }

  export type ContentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which content to aggregate.
     */
    where?: contentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contents to fetch.
     */
    orderBy?: contentOrderByWithRelationInput | contentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: contentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned contents
    **/
    _count?: true | ContentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContentMaxAggregateInputType
  }

  export type GetContentAggregateType<T extends ContentAggregateArgs> = {
        [P in keyof T & keyof AggregateContent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContent[P]>
      : GetScalarType<T[P], AggregateContent[P]>
  }




  export type contentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: contentWhereInput
    orderBy?: contentOrderByWithAggregationInput | contentOrderByWithAggregationInput[]
    by: ContentScalarFieldEnum[] | ContentScalarFieldEnum
    having?: contentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContentCountAggregateInputType | true
    _min?: ContentMinAggregateInputType
    _max?: ContentMaxAggregateInputType
  }

  export type ContentGroupByOutputType = {
    id: string
    title: string
    description: string | null
    mediaUrl: string
    thumbnailUrl: string | null
    isPublished: boolean
    category: string | null
    createdAt: Date
    updatedAt: Date
    storeId: string
    artistId: string
    _count: ContentCountAggregateOutputType | null
    _min: ContentMinAggregateOutputType | null
    _max: ContentMaxAggregateOutputType | null
  }

  type GetContentGroupByPayload<T extends contentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContentGroupByOutputType[P]>
            : GetScalarType<T[P], ContentGroupByOutputType[P]>
        }
      >
    >


  export type contentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    mediaUrl?: boolean
    thumbnailUrl?: boolean
    isPublished?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    storeId?: boolean
    artistId?: boolean
    artist?: boolean | userDefaultArgs<ExtArgs>
    store?: boolean | storeDefaultArgs<ExtArgs>
    subscription?: boolean | content$subscriptionArgs<ExtArgs>
    FanEngagement?: boolean | content$FanEngagementArgs<ExtArgs>
    favourite_content?: boolean | content$favourite_contentArgs<ExtArgs>
    _count?: boolean | ContentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["content"]>

  export type contentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    mediaUrl?: boolean
    thumbnailUrl?: boolean
    isPublished?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    storeId?: boolean
    artistId?: boolean
    artist?: boolean | userDefaultArgs<ExtArgs>
    store?: boolean | storeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["content"]>

  export type contentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    mediaUrl?: boolean
    thumbnailUrl?: boolean
    isPublished?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    storeId?: boolean
    artistId?: boolean
    artist?: boolean | userDefaultArgs<ExtArgs>
    store?: boolean | storeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["content"]>

  export type contentSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    mediaUrl?: boolean
    thumbnailUrl?: boolean
    isPublished?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    storeId?: boolean
    artistId?: boolean
  }

  export type contentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "mediaUrl" | "thumbnailUrl" | "isPublished" | "category" | "createdAt" | "updatedAt" | "storeId" | "artistId", ExtArgs["result"]["content"]>
  export type contentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    artist?: boolean | userDefaultArgs<ExtArgs>
    store?: boolean | storeDefaultArgs<ExtArgs>
    subscription?: boolean | content$subscriptionArgs<ExtArgs>
    FanEngagement?: boolean | content$FanEngagementArgs<ExtArgs>
    favourite_content?: boolean | content$favourite_contentArgs<ExtArgs>
    _count?: boolean | ContentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type contentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    artist?: boolean | userDefaultArgs<ExtArgs>
    store?: boolean | storeDefaultArgs<ExtArgs>
  }
  export type contentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    artist?: boolean | userDefaultArgs<ExtArgs>
    store?: boolean | storeDefaultArgs<ExtArgs>
  }

  export type $contentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "content"
    objects: {
      artist: Prisma.$userPayload<ExtArgs>
      store: Prisma.$storePayload<ExtArgs>
      subscription: Prisma.$subscriptionPayload<ExtArgs>[]
      FanEngagement: Prisma.$FanEngagementPayload<ExtArgs>[]
      favourite_content: Prisma.$favourite_contentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      mediaUrl: string
      thumbnailUrl: string | null
      isPublished: boolean
      category: string | null
      createdAt: Date
      updatedAt: Date
      storeId: string
      artistId: string
    }, ExtArgs["result"]["content"]>
    composites: {}
  }

  type contentGetPayload<S extends boolean | null | undefined | contentDefaultArgs> = $Result.GetResult<Prisma.$contentPayload, S>

  type contentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<contentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContentCountAggregateInputType | true
    }

  export interface contentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['content'], meta: { name: 'content' } }
    /**
     * Find zero or one Content that matches the filter.
     * @param {contentFindUniqueArgs} args - Arguments to find a Content
     * @example
     * // Get one Content
     * const content = await prisma.content.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends contentFindUniqueArgs>(args: SelectSubset<T, contentFindUniqueArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Content that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {contentFindUniqueOrThrowArgs} args - Arguments to find a Content
     * @example
     * // Get one Content
     * const content = await prisma.content.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends contentFindUniqueOrThrowArgs>(args: SelectSubset<T, contentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Content that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contentFindFirstArgs} args - Arguments to find a Content
     * @example
     * // Get one Content
     * const content = await prisma.content.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends contentFindFirstArgs>(args?: SelectSubset<T, contentFindFirstArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Content that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contentFindFirstOrThrowArgs} args - Arguments to find a Content
     * @example
     * // Get one Content
     * const content = await prisma.content.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends contentFindFirstOrThrowArgs>(args?: SelectSubset<T, contentFindFirstOrThrowArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Contents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contents
     * const contents = await prisma.content.findMany()
     * 
     * // Get first 10 Contents
     * const contents = await prisma.content.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contentWithIdOnly = await prisma.content.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends contentFindManyArgs>(args?: SelectSubset<T, contentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Content.
     * @param {contentCreateArgs} args - Arguments to create a Content.
     * @example
     * // Create one Content
     * const Content = await prisma.content.create({
     *   data: {
     *     // ... data to create a Content
     *   }
     * })
     * 
     */
    create<T extends contentCreateArgs>(args: SelectSubset<T, contentCreateArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Contents.
     * @param {contentCreateManyArgs} args - Arguments to create many Contents.
     * @example
     * // Create many Contents
     * const content = await prisma.content.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends contentCreateManyArgs>(args?: SelectSubset<T, contentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contents and returns the data saved in the database.
     * @param {contentCreateManyAndReturnArgs} args - Arguments to create many Contents.
     * @example
     * // Create many Contents
     * const content = await prisma.content.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contents and only return the `id`
     * const contentWithIdOnly = await prisma.content.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends contentCreateManyAndReturnArgs>(args?: SelectSubset<T, contentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Content.
     * @param {contentDeleteArgs} args - Arguments to delete one Content.
     * @example
     * // Delete one Content
     * const Content = await prisma.content.delete({
     *   where: {
     *     // ... filter to delete one Content
     *   }
     * })
     * 
     */
    delete<T extends contentDeleteArgs>(args: SelectSubset<T, contentDeleteArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Content.
     * @param {contentUpdateArgs} args - Arguments to update one Content.
     * @example
     * // Update one Content
     * const content = await prisma.content.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends contentUpdateArgs>(args: SelectSubset<T, contentUpdateArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Contents.
     * @param {contentDeleteManyArgs} args - Arguments to filter Contents to delete.
     * @example
     * // Delete a few Contents
     * const { count } = await prisma.content.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends contentDeleteManyArgs>(args?: SelectSubset<T, contentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contents
     * const content = await prisma.content.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends contentUpdateManyArgs>(args: SelectSubset<T, contentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contents and returns the data updated in the database.
     * @param {contentUpdateManyAndReturnArgs} args - Arguments to update many Contents.
     * @example
     * // Update many Contents
     * const content = await prisma.content.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Contents and only return the `id`
     * const contentWithIdOnly = await prisma.content.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends contentUpdateManyAndReturnArgs>(args: SelectSubset<T, contentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Content.
     * @param {contentUpsertArgs} args - Arguments to update or create a Content.
     * @example
     * // Update or create a Content
     * const content = await prisma.content.upsert({
     *   create: {
     *     // ... data to create a Content
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Content we want to update
     *   }
     * })
     */
    upsert<T extends contentUpsertArgs>(args: SelectSubset<T, contentUpsertArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Contents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contentCountArgs} args - Arguments to filter Contents to count.
     * @example
     * // Count the number of Contents
     * const count = await prisma.content.count({
     *   where: {
     *     // ... the filter for the Contents we want to count
     *   }
     * })
    **/
    count<T extends contentCountArgs>(
      args?: Subset<T, contentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Content.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContentAggregateArgs>(args: Subset<T, ContentAggregateArgs>): Prisma.PrismaPromise<GetContentAggregateType<T>>

    /**
     * Group by Content.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends contentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: contentGroupByArgs['orderBy'] }
        : { orderBy?: contentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, contentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the content model
   */
  readonly fields: contentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for content.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__contentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    artist<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    store<T extends storeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, storeDefaultArgs<ExtArgs>>): Prisma__storeClient<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subscription<T extends content$subscriptionArgs<ExtArgs> = {}>(args?: Subset<T, content$subscriptionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$subscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    FanEngagement<T extends content$FanEngagementArgs<ExtArgs> = {}>(args?: Subset<T, content$FanEngagementArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FanEngagementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    favourite_content<T extends content$favourite_contentArgs<ExtArgs> = {}>(args?: Subset<T, content$favourite_contentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$favourite_contentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the content model
   */
  interface contentFieldRefs {
    readonly id: FieldRef<"content", 'String'>
    readonly title: FieldRef<"content", 'String'>
    readonly description: FieldRef<"content", 'String'>
    readonly mediaUrl: FieldRef<"content", 'String'>
    readonly thumbnailUrl: FieldRef<"content", 'String'>
    readonly isPublished: FieldRef<"content", 'Boolean'>
    readonly category: FieldRef<"content", 'String'>
    readonly createdAt: FieldRef<"content", 'DateTime'>
    readonly updatedAt: FieldRef<"content", 'DateTime'>
    readonly storeId: FieldRef<"content", 'String'>
    readonly artistId: FieldRef<"content", 'String'>
  }
    

  // Custom InputTypes
  /**
   * content findUnique
   */
  export type contentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the content
     */
    select?: contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the content
     */
    omit?: contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentInclude<ExtArgs> | null
    /**
     * Filter, which content to fetch.
     */
    where: contentWhereUniqueInput
  }

  /**
   * content findUniqueOrThrow
   */
  export type contentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the content
     */
    select?: contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the content
     */
    omit?: contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentInclude<ExtArgs> | null
    /**
     * Filter, which content to fetch.
     */
    where: contentWhereUniqueInput
  }

  /**
   * content findFirst
   */
  export type contentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the content
     */
    select?: contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the content
     */
    omit?: contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentInclude<ExtArgs> | null
    /**
     * Filter, which content to fetch.
     */
    where?: contentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contents to fetch.
     */
    orderBy?: contentOrderByWithRelationInput | contentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for contents.
     */
    cursor?: contentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of contents.
     */
    distinct?: ContentScalarFieldEnum | ContentScalarFieldEnum[]
  }

  /**
   * content findFirstOrThrow
   */
  export type contentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the content
     */
    select?: contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the content
     */
    omit?: contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentInclude<ExtArgs> | null
    /**
     * Filter, which content to fetch.
     */
    where?: contentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contents to fetch.
     */
    orderBy?: contentOrderByWithRelationInput | contentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for contents.
     */
    cursor?: contentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of contents.
     */
    distinct?: ContentScalarFieldEnum | ContentScalarFieldEnum[]
  }

  /**
   * content findMany
   */
  export type contentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the content
     */
    select?: contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the content
     */
    omit?: contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentInclude<ExtArgs> | null
    /**
     * Filter, which contents to fetch.
     */
    where?: contentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contents to fetch.
     */
    orderBy?: contentOrderByWithRelationInput | contentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing contents.
     */
    cursor?: contentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contents.
     */
    skip?: number
    distinct?: ContentScalarFieldEnum | ContentScalarFieldEnum[]
  }

  /**
   * content create
   */
  export type contentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the content
     */
    select?: contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the content
     */
    omit?: contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentInclude<ExtArgs> | null
    /**
     * The data needed to create a content.
     */
    data: XOR<contentCreateInput, contentUncheckedCreateInput>
  }

  /**
   * content createMany
   */
  export type contentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many contents.
     */
    data: contentCreateManyInput | contentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * content createManyAndReturn
   */
  export type contentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the content
     */
    select?: contentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the content
     */
    omit?: contentOmit<ExtArgs> | null
    /**
     * The data used to create many contents.
     */
    data: contentCreateManyInput | contentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * content update
   */
  export type contentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the content
     */
    select?: contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the content
     */
    omit?: contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentInclude<ExtArgs> | null
    /**
     * The data needed to update a content.
     */
    data: XOR<contentUpdateInput, contentUncheckedUpdateInput>
    /**
     * Choose, which content to update.
     */
    where: contentWhereUniqueInput
  }

  /**
   * content updateMany
   */
  export type contentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update contents.
     */
    data: XOR<contentUpdateManyMutationInput, contentUncheckedUpdateManyInput>
    /**
     * Filter which contents to update
     */
    where?: contentWhereInput
    /**
     * Limit how many contents to update.
     */
    limit?: number
  }

  /**
   * content updateManyAndReturn
   */
  export type contentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the content
     */
    select?: contentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the content
     */
    omit?: contentOmit<ExtArgs> | null
    /**
     * The data used to update contents.
     */
    data: XOR<contentUpdateManyMutationInput, contentUncheckedUpdateManyInput>
    /**
     * Filter which contents to update
     */
    where?: contentWhereInput
    /**
     * Limit how many contents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * content upsert
   */
  export type contentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the content
     */
    select?: contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the content
     */
    omit?: contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentInclude<ExtArgs> | null
    /**
     * The filter to search for the content to update in case it exists.
     */
    where: contentWhereUniqueInput
    /**
     * In case the content found by the `where` argument doesn't exist, create a new content with this data.
     */
    create: XOR<contentCreateInput, contentUncheckedCreateInput>
    /**
     * In case the content was found with the provided `where` argument, update it with this data.
     */
    update: XOR<contentUpdateInput, contentUncheckedUpdateInput>
  }

  /**
   * content delete
   */
  export type contentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the content
     */
    select?: contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the content
     */
    omit?: contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentInclude<ExtArgs> | null
    /**
     * Filter which content to delete.
     */
    where: contentWhereUniqueInput
  }

  /**
   * content deleteMany
   */
  export type contentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which contents to delete
     */
    where?: contentWhereInput
    /**
     * Limit how many contents to delete.
     */
    limit?: number
  }

  /**
   * content.subscription
   */
  export type content$subscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subscription
     */
    select?: subscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subscription
     */
    omit?: subscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subscriptionInclude<ExtArgs> | null
    where?: subscriptionWhereInput
    orderBy?: subscriptionOrderByWithRelationInput | subscriptionOrderByWithRelationInput[]
    cursor?: subscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * content.FanEngagement
   */
  export type content$FanEngagementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FanEngagement
     */
    select?: FanEngagementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FanEngagement
     */
    omit?: FanEngagementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FanEngagementInclude<ExtArgs> | null
    where?: FanEngagementWhereInput
    orderBy?: FanEngagementOrderByWithRelationInput | FanEngagementOrderByWithRelationInput[]
    cursor?: FanEngagementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FanEngagementScalarFieldEnum | FanEngagementScalarFieldEnum[]
  }

  /**
   * content.favourite_content
   */
  export type content$favourite_contentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favourite_content
     */
    select?: favourite_contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the favourite_content
     */
    omit?: favourite_contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favourite_contentInclude<ExtArgs> | null
    where?: favourite_contentWhereInput
    orderBy?: favourite_contentOrderByWithRelationInput | favourite_contentOrderByWithRelationInput[]
    cursor?: favourite_contentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Favourite_contentScalarFieldEnum | Favourite_contentScalarFieldEnum[]
  }

  /**
   * content without action
   */
  export type contentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the content
     */
    select?: contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the content
     */
    omit?: contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentInclude<ExtArgs> | null
  }


  /**
   * Model store
   */

  export type AggregateStore = {
    _count: StoreCountAggregateOutputType | null
    _min: StoreMinAggregateOutputType | null
    _max: StoreMaxAggregateOutputType | null
  }

  export type StoreMinAggregateOutputType = {
    id: string | null
    storeName: string | null
    storeLogo: string | null
    imagePublicID: string | null
    storeOwnerID: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type StoreMaxAggregateOutputType = {
    id: string | null
    storeName: string | null
    storeLogo: string | null
    imagePublicID: string | null
    storeOwnerID: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type StoreCountAggregateOutputType = {
    id: number
    storeName: number
    storeLogo: number
    imagePublicID: number
    storeOwnerID: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type StoreMinAggregateInputType = {
    id?: true
    storeName?: true
    storeLogo?: true
    imagePublicID?: true
    storeOwnerID?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type StoreMaxAggregateInputType = {
    id?: true
    storeName?: true
    storeLogo?: true
    imagePublicID?: true
    storeOwnerID?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type StoreCountAggregateInputType = {
    id?: true
    storeName?: true
    storeLogo?: true
    imagePublicID?: true
    storeOwnerID?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type StoreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which store to aggregate.
     */
    where?: storeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of stores to fetch.
     */
    orderBy?: storeOrderByWithRelationInput | storeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: storeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned stores
    **/
    _count?: true | StoreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StoreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StoreMaxAggregateInputType
  }

  export type GetStoreAggregateType<T extends StoreAggregateArgs> = {
        [P in keyof T & keyof AggregateStore]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStore[P]>
      : GetScalarType<T[P], AggregateStore[P]>
  }




  export type storeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: storeWhereInput
    orderBy?: storeOrderByWithAggregationInput | storeOrderByWithAggregationInput[]
    by: StoreScalarFieldEnum[] | StoreScalarFieldEnum
    having?: storeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StoreCountAggregateInputType | true
    _min?: StoreMinAggregateInputType
    _max?: StoreMaxAggregateInputType
  }

  export type StoreGroupByOutputType = {
    id: string
    storeName: string | null
    storeLogo: string | null
    imagePublicID: string | null
    storeOwnerID: string | null
    createdAt: Date
    updatedAt: Date
    userId: string | null
    _count: StoreCountAggregateOutputType | null
    _min: StoreMinAggregateOutputType | null
    _max: StoreMaxAggregateOutputType | null
  }

  type GetStoreGroupByPayload<T extends storeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StoreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StoreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StoreGroupByOutputType[P]>
            : GetScalarType<T[P], StoreGroupByOutputType[P]>
        }
      >
    >


  export type storeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    storeName?: boolean
    storeLogo?: boolean
    imagePublicID?: boolean
    storeOwnerID?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    order?: boolean | store$orderArgs<ExtArgs>
    payment?: boolean | store$paymentArgs<ExtArgs>
    products?: boolean | store$productsArgs<ExtArgs>
    storeOwner?: boolean | store$storeOwnerArgs<ExtArgs>
    content?: boolean | store$contentArgs<ExtArgs>
    favourite_content?: boolean | store$favourite_contentArgs<ExtArgs>
    _count?: boolean | StoreCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["store"]>

  export type storeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    storeName?: boolean
    storeLogo?: boolean
    imagePublicID?: boolean
    storeOwnerID?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    storeOwner?: boolean | store$storeOwnerArgs<ExtArgs>
  }, ExtArgs["result"]["store"]>

  export type storeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    storeName?: boolean
    storeLogo?: boolean
    imagePublicID?: boolean
    storeOwnerID?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    storeOwner?: boolean | store$storeOwnerArgs<ExtArgs>
  }, ExtArgs["result"]["store"]>

  export type storeSelectScalar = {
    id?: boolean
    storeName?: boolean
    storeLogo?: boolean
    imagePublicID?: boolean
    storeOwnerID?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type storeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "storeName" | "storeLogo" | "imagePublicID" | "storeOwnerID" | "createdAt" | "updatedAt" | "userId", ExtArgs["result"]["store"]>
  export type storeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | store$orderArgs<ExtArgs>
    payment?: boolean | store$paymentArgs<ExtArgs>
    products?: boolean | store$productsArgs<ExtArgs>
    storeOwner?: boolean | store$storeOwnerArgs<ExtArgs>
    content?: boolean | store$contentArgs<ExtArgs>
    favourite_content?: boolean | store$favourite_contentArgs<ExtArgs>
    _count?: boolean | StoreCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type storeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    storeOwner?: boolean | store$storeOwnerArgs<ExtArgs>
  }
  export type storeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    storeOwner?: boolean | store$storeOwnerArgs<ExtArgs>
  }

  export type $storePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "store"
    objects: {
      order: Prisma.$orderPayload<ExtArgs>[]
      payment: Prisma.$paymentPayload<ExtArgs>[]
      products: Prisma.$productPayload<ExtArgs>[]
      storeOwner: Prisma.$userPayload<ExtArgs> | null
      content: Prisma.$contentPayload<ExtArgs>[]
      favourite_content: Prisma.$favourite_contentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      storeName: string | null
      storeLogo: string | null
      imagePublicID: string | null
      storeOwnerID: string | null
      createdAt: Date
      updatedAt: Date
      userId: string | null
    }, ExtArgs["result"]["store"]>
    composites: {}
  }

  type storeGetPayload<S extends boolean | null | undefined | storeDefaultArgs> = $Result.GetResult<Prisma.$storePayload, S>

  type storeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<storeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StoreCountAggregateInputType | true
    }

  export interface storeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['store'], meta: { name: 'store' } }
    /**
     * Find zero or one Store that matches the filter.
     * @param {storeFindUniqueArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends storeFindUniqueArgs>(args: SelectSubset<T, storeFindUniqueArgs<ExtArgs>>): Prisma__storeClient<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Store that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {storeFindUniqueOrThrowArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends storeFindUniqueOrThrowArgs>(args: SelectSubset<T, storeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__storeClient<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Store that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {storeFindFirstArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends storeFindFirstArgs>(args?: SelectSubset<T, storeFindFirstArgs<ExtArgs>>): Prisma__storeClient<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Store that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {storeFindFirstOrThrowArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends storeFindFirstOrThrowArgs>(args?: SelectSubset<T, storeFindFirstOrThrowArgs<ExtArgs>>): Prisma__storeClient<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Stores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {storeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stores
     * const stores = await prisma.store.findMany()
     * 
     * // Get first 10 Stores
     * const stores = await prisma.store.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const storeWithIdOnly = await prisma.store.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends storeFindManyArgs>(args?: SelectSubset<T, storeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Store.
     * @param {storeCreateArgs} args - Arguments to create a Store.
     * @example
     * // Create one Store
     * const Store = await prisma.store.create({
     *   data: {
     *     // ... data to create a Store
     *   }
     * })
     * 
     */
    create<T extends storeCreateArgs>(args: SelectSubset<T, storeCreateArgs<ExtArgs>>): Prisma__storeClient<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Stores.
     * @param {storeCreateManyArgs} args - Arguments to create many Stores.
     * @example
     * // Create many Stores
     * const store = await prisma.store.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends storeCreateManyArgs>(args?: SelectSubset<T, storeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Stores and returns the data saved in the database.
     * @param {storeCreateManyAndReturnArgs} args - Arguments to create many Stores.
     * @example
     * // Create many Stores
     * const store = await prisma.store.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Stores and only return the `id`
     * const storeWithIdOnly = await prisma.store.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends storeCreateManyAndReturnArgs>(args?: SelectSubset<T, storeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Store.
     * @param {storeDeleteArgs} args - Arguments to delete one Store.
     * @example
     * // Delete one Store
     * const Store = await prisma.store.delete({
     *   where: {
     *     // ... filter to delete one Store
     *   }
     * })
     * 
     */
    delete<T extends storeDeleteArgs>(args: SelectSubset<T, storeDeleteArgs<ExtArgs>>): Prisma__storeClient<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Store.
     * @param {storeUpdateArgs} args - Arguments to update one Store.
     * @example
     * // Update one Store
     * const store = await prisma.store.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends storeUpdateArgs>(args: SelectSubset<T, storeUpdateArgs<ExtArgs>>): Prisma__storeClient<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Stores.
     * @param {storeDeleteManyArgs} args - Arguments to filter Stores to delete.
     * @example
     * // Delete a few Stores
     * const { count } = await prisma.store.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends storeDeleteManyArgs>(args?: SelectSubset<T, storeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {storeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stores
     * const store = await prisma.store.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends storeUpdateManyArgs>(args: SelectSubset<T, storeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stores and returns the data updated in the database.
     * @param {storeUpdateManyAndReturnArgs} args - Arguments to update many Stores.
     * @example
     * // Update many Stores
     * const store = await prisma.store.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Stores and only return the `id`
     * const storeWithIdOnly = await prisma.store.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends storeUpdateManyAndReturnArgs>(args: SelectSubset<T, storeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Store.
     * @param {storeUpsertArgs} args - Arguments to update or create a Store.
     * @example
     * // Update or create a Store
     * const store = await prisma.store.upsert({
     *   create: {
     *     // ... data to create a Store
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Store we want to update
     *   }
     * })
     */
    upsert<T extends storeUpsertArgs>(args: SelectSubset<T, storeUpsertArgs<ExtArgs>>): Prisma__storeClient<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Stores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {storeCountArgs} args - Arguments to filter Stores to count.
     * @example
     * // Count the number of Stores
     * const count = await prisma.store.count({
     *   where: {
     *     // ... the filter for the Stores we want to count
     *   }
     * })
    **/
    count<T extends storeCountArgs>(
      args?: Subset<T, storeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StoreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Store.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StoreAggregateArgs>(args: Subset<T, StoreAggregateArgs>): Prisma.PrismaPromise<GetStoreAggregateType<T>>

    /**
     * Group by Store.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {storeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends storeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: storeGroupByArgs['orderBy'] }
        : { orderBy?: storeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, storeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the store model
   */
  readonly fields: storeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for store.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__storeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends store$orderArgs<ExtArgs> = {}>(args?: Subset<T, store$orderArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payment<T extends store$paymentArgs<ExtArgs> = {}>(args?: Subset<T, store$paymentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    products<T extends store$productsArgs<ExtArgs> = {}>(args?: Subset<T, store$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    storeOwner<T extends store$storeOwnerArgs<ExtArgs> = {}>(args?: Subset<T, store$storeOwnerArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    content<T extends store$contentArgs<ExtArgs> = {}>(args?: Subset<T, store$contentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    favourite_content<T extends store$favourite_contentArgs<ExtArgs> = {}>(args?: Subset<T, store$favourite_contentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$favourite_contentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the store model
   */
  interface storeFieldRefs {
    readonly id: FieldRef<"store", 'String'>
    readonly storeName: FieldRef<"store", 'String'>
    readonly storeLogo: FieldRef<"store", 'String'>
    readonly imagePublicID: FieldRef<"store", 'String'>
    readonly storeOwnerID: FieldRef<"store", 'String'>
    readonly createdAt: FieldRef<"store", 'DateTime'>
    readonly updatedAt: FieldRef<"store", 'DateTime'>
    readonly userId: FieldRef<"store", 'String'>
  }
    

  // Custom InputTypes
  /**
   * store findUnique
   */
  export type storeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeInclude<ExtArgs> | null
    /**
     * Filter, which store to fetch.
     */
    where: storeWhereUniqueInput
  }

  /**
   * store findUniqueOrThrow
   */
  export type storeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeInclude<ExtArgs> | null
    /**
     * Filter, which store to fetch.
     */
    where: storeWhereUniqueInput
  }

  /**
   * store findFirst
   */
  export type storeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeInclude<ExtArgs> | null
    /**
     * Filter, which store to fetch.
     */
    where?: storeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of stores to fetch.
     */
    orderBy?: storeOrderByWithRelationInput | storeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for stores.
     */
    cursor?: storeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of stores.
     */
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * store findFirstOrThrow
   */
  export type storeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeInclude<ExtArgs> | null
    /**
     * Filter, which store to fetch.
     */
    where?: storeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of stores to fetch.
     */
    orderBy?: storeOrderByWithRelationInput | storeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for stores.
     */
    cursor?: storeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of stores.
     */
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * store findMany
   */
  export type storeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeInclude<ExtArgs> | null
    /**
     * Filter, which stores to fetch.
     */
    where?: storeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of stores to fetch.
     */
    orderBy?: storeOrderByWithRelationInput | storeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing stores.
     */
    cursor?: storeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` stores.
     */
    skip?: number
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * store create
   */
  export type storeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeInclude<ExtArgs> | null
    /**
     * The data needed to create a store.
     */
    data: XOR<storeCreateInput, storeUncheckedCreateInput>
  }

  /**
   * store createMany
   */
  export type storeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many stores.
     */
    data: storeCreateManyInput | storeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * store createManyAndReturn
   */
  export type storeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * The data used to create many stores.
     */
    data: storeCreateManyInput | storeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * store update
   */
  export type storeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeInclude<ExtArgs> | null
    /**
     * The data needed to update a store.
     */
    data: XOR<storeUpdateInput, storeUncheckedUpdateInput>
    /**
     * Choose, which store to update.
     */
    where: storeWhereUniqueInput
  }

  /**
   * store updateMany
   */
  export type storeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update stores.
     */
    data: XOR<storeUpdateManyMutationInput, storeUncheckedUpdateManyInput>
    /**
     * Filter which stores to update
     */
    where?: storeWhereInput
    /**
     * Limit how many stores to update.
     */
    limit?: number
  }

  /**
   * store updateManyAndReturn
   */
  export type storeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * The data used to update stores.
     */
    data: XOR<storeUpdateManyMutationInput, storeUncheckedUpdateManyInput>
    /**
     * Filter which stores to update
     */
    where?: storeWhereInput
    /**
     * Limit how many stores to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * store upsert
   */
  export type storeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeInclude<ExtArgs> | null
    /**
     * The filter to search for the store to update in case it exists.
     */
    where: storeWhereUniqueInput
    /**
     * In case the store found by the `where` argument doesn't exist, create a new store with this data.
     */
    create: XOR<storeCreateInput, storeUncheckedCreateInput>
    /**
     * In case the store was found with the provided `where` argument, update it with this data.
     */
    update: XOR<storeUpdateInput, storeUncheckedUpdateInput>
  }

  /**
   * store delete
   */
  export type storeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeInclude<ExtArgs> | null
    /**
     * Filter which store to delete.
     */
    where: storeWhereUniqueInput
  }

  /**
   * store deleteMany
   */
  export type storeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which stores to delete
     */
    where?: storeWhereInput
    /**
     * Limit how many stores to delete.
     */
    limit?: number
  }

  /**
   * store.order
   */
  export type store$orderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order
     */
    omit?: orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    where?: orderWhereInput
    orderBy?: orderOrderByWithRelationInput | orderOrderByWithRelationInput[]
    cursor?: orderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * store.payment
   */
  export type store$paymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    where?: paymentWhereInput
    orderBy?: paymentOrderByWithRelationInput | paymentOrderByWithRelationInput[]
    cursor?: paymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * store.products
   */
  export type store$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    where?: productWhereInput
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    cursor?: productWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * store.storeOwner
   */
  export type store$storeOwnerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
  }

  /**
   * store.content
   */
  export type store$contentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the content
     */
    select?: contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the content
     */
    omit?: contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentInclude<ExtArgs> | null
    where?: contentWhereInput
    orderBy?: contentOrderByWithRelationInput | contentOrderByWithRelationInput[]
    cursor?: contentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContentScalarFieldEnum | ContentScalarFieldEnum[]
  }

  /**
   * store.favourite_content
   */
  export type store$favourite_contentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favourite_content
     */
    select?: favourite_contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the favourite_content
     */
    omit?: favourite_contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favourite_contentInclude<ExtArgs> | null
    where?: favourite_contentWhereInput
    orderBy?: favourite_contentOrderByWithRelationInput | favourite_contentOrderByWithRelationInput[]
    cursor?: favourite_contentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Favourite_contentScalarFieldEnum | Favourite_contentScalarFieldEnum[]
  }

  /**
   * store without action
   */
  export type storeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeInclude<ExtArgs> | null
  }


  /**
   * Model product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    quantity: number | null
    rating: Decimal | null
  }

  export type ProductSumAggregateOutputType = {
    quantity: number | null
    rating: Decimal | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    productName: string | null
    description: string | null
    productImageID: string | null
    quantity: number | null
    price: string | null
    rating: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
    storeId: string | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    productName: string | null
    description: string | null
    productImageID: string | null
    quantity: number | null
    price: string | null
    rating: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
    storeId: string | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    productName: number
    description: number
    productImageID: number
    quantity: number
    price: number
    rating: number
    createdAt: number
    updatedAt: number
    storeId: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    quantity?: true
    rating?: true
  }

  export type ProductSumAggregateInputType = {
    quantity?: true
    rating?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    productName?: true
    description?: true
    productImageID?: true
    quantity?: true
    price?: true
    rating?: true
    createdAt?: true
    updatedAt?: true
    storeId?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    productName?: true
    description?: true
    productImageID?: true
    quantity?: true
    price?: true
    rating?: true
    createdAt?: true
    updatedAt?: true
    storeId?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    productName?: true
    description?: true
    productImageID?: true
    quantity?: true
    price?: true
    rating?: true
    createdAt?: true
    updatedAt?: true
    storeId?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which product to aggregate.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type productGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productWhereInput
    orderBy?: productOrderByWithAggregationInput | productOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: productScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: string
    productName: string
    description: string
    productImageID: string | null
    quantity: number | null
    price: string
    rating: Decimal | null
    createdAt: Date
    updatedAt: Date
    storeId: string | null
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends productGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type productSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productName?: boolean
    description?: boolean
    productImageID?: boolean
    quantity?: boolean
    price?: boolean
    rating?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    storeId?: boolean
    orderProducts?: boolean | product$orderProductsArgs<ExtArgs>
    productImage?: boolean | product$productImageArgs<ExtArgs>
    store?: boolean | product$storeArgs<ExtArgs>
    ratings?: boolean | product$ratingsArgs<ExtArgs>
    reviews?: boolean | product$reviewsArgs<ExtArgs>
    favourite_content?: boolean | product$favourite_contentArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type productSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productName?: boolean
    description?: boolean
    productImageID?: boolean
    quantity?: boolean
    price?: boolean
    rating?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    storeId?: boolean
    productImage?: boolean | product$productImageArgs<ExtArgs>
    store?: boolean | product$storeArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type productSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productName?: boolean
    description?: boolean
    productImageID?: boolean
    quantity?: boolean
    price?: boolean
    rating?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    storeId?: boolean
    productImage?: boolean | product$productImageArgs<ExtArgs>
    store?: boolean | product$storeArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type productSelectScalar = {
    id?: boolean
    productName?: boolean
    description?: boolean
    productImageID?: boolean
    quantity?: boolean
    price?: boolean
    rating?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    storeId?: boolean
  }

  export type productOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productName" | "description" | "productImageID" | "quantity" | "price" | "rating" | "createdAt" | "updatedAt" | "storeId", ExtArgs["result"]["product"]>
  export type productInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderProducts?: boolean | product$orderProductsArgs<ExtArgs>
    productImage?: boolean | product$productImageArgs<ExtArgs>
    store?: boolean | product$storeArgs<ExtArgs>
    ratings?: boolean | product$ratingsArgs<ExtArgs>
    reviews?: boolean | product$reviewsArgs<ExtArgs>
    favourite_content?: boolean | product$favourite_contentArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type productIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productImage?: boolean | product$productImageArgs<ExtArgs>
    store?: boolean | product$storeArgs<ExtArgs>
  }
  export type productIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productImage?: boolean | product$productImageArgs<ExtArgs>
    store?: boolean | product$storeArgs<ExtArgs>
  }

  export type $productPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "product"
    objects: {
      orderProducts: Prisma.$orderProductsPayload<ExtArgs>[]
      productImage: Prisma.$productImagePayload<ExtArgs> | null
      store: Prisma.$storePayload<ExtArgs> | null
      ratings: Prisma.$ratingPayload<ExtArgs>[]
      reviews: Prisma.$reviewPayload<ExtArgs>[]
      favourite_content: Prisma.$favourite_contentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productName: string
      description: string
      productImageID: string | null
      quantity: number | null
      price: string
      rating: Prisma.Decimal | null
      createdAt: Date
      updatedAt: Date
      storeId: string | null
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type productGetPayload<S extends boolean | null | undefined | productDefaultArgs> = $Result.GetResult<Prisma.$productPayload, S>

  type productCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<productFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface productDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['product'], meta: { name: 'product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {productFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends productFindUniqueArgs>(args: SelectSubset<T, productFindUniqueArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {productFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends productFindUniqueOrThrowArgs>(args: SelectSubset<T, productFindUniqueOrThrowArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends productFindFirstArgs>(args?: SelectSubset<T, productFindFirstArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends productFindFirstOrThrowArgs>(args?: SelectSubset<T, productFindFirstOrThrowArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends productFindManyArgs>(args?: SelectSubset<T, productFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Product.
     * @param {productCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends productCreateArgs>(args: SelectSubset<T, productCreateArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Products.
     * @param {productCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends productCreateManyArgs>(args?: SelectSubset<T, productCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {productCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `id`
     * const productWithIdOnly = await prisma.product.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends productCreateManyAndReturnArgs>(args?: SelectSubset<T, productCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Product.
     * @param {productDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends productDeleteArgs>(args: SelectSubset<T, productDeleteArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Product.
     * @param {productUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends productUpdateArgs>(args: SelectSubset<T, productUpdateArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Products.
     * @param {productDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends productDeleteManyArgs>(args?: SelectSubset<T, productDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends productUpdateManyArgs>(args: SelectSubset<T, productUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products and returns the data updated in the database.
     * @param {productUpdateManyAndReturnArgs} args - Arguments to update many Products.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Products and only return the `id`
     * const productWithIdOnly = await prisma.product.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends productUpdateManyAndReturnArgs>(args: SelectSubset<T, productUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Product.
     * @param {productUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends productUpsertArgs>(args: SelectSubset<T, productUpsertArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends productCountArgs>(
      args?: Subset<T, productCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productGroupByArgs['orderBy'] }
        : { orderBy?: productGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the product model
   */
  readonly fields: productFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__productClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orderProducts<T extends product$orderProductsArgs<ExtArgs> = {}>(args?: Subset<T, product$orderProductsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderProductsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    productImage<T extends product$productImageArgs<ExtArgs> = {}>(args?: Subset<T, product$productImageArgs<ExtArgs>>): Prisma__productImageClient<$Result.GetResult<Prisma.$productImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    store<T extends product$storeArgs<ExtArgs> = {}>(args?: Subset<T, product$storeArgs<ExtArgs>>): Prisma__storeClient<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    ratings<T extends product$ratingsArgs<ExtArgs> = {}>(args?: Subset<T, product$ratingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ratingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviews<T extends product$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, product$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    favourite_content<T extends product$favourite_contentArgs<ExtArgs> = {}>(args?: Subset<T, product$favourite_contentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$favourite_contentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the product model
   */
  interface productFieldRefs {
    readonly id: FieldRef<"product", 'String'>
    readonly productName: FieldRef<"product", 'String'>
    readonly description: FieldRef<"product", 'String'>
    readonly productImageID: FieldRef<"product", 'String'>
    readonly quantity: FieldRef<"product", 'Int'>
    readonly price: FieldRef<"product", 'String'>
    readonly rating: FieldRef<"product", 'Decimal'>
    readonly createdAt: FieldRef<"product", 'DateTime'>
    readonly updatedAt: FieldRef<"product", 'DateTime'>
    readonly storeId: FieldRef<"product", 'String'>
  }
    

  // Custom InputTypes
  /**
   * product findUnique
   */
  export type productFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where: productWhereUniqueInput
  }

  /**
   * product findUniqueOrThrow
   */
  export type productFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where: productWhereUniqueInput
  }

  /**
   * product findFirst
   */
  export type productFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * product findFirstOrThrow
   */
  export type productFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which product to fetch.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * product findMany
   */
  export type productFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing products.
     */
    cursor?: productWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * product create
   */
  export type productCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * The data needed to create a product.
     */
    data: XOR<productCreateInput, productUncheckedCreateInput>
  }

  /**
   * product createMany
   */
  export type productCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many products.
     */
    data: productCreateManyInput | productCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * product createManyAndReturn
   */
  export type productCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * The data used to create many products.
     */
    data: productCreateManyInput | productCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * product update
   */
  export type productUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * The data needed to update a product.
     */
    data: XOR<productUpdateInput, productUncheckedUpdateInput>
    /**
     * Choose, which product to update.
     */
    where: productWhereUniqueInput
  }

  /**
   * product updateMany
   */
  export type productUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update products.
     */
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyInput>
    /**
     * Filter which products to update
     */
    where?: productWhereInput
    /**
     * Limit how many products to update.
     */
    limit?: number
  }

  /**
   * product updateManyAndReturn
   */
  export type productUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * The data used to update products.
     */
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyInput>
    /**
     * Filter which products to update
     */
    where?: productWhereInput
    /**
     * Limit how many products to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * product upsert
   */
  export type productUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * The filter to search for the product to update in case it exists.
     */
    where: productWhereUniqueInput
    /**
     * In case the product found by the `where` argument doesn't exist, create a new product with this data.
     */
    create: XOR<productCreateInput, productUncheckedCreateInput>
    /**
     * In case the product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productUpdateInput, productUncheckedUpdateInput>
  }

  /**
   * product delete
   */
  export type productDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    /**
     * Filter which product to delete.
     */
    where: productWhereUniqueInput
  }

  /**
   * product deleteMany
   */
  export type productDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which products to delete
     */
    where?: productWhereInput
    /**
     * Limit how many products to delete.
     */
    limit?: number
  }

  /**
   * product.orderProducts
   */
  export type product$orderProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProducts
     */
    select?: orderProductsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderProducts
     */
    omit?: orderProductsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductsInclude<ExtArgs> | null
    where?: orderProductsWhereInput
    orderBy?: orderProductsOrderByWithRelationInput | orderProductsOrderByWithRelationInput[]
    cursor?: orderProductsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderProductsScalarFieldEnum | OrderProductsScalarFieldEnum[]
  }

  /**
   * product.productImage
   */
  export type product$productImageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productImage
     */
    select?: productImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productImage
     */
    omit?: productImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productImageInclude<ExtArgs> | null
    where?: productImageWhereInput
  }

  /**
   * product.store
   */
  export type product$storeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeInclude<ExtArgs> | null
    where?: storeWhereInput
  }

  /**
   * product.ratings
   */
  export type product$ratingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rating
     */
    select?: ratingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rating
     */
    omit?: ratingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ratingInclude<ExtArgs> | null
    where?: ratingWhereInput
    orderBy?: ratingOrderByWithRelationInput | ratingOrderByWithRelationInput[]
    cursor?: ratingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * product.reviews
   */
  export type product$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    where?: reviewWhereInput
    orderBy?: reviewOrderByWithRelationInput | reviewOrderByWithRelationInput[]
    cursor?: reviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * product.favourite_content
   */
  export type product$favourite_contentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favourite_content
     */
    select?: favourite_contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the favourite_content
     */
    omit?: favourite_contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favourite_contentInclude<ExtArgs> | null
    where?: favourite_contentWhereInput
    orderBy?: favourite_contentOrderByWithRelationInput | favourite_contentOrderByWithRelationInput[]
    cursor?: favourite_contentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Favourite_contentScalarFieldEnum | Favourite_contentScalarFieldEnum[]
  }

  /**
   * product without action
   */
  export type productDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
  }


  /**
   * Model review
   */

  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewMinAggregateOutputType = {
    id: string | null
    userID: string | null
    productID: string | null
    review: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: string | null
    userID: string | null
    productID: string | null
    review: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    userID: number
    productID: number
    review: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReviewMinAggregateInputType = {
    id?: true
    userID?: true
    productID?: true
    review?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    userID?: true
    productID?: true
    review?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    userID?: true
    productID?: true
    review?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which review to aggregate.
     */
    where?: reviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewOrderByWithRelationInput | reviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: reviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type reviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reviewWhereInput
    orderBy?: reviewOrderByWithAggregationInput | reviewOrderByWithAggregationInput[]
    by: ReviewScalarFieldEnum[] | ReviewScalarFieldEnum
    having?: reviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }

  export type ReviewGroupByOutputType = {
    id: string
    userID: string | null
    productID: string | null
    review: string | null
    createdAt: Date
    updatedAt: Date
    _count: ReviewCountAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends reviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type reviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userID?: boolean
    productID?: boolean
    review?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | review$productArgs<ExtArgs>
    user?: boolean | review$userArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type reviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userID?: boolean
    productID?: boolean
    review?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | review$productArgs<ExtArgs>
    user?: boolean | review$userArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type reviewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userID?: boolean
    productID?: boolean
    review?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | review$productArgs<ExtArgs>
    user?: boolean | review$userArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type reviewSelectScalar = {
    id?: boolean
    userID?: boolean
    productID?: boolean
    review?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type reviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userID" | "productID" | "review" | "createdAt" | "updatedAt", ExtArgs["result"]["review"]>
  export type reviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | review$productArgs<ExtArgs>
    user?: boolean | review$userArgs<ExtArgs>
  }
  export type reviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | review$productArgs<ExtArgs>
    user?: boolean | review$userArgs<ExtArgs>
  }
  export type reviewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | review$productArgs<ExtArgs>
    user?: boolean | review$userArgs<ExtArgs>
  }

  export type $reviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "review"
    objects: {
      product: Prisma.$productPayload<ExtArgs> | null
      user: Prisma.$userPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userID: string | null
      productID: string | null
      review: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["review"]>
    composites: {}
  }

  type reviewGetPayload<S extends boolean | null | undefined | reviewDefaultArgs> = $Result.GetResult<Prisma.$reviewPayload, S>

  type reviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<reviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface reviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['review'], meta: { name: 'review' } }
    /**
     * Find zero or one Review that matches the filter.
     * @param {reviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends reviewFindUniqueArgs>(args: SelectSubset<T, reviewFindUniqueArgs<ExtArgs>>): Prisma__reviewClient<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Review that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {reviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends reviewFindUniqueOrThrowArgs>(args: SelectSubset<T, reviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__reviewClient<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends reviewFindFirstArgs>(args?: SelectSubset<T, reviewFindFirstArgs<ExtArgs>>): Prisma__reviewClient<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends reviewFindFirstOrThrowArgs>(args?: SelectSubset<T, reviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__reviewClient<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends reviewFindManyArgs>(args?: SelectSubset<T, reviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Review.
     * @param {reviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
     */
    create<T extends reviewCreateArgs>(args: SelectSubset<T, reviewCreateArgs<ExtArgs>>): Prisma__reviewClient<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reviews.
     * @param {reviewCreateManyArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends reviewCreateManyArgs>(args?: SelectSubset<T, reviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reviews and returns the data saved in the database.
     * @param {reviewCreateManyAndReturnArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends reviewCreateManyAndReturnArgs>(args?: SelectSubset<T, reviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Review.
     * @param {reviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
     */
    delete<T extends reviewDeleteArgs>(args: SelectSubset<T, reviewDeleteArgs<ExtArgs>>): Prisma__reviewClient<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Review.
     * @param {reviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends reviewUpdateArgs>(args: SelectSubset<T, reviewUpdateArgs<ExtArgs>>): Prisma__reviewClient<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reviews.
     * @param {reviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends reviewDeleteManyArgs>(args?: SelectSubset<T, reviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends reviewUpdateManyArgs>(args: SelectSubset<T, reviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews and returns the data updated in the database.
     * @param {reviewUpdateManyAndReturnArgs} args - Arguments to update many Reviews.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends reviewUpdateManyAndReturnArgs>(args: SelectSubset<T, reviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Review.
     * @param {reviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
     */
    upsert<T extends reviewUpsertArgs>(args: SelectSubset<T, reviewUpsertArgs<ExtArgs>>): Prisma__reviewClient<$Result.GetResult<Prisma.$reviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends reviewCountArgs>(
      args?: Subset<T, reviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends reviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: reviewGroupByArgs['orderBy'] }
        : { orderBy?: reviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, reviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the review model
   */
  readonly fields: reviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__reviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends review$productArgs<ExtArgs> = {}>(args?: Subset<T, review$productArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends review$userArgs<ExtArgs> = {}>(args?: Subset<T, review$userArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the review model
   */
  interface reviewFieldRefs {
    readonly id: FieldRef<"review", 'String'>
    readonly userID: FieldRef<"review", 'String'>
    readonly productID: FieldRef<"review", 'String'>
    readonly review: FieldRef<"review", 'String'>
    readonly createdAt: FieldRef<"review", 'DateTime'>
    readonly updatedAt: FieldRef<"review", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * review findUnique
   */
  export type reviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    /**
     * Filter, which review to fetch.
     */
    where: reviewWhereUniqueInput
  }

  /**
   * review findUniqueOrThrow
   */
  export type reviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    /**
     * Filter, which review to fetch.
     */
    where: reviewWhereUniqueInput
  }

  /**
   * review findFirst
   */
  export type reviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    /**
     * Filter, which review to fetch.
     */
    where?: reviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewOrderByWithRelationInput | reviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reviews.
     */
    cursor?: reviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * review findFirstOrThrow
   */
  export type reviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    /**
     * Filter, which review to fetch.
     */
    where?: reviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewOrderByWithRelationInput | reviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reviews.
     */
    cursor?: reviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * review findMany
   */
  export type reviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    /**
     * Filter, which reviews to fetch.
     */
    where?: reviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reviews to fetch.
     */
    orderBy?: reviewOrderByWithRelationInput | reviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing reviews.
     */
    cursor?: reviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reviews.
     */
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * review create
   */
  export type reviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    /**
     * The data needed to create a review.
     */
    data: XOR<reviewCreateInput, reviewUncheckedCreateInput>
  }

  /**
   * review createMany
   */
  export type reviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many reviews.
     */
    data: reviewCreateManyInput | reviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * review createManyAndReturn
   */
  export type reviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * The data used to create many reviews.
     */
    data: reviewCreateManyInput | reviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * review update
   */
  export type reviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    /**
     * The data needed to update a review.
     */
    data: XOR<reviewUpdateInput, reviewUncheckedUpdateInput>
    /**
     * Choose, which review to update.
     */
    where: reviewWhereUniqueInput
  }

  /**
   * review updateMany
   */
  export type reviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update reviews.
     */
    data: XOR<reviewUpdateManyMutationInput, reviewUncheckedUpdateManyInput>
    /**
     * Filter which reviews to update
     */
    where?: reviewWhereInput
    /**
     * Limit how many reviews to update.
     */
    limit?: number
  }

  /**
   * review updateManyAndReturn
   */
  export type reviewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * The data used to update reviews.
     */
    data: XOR<reviewUpdateManyMutationInput, reviewUncheckedUpdateManyInput>
    /**
     * Filter which reviews to update
     */
    where?: reviewWhereInput
    /**
     * Limit how many reviews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * review upsert
   */
  export type reviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    /**
     * The filter to search for the review to update in case it exists.
     */
    where: reviewWhereUniqueInput
    /**
     * In case the review found by the `where` argument doesn't exist, create a new review with this data.
     */
    create: XOR<reviewCreateInput, reviewUncheckedCreateInput>
    /**
     * In case the review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<reviewUpdateInput, reviewUncheckedUpdateInput>
  }

  /**
   * review delete
   */
  export type reviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
    /**
     * Filter which review to delete.
     */
    where: reviewWhereUniqueInput
  }

  /**
   * review deleteMany
   */
  export type reviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which reviews to delete
     */
    where?: reviewWhereInput
    /**
     * Limit how many reviews to delete.
     */
    limit?: number
  }

  /**
   * review.product
   */
  export type review$productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    where?: productWhereInput
  }

  /**
   * review.user
   */
  export type review$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
  }

  /**
   * review without action
   */
  export type reviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the review
     */
    select?: reviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the review
     */
    omit?: reviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: reviewInclude<ExtArgs> | null
  }


  /**
   * Model rating
   */

  export type AggregateRating = {
    _count: RatingCountAggregateOutputType | null
    _avg: RatingAvgAggregateOutputType | null
    _sum: RatingSumAggregateOutputType | null
    _min: RatingMinAggregateOutputType | null
    _max: RatingMaxAggregateOutputType | null
  }

  export type RatingAvgAggregateOutputType = {
    rating: number | null
  }

  export type RatingSumAggregateOutputType = {
    rating: number | null
  }

  export type RatingMinAggregateOutputType = {
    id: string | null
    userID: string | null
    productID: string | null
    rating: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RatingMaxAggregateOutputType = {
    id: string | null
    userID: string | null
    productID: string | null
    rating: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RatingCountAggregateOutputType = {
    id: number
    userID: number
    productID: number
    rating: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RatingAvgAggregateInputType = {
    rating?: true
  }

  export type RatingSumAggregateInputType = {
    rating?: true
  }

  export type RatingMinAggregateInputType = {
    id?: true
    userID?: true
    productID?: true
    rating?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RatingMaxAggregateInputType = {
    id?: true
    userID?: true
    productID?: true
    rating?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RatingCountAggregateInputType = {
    id?: true
    userID?: true
    productID?: true
    rating?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RatingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which rating to aggregate.
     */
    where?: ratingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ratings to fetch.
     */
    orderBy?: ratingOrderByWithRelationInput | ratingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ratingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ratings
    **/
    _count?: true | RatingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RatingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RatingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RatingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RatingMaxAggregateInputType
  }

  export type GetRatingAggregateType<T extends RatingAggregateArgs> = {
        [P in keyof T & keyof AggregateRating]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRating[P]>
      : GetScalarType<T[P], AggregateRating[P]>
  }




  export type ratingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ratingWhereInput
    orderBy?: ratingOrderByWithAggregationInput | ratingOrderByWithAggregationInput[]
    by: RatingScalarFieldEnum[] | RatingScalarFieldEnum
    having?: ratingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RatingCountAggregateInputType | true
    _avg?: RatingAvgAggregateInputType
    _sum?: RatingSumAggregateInputType
    _min?: RatingMinAggregateInputType
    _max?: RatingMaxAggregateInputType
  }

  export type RatingGroupByOutputType = {
    id: string
    userID: string | null
    productID: string | null
    rating: number | null
    createdAt: Date
    updatedAt: Date
    _count: RatingCountAggregateOutputType | null
    _avg: RatingAvgAggregateOutputType | null
    _sum: RatingSumAggregateOutputType | null
    _min: RatingMinAggregateOutputType | null
    _max: RatingMaxAggregateOutputType | null
  }

  type GetRatingGroupByPayload<T extends ratingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RatingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RatingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RatingGroupByOutputType[P]>
            : GetScalarType<T[P], RatingGroupByOutputType[P]>
        }
      >
    >


  export type ratingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userID?: boolean
    productID?: boolean
    rating?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | rating$productArgs<ExtArgs>
    user?: boolean | rating$userArgs<ExtArgs>
  }, ExtArgs["result"]["rating"]>

  export type ratingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userID?: boolean
    productID?: boolean
    rating?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | rating$productArgs<ExtArgs>
    user?: boolean | rating$userArgs<ExtArgs>
  }, ExtArgs["result"]["rating"]>

  export type ratingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userID?: boolean
    productID?: boolean
    rating?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | rating$productArgs<ExtArgs>
    user?: boolean | rating$userArgs<ExtArgs>
  }, ExtArgs["result"]["rating"]>

  export type ratingSelectScalar = {
    id?: boolean
    userID?: boolean
    productID?: boolean
    rating?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ratingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userID" | "productID" | "rating" | "createdAt" | "updatedAt", ExtArgs["result"]["rating"]>
  export type ratingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | rating$productArgs<ExtArgs>
    user?: boolean | rating$userArgs<ExtArgs>
  }
  export type ratingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | rating$productArgs<ExtArgs>
    user?: boolean | rating$userArgs<ExtArgs>
  }
  export type ratingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | rating$productArgs<ExtArgs>
    user?: boolean | rating$userArgs<ExtArgs>
  }

  export type $ratingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "rating"
    objects: {
      product: Prisma.$productPayload<ExtArgs> | null
      user: Prisma.$userPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userID: string | null
      productID: string | null
      rating: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["rating"]>
    composites: {}
  }

  type ratingGetPayload<S extends boolean | null | undefined | ratingDefaultArgs> = $Result.GetResult<Prisma.$ratingPayload, S>

  type ratingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ratingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RatingCountAggregateInputType | true
    }

  export interface ratingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['rating'], meta: { name: 'rating' } }
    /**
     * Find zero or one Rating that matches the filter.
     * @param {ratingFindUniqueArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ratingFindUniqueArgs>(args: SelectSubset<T, ratingFindUniqueArgs<ExtArgs>>): Prisma__ratingClient<$Result.GetResult<Prisma.$ratingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Rating that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ratingFindUniqueOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ratingFindUniqueOrThrowArgs>(args: SelectSubset<T, ratingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ratingClient<$Result.GetResult<Prisma.$ratingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Rating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ratingFindFirstArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ratingFindFirstArgs>(args?: SelectSubset<T, ratingFindFirstArgs<ExtArgs>>): Prisma__ratingClient<$Result.GetResult<Prisma.$ratingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Rating that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ratingFindFirstOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ratingFindFirstOrThrowArgs>(args?: SelectSubset<T, ratingFindFirstOrThrowArgs<ExtArgs>>): Prisma__ratingClient<$Result.GetResult<Prisma.$ratingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ratings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ratingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ratings
     * const ratings = await prisma.rating.findMany()
     * 
     * // Get first 10 Ratings
     * const ratings = await prisma.rating.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ratingWithIdOnly = await prisma.rating.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ratingFindManyArgs>(args?: SelectSubset<T, ratingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ratingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Rating.
     * @param {ratingCreateArgs} args - Arguments to create a Rating.
     * @example
     * // Create one Rating
     * const Rating = await prisma.rating.create({
     *   data: {
     *     // ... data to create a Rating
     *   }
     * })
     * 
     */
    create<T extends ratingCreateArgs>(args: SelectSubset<T, ratingCreateArgs<ExtArgs>>): Prisma__ratingClient<$Result.GetResult<Prisma.$ratingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ratings.
     * @param {ratingCreateManyArgs} args - Arguments to create many Ratings.
     * @example
     * // Create many Ratings
     * const rating = await prisma.rating.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ratingCreateManyArgs>(args?: SelectSubset<T, ratingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ratings and returns the data saved in the database.
     * @param {ratingCreateManyAndReturnArgs} args - Arguments to create many Ratings.
     * @example
     * // Create many Ratings
     * const rating = await prisma.rating.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ratings and only return the `id`
     * const ratingWithIdOnly = await prisma.rating.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ratingCreateManyAndReturnArgs>(args?: SelectSubset<T, ratingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ratingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Rating.
     * @param {ratingDeleteArgs} args - Arguments to delete one Rating.
     * @example
     * // Delete one Rating
     * const Rating = await prisma.rating.delete({
     *   where: {
     *     // ... filter to delete one Rating
     *   }
     * })
     * 
     */
    delete<T extends ratingDeleteArgs>(args: SelectSubset<T, ratingDeleteArgs<ExtArgs>>): Prisma__ratingClient<$Result.GetResult<Prisma.$ratingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Rating.
     * @param {ratingUpdateArgs} args - Arguments to update one Rating.
     * @example
     * // Update one Rating
     * const rating = await prisma.rating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ratingUpdateArgs>(args: SelectSubset<T, ratingUpdateArgs<ExtArgs>>): Prisma__ratingClient<$Result.GetResult<Prisma.$ratingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ratings.
     * @param {ratingDeleteManyArgs} args - Arguments to filter Ratings to delete.
     * @example
     * // Delete a few Ratings
     * const { count } = await prisma.rating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ratingDeleteManyArgs>(args?: SelectSubset<T, ratingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ratingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ratings
     * const rating = await prisma.rating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ratingUpdateManyArgs>(args: SelectSubset<T, ratingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ratings and returns the data updated in the database.
     * @param {ratingUpdateManyAndReturnArgs} args - Arguments to update many Ratings.
     * @example
     * // Update many Ratings
     * const rating = await prisma.rating.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Ratings and only return the `id`
     * const ratingWithIdOnly = await prisma.rating.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ratingUpdateManyAndReturnArgs>(args: SelectSubset<T, ratingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ratingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Rating.
     * @param {ratingUpsertArgs} args - Arguments to update or create a Rating.
     * @example
     * // Update or create a Rating
     * const rating = await prisma.rating.upsert({
     *   create: {
     *     // ... data to create a Rating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rating we want to update
     *   }
     * })
     */
    upsert<T extends ratingUpsertArgs>(args: SelectSubset<T, ratingUpsertArgs<ExtArgs>>): Prisma__ratingClient<$Result.GetResult<Prisma.$ratingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ratingCountArgs} args - Arguments to filter Ratings to count.
     * @example
     * // Count the number of Ratings
     * const count = await prisma.rating.count({
     *   where: {
     *     // ... the filter for the Ratings we want to count
     *   }
     * })
    **/
    count<T extends ratingCountArgs>(
      args?: Subset<T, ratingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RatingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RatingAggregateArgs>(args: Subset<T, RatingAggregateArgs>): Prisma.PrismaPromise<GetRatingAggregateType<T>>

    /**
     * Group by Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ratingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ratingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ratingGroupByArgs['orderBy'] }
        : { orderBy?: ratingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ratingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRatingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the rating model
   */
  readonly fields: ratingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for rating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ratingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends rating$productArgs<ExtArgs> = {}>(args?: Subset<T, rating$productArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends rating$userArgs<ExtArgs> = {}>(args?: Subset<T, rating$userArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the rating model
   */
  interface ratingFieldRefs {
    readonly id: FieldRef<"rating", 'String'>
    readonly userID: FieldRef<"rating", 'String'>
    readonly productID: FieldRef<"rating", 'String'>
    readonly rating: FieldRef<"rating", 'Int'>
    readonly createdAt: FieldRef<"rating", 'DateTime'>
    readonly updatedAt: FieldRef<"rating", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * rating findUnique
   */
  export type ratingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rating
     */
    select?: ratingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rating
     */
    omit?: ratingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ratingInclude<ExtArgs> | null
    /**
     * Filter, which rating to fetch.
     */
    where: ratingWhereUniqueInput
  }

  /**
   * rating findUniqueOrThrow
   */
  export type ratingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rating
     */
    select?: ratingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rating
     */
    omit?: ratingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ratingInclude<ExtArgs> | null
    /**
     * Filter, which rating to fetch.
     */
    where: ratingWhereUniqueInput
  }

  /**
   * rating findFirst
   */
  export type ratingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rating
     */
    select?: ratingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rating
     */
    omit?: ratingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ratingInclude<ExtArgs> | null
    /**
     * Filter, which rating to fetch.
     */
    where?: ratingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ratings to fetch.
     */
    orderBy?: ratingOrderByWithRelationInput | ratingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ratings.
     */
    cursor?: ratingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ratings.
     */
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * rating findFirstOrThrow
   */
  export type ratingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rating
     */
    select?: ratingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rating
     */
    omit?: ratingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ratingInclude<ExtArgs> | null
    /**
     * Filter, which rating to fetch.
     */
    where?: ratingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ratings to fetch.
     */
    orderBy?: ratingOrderByWithRelationInput | ratingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ratings.
     */
    cursor?: ratingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ratings.
     */
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * rating findMany
   */
  export type ratingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rating
     */
    select?: ratingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rating
     */
    omit?: ratingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ratingInclude<ExtArgs> | null
    /**
     * Filter, which ratings to fetch.
     */
    where?: ratingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ratings to fetch.
     */
    orderBy?: ratingOrderByWithRelationInput | ratingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ratings.
     */
    cursor?: ratingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ratings.
     */
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * rating create
   */
  export type ratingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rating
     */
    select?: ratingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rating
     */
    omit?: ratingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ratingInclude<ExtArgs> | null
    /**
     * The data needed to create a rating.
     */
    data: XOR<ratingCreateInput, ratingUncheckedCreateInput>
  }

  /**
   * rating createMany
   */
  export type ratingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ratings.
     */
    data: ratingCreateManyInput | ratingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * rating createManyAndReturn
   */
  export type ratingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rating
     */
    select?: ratingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the rating
     */
    omit?: ratingOmit<ExtArgs> | null
    /**
     * The data used to create many ratings.
     */
    data: ratingCreateManyInput | ratingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ratingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * rating update
   */
  export type ratingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rating
     */
    select?: ratingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rating
     */
    omit?: ratingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ratingInclude<ExtArgs> | null
    /**
     * The data needed to update a rating.
     */
    data: XOR<ratingUpdateInput, ratingUncheckedUpdateInput>
    /**
     * Choose, which rating to update.
     */
    where: ratingWhereUniqueInput
  }

  /**
   * rating updateMany
   */
  export type ratingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ratings.
     */
    data: XOR<ratingUpdateManyMutationInput, ratingUncheckedUpdateManyInput>
    /**
     * Filter which ratings to update
     */
    where?: ratingWhereInput
    /**
     * Limit how many ratings to update.
     */
    limit?: number
  }

  /**
   * rating updateManyAndReturn
   */
  export type ratingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rating
     */
    select?: ratingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the rating
     */
    omit?: ratingOmit<ExtArgs> | null
    /**
     * The data used to update ratings.
     */
    data: XOR<ratingUpdateManyMutationInput, ratingUncheckedUpdateManyInput>
    /**
     * Filter which ratings to update
     */
    where?: ratingWhereInput
    /**
     * Limit how many ratings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ratingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * rating upsert
   */
  export type ratingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rating
     */
    select?: ratingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rating
     */
    omit?: ratingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ratingInclude<ExtArgs> | null
    /**
     * The filter to search for the rating to update in case it exists.
     */
    where: ratingWhereUniqueInput
    /**
     * In case the rating found by the `where` argument doesn't exist, create a new rating with this data.
     */
    create: XOR<ratingCreateInput, ratingUncheckedCreateInput>
    /**
     * In case the rating was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ratingUpdateInput, ratingUncheckedUpdateInput>
  }

  /**
   * rating delete
   */
  export type ratingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rating
     */
    select?: ratingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rating
     */
    omit?: ratingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ratingInclude<ExtArgs> | null
    /**
     * Filter which rating to delete.
     */
    where: ratingWhereUniqueInput
  }

  /**
   * rating deleteMany
   */
  export type ratingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ratings to delete
     */
    where?: ratingWhereInput
    /**
     * Limit how many ratings to delete.
     */
    limit?: number
  }

  /**
   * rating.product
   */
  export type rating$productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    where?: productWhereInput
  }

  /**
   * rating.user
   */
  export type rating$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
  }

  /**
   * rating without action
   */
  export type ratingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rating
     */
    select?: ratingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rating
     */
    omit?: ratingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ratingInclude<ExtArgs> | null
  }


  /**
   * Model productImage
   */

  export type AggregateProductImage = {
    _count: ProductImageCountAggregateOutputType | null
    _min: ProductImageMinAggregateOutputType | null
    _max: ProductImageMaxAggregateOutputType | null
  }

  export type ProductImageMinAggregateOutputType = {
    id: string | null
    productImage: string | null
    imagePublicID: string | null
    productImageID: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductImageMaxAggregateOutputType = {
    id: string | null
    productImage: string | null
    imagePublicID: string | null
    productImageID: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductImageCountAggregateOutputType = {
    id: number
    productImage: number
    imagePublicID: number
    productImageID: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProductImageMinAggregateInputType = {
    id?: true
    productImage?: true
    imagePublicID?: true
    productImageID?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductImageMaxAggregateInputType = {
    id?: true
    productImage?: true
    imagePublicID?: true
    productImageID?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductImageCountAggregateInputType = {
    id?: true
    productImage?: true
    imagePublicID?: true
    productImageID?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProductImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which productImage to aggregate.
     */
    where?: productImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productImages to fetch.
     */
    orderBy?: productImageOrderByWithRelationInput | productImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned productImages
    **/
    _count?: true | ProductImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductImageMaxAggregateInputType
  }

  export type GetProductImageAggregateType<T extends ProductImageAggregateArgs> = {
        [P in keyof T & keyof AggregateProductImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductImage[P]>
      : GetScalarType<T[P], AggregateProductImage[P]>
  }




  export type productImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productImageWhereInput
    orderBy?: productImageOrderByWithAggregationInput | productImageOrderByWithAggregationInput[]
    by: ProductImageScalarFieldEnum[] | ProductImageScalarFieldEnum
    having?: productImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductImageCountAggregateInputType | true
    _min?: ProductImageMinAggregateInputType
    _max?: ProductImageMaxAggregateInputType
  }

  export type ProductImageGroupByOutputType = {
    id: string
    productImage: string | null
    imagePublicID: string | null
    productImageID: string | null
    createdAt: Date
    updatedAt: Date
    _count: ProductImageCountAggregateOutputType | null
    _min: ProductImageMinAggregateOutputType | null
    _max: ProductImageMaxAggregateOutputType | null
  }

  type GetProductImageGroupByPayload<T extends productImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductImageGroupByOutputType[P]>
            : GetScalarType<T[P], ProductImageGroupByOutputType[P]>
        }
      >
    >


  export type productImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productImage?: boolean
    imagePublicID?: boolean
    productImageID?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | productImage$productArgs<ExtArgs>
    _count?: boolean | ProductImageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productImage"]>

  export type productImageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productImage?: boolean
    imagePublicID?: boolean
    productImageID?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["productImage"]>

  export type productImageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productImage?: boolean
    imagePublicID?: boolean
    productImageID?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["productImage"]>

  export type productImageSelectScalar = {
    id?: boolean
    productImage?: boolean
    imagePublicID?: boolean
    productImageID?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type productImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productImage" | "imagePublicID" | "productImageID" | "createdAt" | "updatedAt", ExtArgs["result"]["productImage"]>
  export type productImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | productImage$productArgs<ExtArgs>
    _count?: boolean | ProductImageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type productImageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type productImageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $productImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "productImage"
    objects: {
      product: Prisma.$productPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productImage: string | null
      imagePublicID: string | null
      productImageID: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["productImage"]>
    composites: {}
  }

  type productImageGetPayload<S extends boolean | null | undefined | productImageDefaultArgs> = $Result.GetResult<Prisma.$productImagePayload, S>

  type productImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<productImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductImageCountAggregateInputType | true
    }

  export interface productImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['productImage'], meta: { name: 'productImage' } }
    /**
     * Find zero or one ProductImage that matches the filter.
     * @param {productImageFindUniqueArgs} args - Arguments to find a ProductImage
     * @example
     * // Get one ProductImage
     * const productImage = await prisma.productImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends productImageFindUniqueArgs>(args: SelectSubset<T, productImageFindUniqueArgs<ExtArgs>>): Prisma__productImageClient<$Result.GetResult<Prisma.$productImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductImage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {productImageFindUniqueOrThrowArgs} args - Arguments to find a ProductImage
     * @example
     * // Get one ProductImage
     * const productImage = await prisma.productImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends productImageFindUniqueOrThrowArgs>(args: SelectSubset<T, productImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__productImageClient<$Result.GetResult<Prisma.$productImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productImageFindFirstArgs} args - Arguments to find a ProductImage
     * @example
     * // Get one ProductImage
     * const productImage = await prisma.productImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends productImageFindFirstArgs>(args?: SelectSubset<T, productImageFindFirstArgs<ExtArgs>>): Prisma__productImageClient<$Result.GetResult<Prisma.$productImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productImageFindFirstOrThrowArgs} args - Arguments to find a ProductImage
     * @example
     * // Get one ProductImage
     * const productImage = await prisma.productImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends productImageFindFirstOrThrowArgs>(args?: SelectSubset<T, productImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__productImageClient<$Result.GetResult<Prisma.$productImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductImages
     * const productImages = await prisma.productImage.findMany()
     * 
     * // Get first 10 ProductImages
     * const productImages = await prisma.productImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productImageWithIdOnly = await prisma.productImage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends productImageFindManyArgs>(args?: SelectSubset<T, productImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductImage.
     * @param {productImageCreateArgs} args - Arguments to create a ProductImage.
     * @example
     * // Create one ProductImage
     * const ProductImage = await prisma.productImage.create({
     *   data: {
     *     // ... data to create a ProductImage
     *   }
     * })
     * 
     */
    create<T extends productImageCreateArgs>(args: SelectSubset<T, productImageCreateArgs<ExtArgs>>): Prisma__productImageClient<$Result.GetResult<Prisma.$productImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductImages.
     * @param {productImageCreateManyArgs} args - Arguments to create many ProductImages.
     * @example
     * // Create many ProductImages
     * const productImage = await prisma.productImage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends productImageCreateManyArgs>(args?: SelectSubset<T, productImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductImages and returns the data saved in the database.
     * @param {productImageCreateManyAndReturnArgs} args - Arguments to create many ProductImages.
     * @example
     * // Create many ProductImages
     * const productImage = await prisma.productImage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductImages and only return the `id`
     * const productImageWithIdOnly = await prisma.productImage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends productImageCreateManyAndReturnArgs>(args?: SelectSubset<T, productImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productImagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProductImage.
     * @param {productImageDeleteArgs} args - Arguments to delete one ProductImage.
     * @example
     * // Delete one ProductImage
     * const ProductImage = await prisma.productImage.delete({
     *   where: {
     *     // ... filter to delete one ProductImage
     *   }
     * })
     * 
     */
    delete<T extends productImageDeleteArgs>(args: SelectSubset<T, productImageDeleteArgs<ExtArgs>>): Prisma__productImageClient<$Result.GetResult<Prisma.$productImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductImage.
     * @param {productImageUpdateArgs} args - Arguments to update one ProductImage.
     * @example
     * // Update one ProductImage
     * const productImage = await prisma.productImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends productImageUpdateArgs>(args: SelectSubset<T, productImageUpdateArgs<ExtArgs>>): Prisma__productImageClient<$Result.GetResult<Prisma.$productImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductImages.
     * @param {productImageDeleteManyArgs} args - Arguments to filter ProductImages to delete.
     * @example
     * // Delete a few ProductImages
     * const { count } = await prisma.productImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends productImageDeleteManyArgs>(args?: SelectSubset<T, productImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductImages
     * const productImage = await prisma.productImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends productImageUpdateManyArgs>(args: SelectSubset<T, productImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductImages and returns the data updated in the database.
     * @param {productImageUpdateManyAndReturnArgs} args - Arguments to update many ProductImages.
     * @example
     * // Update many ProductImages
     * const productImage = await prisma.productImage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProductImages and only return the `id`
     * const productImageWithIdOnly = await prisma.productImage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends productImageUpdateManyAndReturnArgs>(args: SelectSubset<T, productImageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productImagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProductImage.
     * @param {productImageUpsertArgs} args - Arguments to update or create a ProductImage.
     * @example
     * // Update or create a ProductImage
     * const productImage = await prisma.productImage.upsert({
     *   create: {
     *     // ... data to create a ProductImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductImage we want to update
     *   }
     * })
     */
    upsert<T extends productImageUpsertArgs>(args: SelectSubset<T, productImageUpsertArgs<ExtArgs>>): Prisma__productImageClient<$Result.GetResult<Prisma.$productImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProductImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productImageCountArgs} args - Arguments to filter ProductImages to count.
     * @example
     * // Count the number of ProductImages
     * const count = await prisma.productImage.count({
     *   where: {
     *     // ... the filter for the ProductImages we want to count
     *   }
     * })
    **/
    count<T extends productImageCountArgs>(
      args?: Subset<T, productImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductImageAggregateArgs>(args: Subset<T, ProductImageAggregateArgs>): Prisma.PrismaPromise<GetProductImageAggregateType<T>>

    /**
     * Group by ProductImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productImageGroupByArgs['orderBy'] }
        : { orderBy?: productImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the productImage model
   */
  readonly fields: productImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for productImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__productImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends productImage$productArgs<ExtArgs> = {}>(args?: Subset<T, productImage$productArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the productImage model
   */
  interface productImageFieldRefs {
    readonly id: FieldRef<"productImage", 'String'>
    readonly productImage: FieldRef<"productImage", 'String'>
    readonly imagePublicID: FieldRef<"productImage", 'String'>
    readonly productImageID: FieldRef<"productImage", 'String'>
    readonly createdAt: FieldRef<"productImage", 'DateTime'>
    readonly updatedAt: FieldRef<"productImage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * productImage findUnique
   */
  export type productImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productImage
     */
    select?: productImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productImage
     */
    omit?: productImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productImageInclude<ExtArgs> | null
    /**
     * Filter, which productImage to fetch.
     */
    where: productImageWhereUniqueInput
  }

  /**
   * productImage findUniqueOrThrow
   */
  export type productImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productImage
     */
    select?: productImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productImage
     */
    omit?: productImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productImageInclude<ExtArgs> | null
    /**
     * Filter, which productImage to fetch.
     */
    where: productImageWhereUniqueInput
  }

  /**
   * productImage findFirst
   */
  export type productImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productImage
     */
    select?: productImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productImage
     */
    omit?: productImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productImageInclude<ExtArgs> | null
    /**
     * Filter, which productImage to fetch.
     */
    where?: productImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productImages to fetch.
     */
    orderBy?: productImageOrderByWithRelationInput | productImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productImages.
     */
    cursor?: productImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productImages.
     */
    distinct?: ProductImageScalarFieldEnum | ProductImageScalarFieldEnum[]
  }

  /**
   * productImage findFirstOrThrow
   */
  export type productImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productImage
     */
    select?: productImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productImage
     */
    omit?: productImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productImageInclude<ExtArgs> | null
    /**
     * Filter, which productImage to fetch.
     */
    where?: productImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productImages to fetch.
     */
    orderBy?: productImageOrderByWithRelationInput | productImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productImages.
     */
    cursor?: productImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productImages.
     */
    distinct?: ProductImageScalarFieldEnum | ProductImageScalarFieldEnum[]
  }

  /**
   * productImage findMany
   */
  export type productImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productImage
     */
    select?: productImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productImage
     */
    omit?: productImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productImageInclude<ExtArgs> | null
    /**
     * Filter, which productImages to fetch.
     */
    where?: productImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productImages to fetch.
     */
    orderBy?: productImageOrderByWithRelationInput | productImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing productImages.
     */
    cursor?: productImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productImages.
     */
    skip?: number
    distinct?: ProductImageScalarFieldEnum | ProductImageScalarFieldEnum[]
  }

  /**
   * productImage create
   */
  export type productImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productImage
     */
    select?: productImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productImage
     */
    omit?: productImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productImageInclude<ExtArgs> | null
    /**
     * The data needed to create a productImage.
     */
    data: XOR<productImageCreateInput, productImageUncheckedCreateInput>
  }

  /**
   * productImage createMany
   */
  export type productImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many productImages.
     */
    data: productImageCreateManyInput | productImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * productImage createManyAndReturn
   */
  export type productImageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productImage
     */
    select?: productImageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the productImage
     */
    omit?: productImageOmit<ExtArgs> | null
    /**
     * The data used to create many productImages.
     */
    data: productImageCreateManyInput | productImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * productImage update
   */
  export type productImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productImage
     */
    select?: productImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productImage
     */
    omit?: productImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productImageInclude<ExtArgs> | null
    /**
     * The data needed to update a productImage.
     */
    data: XOR<productImageUpdateInput, productImageUncheckedUpdateInput>
    /**
     * Choose, which productImage to update.
     */
    where: productImageWhereUniqueInput
  }

  /**
   * productImage updateMany
   */
  export type productImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update productImages.
     */
    data: XOR<productImageUpdateManyMutationInput, productImageUncheckedUpdateManyInput>
    /**
     * Filter which productImages to update
     */
    where?: productImageWhereInput
    /**
     * Limit how many productImages to update.
     */
    limit?: number
  }

  /**
   * productImage updateManyAndReturn
   */
  export type productImageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productImage
     */
    select?: productImageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the productImage
     */
    omit?: productImageOmit<ExtArgs> | null
    /**
     * The data used to update productImages.
     */
    data: XOR<productImageUpdateManyMutationInput, productImageUncheckedUpdateManyInput>
    /**
     * Filter which productImages to update
     */
    where?: productImageWhereInput
    /**
     * Limit how many productImages to update.
     */
    limit?: number
  }

  /**
   * productImage upsert
   */
  export type productImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productImage
     */
    select?: productImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productImage
     */
    omit?: productImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productImageInclude<ExtArgs> | null
    /**
     * The filter to search for the productImage to update in case it exists.
     */
    where: productImageWhereUniqueInput
    /**
     * In case the productImage found by the `where` argument doesn't exist, create a new productImage with this data.
     */
    create: XOR<productImageCreateInput, productImageUncheckedCreateInput>
    /**
     * In case the productImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productImageUpdateInput, productImageUncheckedUpdateInput>
  }

  /**
   * productImage delete
   */
  export type productImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productImage
     */
    select?: productImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productImage
     */
    omit?: productImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productImageInclude<ExtArgs> | null
    /**
     * Filter which productImage to delete.
     */
    where: productImageWhereUniqueInput
  }

  /**
   * productImage deleteMany
   */
  export type productImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which productImages to delete
     */
    where?: productImageWhereInput
    /**
     * Limit how many productImages to delete.
     */
    limit?: number
  }

  /**
   * productImage.product
   */
  export type productImage$productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    where?: productWhereInput
    orderBy?: productOrderByWithRelationInput | productOrderByWithRelationInput[]
    cursor?: productWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * productImage without action
   */
  export type productImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productImage
     */
    select?: productImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the productImage
     */
    omit?: productImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productImageInclude<ExtArgs> | null
  }


  /**
   * Model payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    amount: Decimal | null
  }

  export type PaymentSumAggregateOutputType = {
    amount: Decimal | null
  }

  export type PaymentMinAggregateOutputType = {
    id: string | null
    userID: string | null
    storeID: string | null
    amount: Decimal | null
    paymentMethod: string | null
    paymentStatus: string | null
    type: string | null
    createdAt: Date | null
    updatedAt: Date | null
    orderId: string | null
    paymentRef: string | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: string | null
    userID: string | null
    storeID: string | null
    amount: Decimal | null
    paymentMethod: string | null
    paymentStatus: string | null
    type: string | null
    createdAt: Date | null
    updatedAt: Date | null
    orderId: string | null
    paymentRef: string | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    userID: number
    storeID: number
    amount: number
    paymentMethod: number
    paymentStatus: number
    type: number
    createdAt: number
    updatedAt: number
    orderId: number
    paymentRef: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    amount?: true
  }

  export type PaymentSumAggregateInputType = {
    amount?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    userID?: true
    storeID?: true
    amount?: true
    paymentMethod?: true
    paymentStatus?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    orderId?: true
    paymentRef?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    userID?: true
    storeID?: true
    amount?: true
    paymentMethod?: true
    paymentStatus?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    orderId?: true
    paymentRef?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    userID?: true
    storeID?: true
    amount?: true
    paymentMethod?: true
    paymentStatus?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    orderId?: true
    paymentRef?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payment to aggregate.
     */
    where?: paymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentOrderByWithRelationInput | paymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: paymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type paymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: paymentWhereInput
    orderBy?: paymentOrderByWithAggregationInput | paymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: paymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: string
    userID: string | null
    storeID: string | null
    amount: Decimal
    paymentMethod: string | null
    paymentStatus: string | null
    type: string | null
    createdAt: Date
    updatedAt: Date
    orderId: string | null
    paymentRef: string | null
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends paymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type paymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userID?: boolean
    storeID?: boolean
    amount?: boolean
    paymentMethod?: boolean
    paymentStatus?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    orderId?: boolean
    paymentRef?: boolean
    order?: boolean | payment$orderArgs<ExtArgs>
    store?: boolean | payment$storeArgs<ExtArgs>
    user?: boolean | payment$userArgs<ExtArgs>
    subscription?: boolean | payment$subscriptionArgs<ExtArgs>
    _count?: boolean | PaymentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type paymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userID?: boolean
    storeID?: boolean
    amount?: boolean
    paymentMethod?: boolean
    paymentStatus?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    orderId?: boolean
    paymentRef?: boolean
    order?: boolean | payment$orderArgs<ExtArgs>
    store?: boolean | payment$storeArgs<ExtArgs>
    user?: boolean | payment$userArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type paymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userID?: boolean
    storeID?: boolean
    amount?: boolean
    paymentMethod?: boolean
    paymentStatus?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    orderId?: boolean
    paymentRef?: boolean
    order?: boolean | payment$orderArgs<ExtArgs>
    store?: boolean | payment$storeArgs<ExtArgs>
    user?: boolean | payment$userArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type paymentSelectScalar = {
    id?: boolean
    userID?: boolean
    storeID?: boolean
    amount?: boolean
    paymentMethod?: boolean
    paymentStatus?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    orderId?: boolean
    paymentRef?: boolean
  }

  export type paymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userID" | "storeID" | "amount" | "paymentMethod" | "paymentStatus" | "type" | "createdAt" | "updatedAt" | "orderId" | "paymentRef", ExtArgs["result"]["payment"]>
  export type paymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | payment$orderArgs<ExtArgs>
    store?: boolean | payment$storeArgs<ExtArgs>
    user?: boolean | payment$userArgs<ExtArgs>
    subscription?: boolean | payment$subscriptionArgs<ExtArgs>
    _count?: boolean | PaymentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type paymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | payment$orderArgs<ExtArgs>
    store?: boolean | payment$storeArgs<ExtArgs>
    user?: boolean | payment$userArgs<ExtArgs>
  }
  export type paymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | payment$orderArgs<ExtArgs>
    store?: boolean | payment$storeArgs<ExtArgs>
    user?: boolean | payment$userArgs<ExtArgs>
  }

  export type $paymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "payment"
    objects: {
      order: Prisma.$orderPayload<ExtArgs> | null
      store: Prisma.$storePayload<ExtArgs> | null
      user: Prisma.$userPayload<ExtArgs> | null
      subscription: Prisma.$subscriptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userID: string | null
      storeID: string | null
      amount: Prisma.Decimal
      paymentMethod: string | null
      paymentStatus: string | null
      type: string | null
      createdAt: Date
      updatedAt: Date
      orderId: string | null
      paymentRef: string | null
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type paymentGetPayload<S extends boolean | null | undefined | paymentDefaultArgs> = $Result.GetResult<Prisma.$paymentPayload, S>

  type paymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<paymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface paymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['payment'], meta: { name: 'payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {paymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends paymentFindUniqueArgs>(args: SelectSubset<T, paymentFindUniqueArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {paymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends paymentFindUniqueOrThrowArgs>(args: SelectSubset<T, paymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends paymentFindFirstArgs>(args?: SelectSubset<T, paymentFindFirstArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends paymentFindFirstOrThrowArgs>(args?: SelectSubset<T, paymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends paymentFindManyArgs>(args?: SelectSubset<T, paymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Payment.
     * @param {paymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends paymentCreateArgs>(args: SelectSubset<T, paymentCreateArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Payments.
     * @param {paymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends paymentCreateManyArgs>(args?: SelectSubset<T, paymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payments and returns the data saved in the database.
     * @param {paymentCreateManyAndReturnArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends paymentCreateManyAndReturnArgs>(args?: SelectSubset<T, paymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Payment.
     * @param {paymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends paymentDeleteArgs>(args: SelectSubset<T, paymentDeleteArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Payment.
     * @param {paymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends paymentUpdateArgs>(args: SelectSubset<T, paymentUpdateArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Payments.
     * @param {paymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends paymentDeleteManyArgs>(args?: SelectSubset<T, paymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends paymentUpdateManyArgs>(args: SelectSubset<T, paymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments and returns the data updated in the database.
     * @param {paymentUpdateManyAndReturnArgs} args - Arguments to update many Payments.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends paymentUpdateManyAndReturnArgs>(args: SelectSubset<T, paymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Payment.
     * @param {paymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends paymentUpsertArgs>(args: SelectSubset<T, paymentUpsertArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends paymentCountArgs>(
      args?: Subset<T, paymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends paymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: paymentGroupByArgs['orderBy'] }
        : { orderBy?: paymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, paymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the payment model
   */
  readonly fields: paymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__paymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends payment$orderArgs<ExtArgs> = {}>(args?: Subset<T, payment$orderArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    store<T extends payment$storeArgs<ExtArgs> = {}>(args?: Subset<T, payment$storeArgs<ExtArgs>>): Prisma__storeClient<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends payment$userArgs<ExtArgs> = {}>(args?: Subset<T, payment$userArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    subscription<T extends payment$subscriptionArgs<ExtArgs> = {}>(args?: Subset<T, payment$subscriptionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$subscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the payment model
   */
  interface paymentFieldRefs {
    readonly id: FieldRef<"payment", 'String'>
    readonly userID: FieldRef<"payment", 'String'>
    readonly storeID: FieldRef<"payment", 'String'>
    readonly amount: FieldRef<"payment", 'Decimal'>
    readonly paymentMethod: FieldRef<"payment", 'String'>
    readonly paymentStatus: FieldRef<"payment", 'String'>
    readonly type: FieldRef<"payment", 'String'>
    readonly createdAt: FieldRef<"payment", 'DateTime'>
    readonly updatedAt: FieldRef<"payment", 'DateTime'>
    readonly orderId: FieldRef<"payment", 'String'>
    readonly paymentRef: FieldRef<"payment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * payment findUnique
   */
  export type paymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * Filter, which payment to fetch.
     */
    where: paymentWhereUniqueInput
  }

  /**
   * payment findUniqueOrThrow
   */
  export type paymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * Filter, which payment to fetch.
     */
    where: paymentWhereUniqueInput
  }

  /**
   * payment findFirst
   */
  export type paymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * Filter, which payment to fetch.
     */
    where?: paymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentOrderByWithRelationInput | paymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payments.
     */
    cursor?: paymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * payment findFirstOrThrow
   */
  export type paymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * Filter, which payment to fetch.
     */
    where?: paymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentOrderByWithRelationInput | paymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payments.
     */
    cursor?: paymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * payment findMany
   */
  export type paymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * Filter, which payments to fetch.
     */
    where?: paymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentOrderByWithRelationInput | paymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing payments.
     */
    cursor?: paymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * payment create
   */
  export type paymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * The data needed to create a payment.
     */
    data: XOR<paymentCreateInput, paymentUncheckedCreateInput>
  }

  /**
   * payment createMany
   */
  export type paymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many payments.
     */
    data: paymentCreateManyInput | paymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * payment createManyAndReturn
   */
  export type paymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * The data used to create many payments.
     */
    data: paymentCreateManyInput | paymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * payment update
   */
  export type paymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * The data needed to update a payment.
     */
    data: XOR<paymentUpdateInput, paymentUncheckedUpdateInput>
    /**
     * Choose, which payment to update.
     */
    where: paymentWhereUniqueInput
  }

  /**
   * payment updateMany
   */
  export type paymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update payments.
     */
    data: XOR<paymentUpdateManyMutationInput, paymentUncheckedUpdateManyInput>
    /**
     * Filter which payments to update
     */
    where?: paymentWhereInput
    /**
     * Limit how many payments to update.
     */
    limit?: number
  }

  /**
   * payment updateManyAndReturn
   */
  export type paymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * The data used to update payments.
     */
    data: XOR<paymentUpdateManyMutationInput, paymentUncheckedUpdateManyInput>
    /**
     * Filter which payments to update
     */
    where?: paymentWhereInput
    /**
     * Limit how many payments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * payment upsert
   */
  export type paymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * The filter to search for the payment to update in case it exists.
     */
    where: paymentWhereUniqueInput
    /**
     * In case the payment found by the `where` argument doesn't exist, create a new payment with this data.
     */
    create: XOR<paymentCreateInput, paymentUncheckedCreateInput>
    /**
     * In case the payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<paymentUpdateInput, paymentUncheckedUpdateInput>
  }

  /**
   * payment delete
   */
  export type paymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * Filter which payment to delete.
     */
    where: paymentWhereUniqueInput
  }

  /**
   * payment deleteMany
   */
  export type paymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payments to delete
     */
    where?: paymentWhereInput
    /**
     * Limit how many payments to delete.
     */
    limit?: number
  }

  /**
   * payment.order
   */
  export type payment$orderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order
     */
    omit?: orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    where?: orderWhereInput
  }

  /**
   * payment.store
   */
  export type payment$storeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeInclude<ExtArgs> | null
    where?: storeWhereInput
  }

  /**
   * payment.user
   */
  export type payment$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
  }

  /**
   * payment.subscription
   */
  export type payment$subscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subscription
     */
    select?: subscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subscription
     */
    omit?: subscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subscriptionInclude<ExtArgs> | null
    where?: subscriptionWhereInput
    orderBy?: subscriptionOrderByWithRelationInput | subscriptionOrderByWithRelationInput[]
    cursor?: subscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * payment without action
   */
  export type paymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
  }


  /**
   * Model order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    amount: Decimal | null
  }

  export type OrderSumAggregateOutputType = {
    amount: Decimal | null
  }

  export type OrderMinAggregateOutputType = {
    id: string | null
    userID: string | null
    storeID: string | null
    shippingAddress: string | null
    amount: Decimal | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderMaxAggregateOutputType = {
    id: string | null
    userID: string | null
    storeID: string | null
    shippingAddress: string | null
    amount: Decimal | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    userID: number
    storeID: number
    shippingAddress: number
    amount: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    amount?: true
  }

  export type OrderSumAggregateInputType = {
    amount?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    userID?: true
    storeID?: true
    shippingAddress?: true
    amount?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    userID?: true
    storeID?: true
    shippingAddress?: true
    amount?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    userID?: true
    storeID?: true
    shippingAddress?: true
    amount?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which order to aggregate.
     */
    where?: orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: orderOrderByWithRelationInput | orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type orderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderWhereInput
    orderBy?: orderOrderByWithAggregationInput | orderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: orderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: string
    userID: string | null
    storeID: string | null
    shippingAddress: string | null
    amount: Decimal
    status: string | null
    createdAt: Date
    updatedAt: Date
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends orderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type orderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userID?: boolean
    storeID?: boolean
    shippingAddress?: boolean
    amount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    store?: boolean | order$storeArgs<ExtArgs>
    user?: boolean | order$userArgs<ExtArgs>
    orderProducts?: boolean | order$orderProductsArgs<ExtArgs>
    payment?: boolean | order$paymentArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type orderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userID?: boolean
    storeID?: boolean
    shippingAddress?: boolean
    amount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    store?: boolean | order$storeArgs<ExtArgs>
    user?: boolean | order$userArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type orderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userID?: boolean
    storeID?: boolean
    shippingAddress?: boolean
    amount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    store?: boolean | order$storeArgs<ExtArgs>
    user?: boolean | order$userArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type orderSelectScalar = {
    id?: boolean
    userID?: boolean
    storeID?: boolean
    shippingAddress?: boolean
    amount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type orderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userID" | "storeID" | "shippingAddress" | "amount" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["order"]>
  export type orderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    store?: boolean | order$storeArgs<ExtArgs>
    user?: boolean | order$userArgs<ExtArgs>
    orderProducts?: boolean | order$orderProductsArgs<ExtArgs>
    payment?: boolean | order$paymentArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type orderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    store?: boolean | order$storeArgs<ExtArgs>
    user?: boolean | order$userArgs<ExtArgs>
  }
  export type orderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    store?: boolean | order$storeArgs<ExtArgs>
    user?: boolean | order$userArgs<ExtArgs>
  }

  export type $orderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "order"
    objects: {
      store: Prisma.$storePayload<ExtArgs> | null
      user: Prisma.$userPayload<ExtArgs> | null
      orderProducts: Prisma.$orderProductsPayload<ExtArgs>[]
      payment: Prisma.$paymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userID: string | null
      storeID: string | null
      shippingAddress: string | null
      amount: Prisma.Decimal
      status: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type orderGetPayload<S extends boolean | null | undefined | orderDefaultArgs> = $Result.GetResult<Prisma.$orderPayload, S>

  type orderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<orderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface orderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['order'], meta: { name: 'order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {orderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends orderFindUniqueArgs>(args: SelectSubset<T, orderFindUniqueArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {orderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends orderFindUniqueOrThrowArgs>(args: SelectSubset<T, orderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends orderFindFirstArgs>(args?: SelectSubset<T, orderFindFirstArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends orderFindFirstOrThrowArgs>(args?: SelectSubset<T, orderFindFirstOrThrowArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends orderFindManyArgs>(args?: SelectSubset<T, orderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Order.
     * @param {orderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends orderCreateArgs>(args: SelectSubset<T, orderCreateArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Orders.
     * @param {orderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends orderCreateManyArgs>(args?: SelectSubset<T, orderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Orders and returns the data saved in the database.
     * @param {orderCreateManyAndReturnArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends orderCreateManyAndReturnArgs>(args?: SelectSubset<T, orderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Order.
     * @param {orderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends orderDeleteArgs>(args: SelectSubset<T, orderDeleteArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Order.
     * @param {orderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends orderUpdateArgs>(args: SelectSubset<T, orderUpdateArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Orders.
     * @param {orderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends orderDeleteManyArgs>(args?: SelectSubset<T, orderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends orderUpdateManyArgs>(args: SelectSubset<T, orderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders and returns the data updated in the database.
     * @param {orderUpdateManyAndReturnArgs} args - Arguments to update many Orders.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends orderUpdateManyAndReturnArgs>(args: SelectSubset<T, orderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Order.
     * @param {orderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends orderUpsertArgs>(args: SelectSubset<T, orderUpsertArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends orderCountArgs>(
      args?: Subset<T, orderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends orderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: orderGroupByArgs['orderBy'] }
        : { orderBy?: orderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, orderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the order model
   */
  readonly fields: orderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__orderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    store<T extends order$storeArgs<ExtArgs> = {}>(args?: Subset<T, order$storeArgs<ExtArgs>>): Prisma__storeClient<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends order$userArgs<ExtArgs> = {}>(args?: Subset<T, order$userArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    orderProducts<T extends order$orderProductsArgs<ExtArgs> = {}>(args?: Subset<T, order$orderProductsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderProductsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payment<T extends order$paymentArgs<ExtArgs> = {}>(args?: Subset<T, order$paymentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the order model
   */
  interface orderFieldRefs {
    readonly id: FieldRef<"order", 'String'>
    readonly userID: FieldRef<"order", 'String'>
    readonly storeID: FieldRef<"order", 'String'>
    readonly shippingAddress: FieldRef<"order", 'String'>
    readonly amount: FieldRef<"order", 'Decimal'>
    readonly status: FieldRef<"order", 'String'>
    readonly createdAt: FieldRef<"order", 'DateTime'>
    readonly updatedAt: FieldRef<"order", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * order findUnique
   */
  export type orderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order
     */
    omit?: orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    /**
     * Filter, which order to fetch.
     */
    where: orderWhereUniqueInput
  }

  /**
   * order findUniqueOrThrow
   */
  export type orderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order
     */
    omit?: orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    /**
     * Filter, which order to fetch.
     */
    where: orderWhereUniqueInput
  }

  /**
   * order findFirst
   */
  export type orderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order
     */
    omit?: orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    /**
     * Filter, which order to fetch.
     */
    where?: orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: orderOrderByWithRelationInput | orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * order findFirstOrThrow
   */
  export type orderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order
     */
    omit?: orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    /**
     * Filter, which order to fetch.
     */
    where?: orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: orderOrderByWithRelationInput | orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * order findMany
   */
  export type orderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order
     */
    omit?: orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: orderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: orderOrderByWithRelationInput | orderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orders.
     */
    cursor?: orderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * order create
   */
  export type orderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order
     */
    omit?: orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    /**
     * The data needed to create a order.
     */
    data: XOR<orderCreateInput, orderUncheckedCreateInput>
  }

  /**
   * order createMany
   */
  export type orderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many orders.
     */
    data: orderCreateManyInput | orderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * order createManyAndReturn
   */
  export type orderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the order
     */
    omit?: orderOmit<ExtArgs> | null
    /**
     * The data used to create many orders.
     */
    data: orderCreateManyInput | orderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * order update
   */
  export type orderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order
     */
    omit?: orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    /**
     * The data needed to update a order.
     */
    data: XOR<orderUpdateInput, orderUncheckedUpdateInput>
    /**
     * Choose, which order to update.
     */
    where: orderWhereUniqueInput
  }

  /**
   * order updateMany
   */
  export type orderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update orders.
     */
    data: XOR<orderUpdateManyMutationInput, orderUncheckedUpdateManyInput>
    /**
     * Filter which orders to update
     */
    where?: orderWhereInput
    /**
     * Limit how many orders to update.
     */
    limit?: number
  }

  /**
   * order updateManyAndReturn
   */
  export type orderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the order
     */
    omit?: orderOmit<ExtArgs> | null
    /**
     * The data used to update orders.
     */
    data: XOR<orderUpdateManyMutationInput, orderUncheckedUpdateManyInput>
    /**
     * Filter which orders to update
     */
    where?: orderWhereInput
    /**
     * Limit how many orders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * order upsert
   */
  export type orderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order
     */
    omit?: orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    /**
     * The filter to search for the order to update in case it exists.
     */
    where: orderWhereUniqueInput
    /**
     * In case the order found by the `where` argument doesn't exist, create a new order with this data.
     */
    create: XOR<orderCreateInput, orderUncheckedCreateInput>
    /**
     * In case the order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<orderUpdateInput, orderUncheckedUpdateInput>
  }

  /**
   * order delete
   */
  export type orderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order
     */
    omit?: orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    /**
     * Filter which order to delete.
     */
    where: orderWhereUniqueInput
  }

  /**
   * order deleteMany
   */
  export type orderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orders to delete
     */
    where?: orderWhereInput
    /**
     * Limit how many orders to delete.
     */
    limit?: number
  }

  /**
   * order.store
   */
  export type order$storeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeInclude<ExtArgs> | null
    where?: storeWhereInput
  }

  /**
   * order.user
   */
  export type order$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
  }

  /**
   * order.orderProducts
   */
  export type order$orderProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProducts
     */
    select?: orderProductsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderProducts
     */
    omit?: orderProductsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductsInclude<ExtArgs> | null
    where?: orderProductsWhereInput
    orderBy?: orderProductsOrderByWithRelationInput | orderProductsOrderByWithRelationInput[]
    cursor?: orderProductsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderProductsScalarFieldEnum | OrderProductsScalarFieldEnum[]
  }

  /**
   * order.payment
   */
  export type order$paymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    where?: paymentWhereInput
    orderBy?: paymentOrderByWithRelationInput | paymentOrderByWithRelationInput[]
    cursor?: paymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * order without action
   */
  export type orderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order
     */
    omit?: orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
  }


  /**
   * Model orderProducts
   */

  export type AggregateOrderProducts = {
    _count: OrderProductsCountAggregateOutputType | null
    _min: OrderProductsMinAggregateOutputType | null
    _max: OrderProductsMaxAggregateOutputType | null
  }

  export type OrderProductsMinAggregateOutputType = {
    id: string | null
    orderID: string | null
    productID: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderProductsMaxAggregateOutputType = {
    id: string | null
    orderID: string | null
    productID: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrderProductsCountAggregateOutputType = {
    id: number
    orderID: number
    productID: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrderProductsMinAggregateInputType = {
    id?: true
    orderID?: true
    productID?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderProductsMaxAggregateInputType = {
    id?: true
    orderID?: true
    productID?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrderProductsCountAggregateInputType = {
    id?: true
    orderID?: true
    productID?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrderProductsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orderProducts to aggregate.
     */
    where?: orderProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderProducts to fetch.
     */
    orderBy?: orderProductsOrderByWithRelationInput | orderProductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: orderProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orderProducts
    **/
    _count?: true | OrderProductsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderProductsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderProductsMaxAggregateInputType
  }

  export type GetOrderProductsAggregateType<T extends OrderProductsAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderProducts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderProducts[P]>
      : GetScalarType<T[P], AggregateOrderProducts[P]>
  }




  export type orderProductsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: orderProductsWhereInput
    orderBy?: orderProductsOrderByWithAggregationInput | orderProductsOrderByWithAggregationInput[]
    by: OrderProductsScalarFieldEnum[] | OrderProductsScalarFieldEnum
    having?: orderProductsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderProductsCountAggregateInputType | true
    _min?: OrderProductsMinAggregateInputType
    _max?: OrderProductsMaxAggregateInputType
  }

  export type OrderProductsGroupByOutputType = {
    id: string
    orderID: string | null
    productID: string | null
    createdAt: Date
    updatedAt: Date
    _count: OrderProductsCountAggregateOutputType | null
    _min: OrderProductsMinAggregateOutputType | null
    _max: OrderProductsMaxAggregateOutputType | null
  }

  type GetOrderProductsGroupByPayload<T extends orderProductsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderProductsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderProductsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderProductsGroupByOutputType[P]>
            : GetScalarType<T[P], OrderProductsGroupByOutputType[P]>
        }
      >
    >


  export type orderProductsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderID?: boolean
    productID?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    order?: boolean | orderProducts$orderArgs<ExtArgs>
    product?: boolean | orderProducts$productArgs<ExtArgs>
  }, ExtArgs["result"]["orderProducts"]>

  export type orderProductsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderID?: boolean
    productID?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    order?: boolean | orderProducts$orderArgs<ExtArgs>
    product?: boolean | orderProducts$productArgs<ExtArgs>
  }, ExtArgs["result"]["orderProducts"]>

  export type orderProductsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderID?: boolean
    productID?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    order?: boolean | orderProducts$orderArgs<ExtArgs>
    product?: boolean | orderProducts$productArgs<ExtArgs>
  }, ExtArgs["result"]["orderProducts"]>

  export type orderProductsSelectScalar = {
    id?: boolean
    orderID?: boolean
    productID?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type orderProductsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "orderID" | "productID" | "createdAt" | "updatedAt", ExtArgs["result"]["orderProducts"]>
  export type orderProductsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | orderProducts$orderArgs<ExtArgs>
    product?: boolean | orderProducts$productArgs<ExtArgs>
  }
  export type orderProductsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | orderProducts$orderArgs<ExtArgs>
    product?: boolean | orderProducts$productArgs<ExtArgs>
  }
  export type orderProductsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | orderProducts$orderArgs<ExtArgs>
    product?: boolean | orderProducts$productArgs<ExtArgs>
  }

  export type $orderProductsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "orderProducts"
    objects: {
      order: Prisma.$orderPayload<ExtArgs> | null
      product: Prisma.$productPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      orderID: string | null
      productID: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["orderProducts"]>
    composites: {}
  }

  type orderProductsGetPayload<S extends boolean | null | undefined | orderProductsDefaultArgs> = $Result.GetResult<Prisma.$orderProductsPayload, S>

  type orderProductsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<orderProductsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderProductsCountAggregateInputType | true
    }

  export interface orderProductsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['orderProducts'], meta: { name: 'orderProducts' } }
    /**
     * Find zero or one OrderProducts that matches the filter.
     * @param {orderProductsFindUniqueArgs} args - Arguments to find a OrderProducts
     * @example
     * // Get one OrderProducts
     * const orderProducts = await prisma.orderProducts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends orderProductsFindUniqueArgs>(args: SelectSubset<T, orderProductsFindUniqueArgs<ExtArgs>>): Prisma__orderProductsClient<$Result.GetResult<Prisma.$orderProductsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OrderProducts that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {orderProductsFindUniqueOrThrowArgs} args - Arguments to find a OrderProducts
     * @example
     * // Get one OrderProducts
     * const orderProducts = await prisma.orderProducts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends orderProductsFindUniqueOrThrowArgs>(args: SelectSubset<T, orderProductsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__orderProductsClient<$Result.GetResult<Prisma.$orderProductsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderProductsFindFirstArgs} args - Arguments to find a OrderProducts
     * @example
     * // Get one OrderProducts
     * const orderProducts = await prisma.orderProducts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends orderProductsFindFirstArgs>(args?: SelectSubset<T, orderProductsFindFirstArgs<ExtArgs>>): Prisma__orderProductsClient<$Result.GetResult<Prisma.$orderProductsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OrderProducts that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderProductsFindFirstOrThrowArgs} args - Arguments to find a OrderProducts
     * @example
     * // Get one OrderProducts
     * const orderProducts = await prisma.orderProducts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends orderProductsFindFirstOrThrowArgs>(args?: SelectSubset<T, orderProductsFindFirstOrThrowArgs<ExtArgs>>): Prisma__orderProductsClient<$Result.GetResult<Prisma.$orderProductsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OrderProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderProductsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderProducts
     * const orderProducts = await prisma.orderProducts.findMany()
     * 
     * // Get first 10 OrderProducts
     * const orderProducts = await prisma.orderProducts.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderProductsWithIdOnly = await prisma.orderProducts.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends orderProductsFindManyArgs>(args?: SelectSubset<T, orderProductsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderProductsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OrderProducts.
     * @param {orderProductsCreateArgs} args - Arguments to create a OrderProducts.
     * @example
     * // Create one OrderProducts
     * const OrderProducts = await prisma.orderProducts.create({
     *   data: {
     *     // ... data to create a OrderProducts
     *   }
     * })
     * 
     */
    create<T extends orderProductsCreateArgs>(args: SelectSubset<T, orderProductsCreateArgs<ExtArgs>>): Prisma__orderProductsClient<$Result.GetResult<Prisma.$orderProductsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OrderProducts.
     * @param {orderProductsCreateManyArgs} args - Arguments to create many OrderProducts.
     * @example
     * // Create many OrderProducts
     * const orderProducts = await prisma.orderProducts.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends orderProductsCreateManyArgs>(args?: SelectSubset<T, orderProductsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrderProducts and returns the data saved in the database.
     * @param {orderProductsCreateManyAndReturnArgs} args - Arguments to create many OrderProducts.
     * @example
     * // Create many OrderProducts
     * const orderProducts = await prisma.orderProducts.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrderProducts and only return the `id`
     * const orderProductsWithIdOnly = await prisma.orderProducts.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends orderProductsCreateManyAndReturnArgs>(args?: SelectSubset<T, orderProductsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderProductsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OrderProducts.
     * @param {orderProductsDeleteArgs} args - Arguments to delete one OrderProducts.
     * @example
     * // Delete one OrderProducts
     * const OrderProducts = await prisma.orderProducts.delete({
     *   where: {
     *     // ... filter to delete one OrderProducts
     *   }
     * })
     * 
     */
    delete<T extends orderProductsDeleteArgs>(args: SelectSubset<T, orderProductsDeleteArgs<ExtArgs>>): Prisma__orderProductsClient<$Result.GetResult<Prisma.$orderProductsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OrderProducts.
     * @param {orderProductsUpdateArgs} args - Arguments to update one OrderProducts.
     * @example
     * // Update one OrderProducts
     * const orderProducts = await prisma.orderProducts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends orderProductsUpdateArgs>(args: SelectSubset<T, orderProductsUpdateArgs<ExtArgs>>): Prisma__orderProductsClient<$Result.GetResult<Prisma.$orderProductsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OrderProducts.
     * @param {orderProductsDeleteManyArgs} args - Arguments to filter OrderProducts to delete.
     * @example
     * // Delete a few OrderProducts
     * const { count } = await prisma.orderProducts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends orderProductsDeleteManyArgs>(args?: SelectSubset<T, orderProductsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderProductsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderProducts
     * const orderProducts = await prisma.orderProducts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends orderProductsUpdateManyArgs>(args: SelectSubset<T, orderProductsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderProducts and returns the data updated in the database.
     * @param {orderProductsUpdateManyAndReturnArgs} args - Arguments to update many OrderProducts.
     * @example
     * // Update many OrderProducts
     * const orderProducts = await prisma.orderProducts.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OrderProducts and only return the `id`
     * const orderProductsWithIdOnly = await prisma.orderProducts.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends orderProductsUpdateManyAndReturnArgs>(args: SelectSubset<T, orderProductsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$orderProductsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OrderProducts.
     * @param {orderProductsUpsertArgs} args - Arguments to update or create a OrderProducts.
     * @example
     * // Update or create a OrderProducts
     * const orderProducts = await prisma.orderProducts.upsert({
     *   create: {
     *     // ... data to create a OrderProducts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderProducts we want to update
     *   }
     * })
     */
    upsert<T extends orderProductsUpsertArgs>(args: SelectSubset<T, orderProductsUpsertArgs<ExtArgs>>): Prisma__orderProductsClient<$Result.GetResult<Prisma.$orderProductsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OrderProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderProductsCountArgs} args - Arguments to filter OrderProducts to count.
     * @example
     * // Count the number of OrderProducts
     * const count = await prisma.orderProducts.count({
     *   where: {
     *     // ... the filter for the OrderProducts we want to count
     *   }
     * })
    **/
    count<T extends orderProductsCountArgs>(
      args?: Subset<T, orderProductsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderProductsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderProductsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderProductsAggregateArgs>(args: Subset<T, OrderProductsAggregateArgs>): Prisma.PrismaPromise<GetOrderProductsAggregateType<T>>

    /**
     * Group by OrderProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {orderProductsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends orderProductsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: orderProductsGroupByArgs['orderBy'] }
        : { orderBy?: orderProductsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, orderProductsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderProductsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the orderProducts model
   */
  readonly fields: orderProductsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for orderProducts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__orderProductsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends orderProducts$orderArgs<ExtArgs> = {}>(args?: Subset<T, orderProducts$orderArgs<ExtArgs>>): Prisma__orderClient<$Result.GetResult<Prisma.$orderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    product<T extends orderProducts$productArgs<ExtArgs> = {}>(args?: Subset<T, orderProducts$productArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the orderProducts model
   */
  interface orderProductsFieldRefs {
    readonly id: FieldRef<"orderProducts", 'String'>
    readonly orderID: FieldRef<"orderProducts", 'String'>
    readonly productID: FieldRef<"orderProducts", 'String'>
    readonly createdAt: FieldRef<"orderProducts", 'DateTime'>
    readonly updatedAt: FieldRef<"orderProducts", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * orderProducts findUnique
   */
  export type orderProductsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProducts
     */
    select?: orderProductsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderProducts
     */
    omit?: orderProductsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductsInclude<ExtArgs> | null
    /**
     * Filter, which orderProducts to fetch.
     */
    where: orderProductsWhereUniqueInput
  }

  /**
   * orderProducts findUniqueOrThrow
   */
  export type orderProductsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProducts
     */
    select?: orderProductsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderProducts
     */
    omit?: orderProductsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductsInclude<ExtArgs> | null
    /**
     * Filter, which orderProducts to fetch.
     */
    where: orderProductsWhereUniqueInput
  }

  /**
   * orderProducts findFirst
   */
  export type orderProductsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProducts
     */
    select?: orderProductsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderProducts
     */
    omit?: orderProductsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductsInclude<ExtArgs> | null
    /**
     * Filter, which orderProducts to fetch.
     */
    where?: orderProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderProducts to fetch.
     */
    orderBy?: orderProductsOrderByWithRelationInput | orderProductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orderProducts.
     */
    cursor?: orderProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orderProducts.
     */
    distinct?: OrderProductsScalarFieldEnum | OrderProductsScalarFieldEnum[]
  }

  /**
   * orderProducts findFirstOrThrow
   */
  export type orderProductsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProducts
     */
    select?: orderProductsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderProducts
     */
    omit?: orderProductsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductsInclude<ExtArgs> | null
    /**
     * Filter, which orderProducts to fetch.
     */
    where?: orderProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderProducts to fetch.
     */
    orderBy?: orderProductsOrderByWithRelationInput | orderProductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orderProducts.
     */
    cursor?: orderProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orderProducts.
     */
    distinct?: OrderProductsScalarFieldEnum | OrderProductsScalarFieldEnum[]
  }

  /**
   * orderProducts findMany
   */
  export type orderProductsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProducts
     */
    select?: orderProductsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderProducts
     */
    omit?: orderProductsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductsInclude<ExtArgs> | null
    /**
     * Filter, which orderProducts to fetch.
     */
    where?: orderProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orderProducts to fetch.
     */
    orderBy?: orderProductsOrderByWithRelationInput | orderProductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orderProducts.
     */
    cursor?: orderProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orderProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orderProducts.
     */
    skip?: number
    distinct?: OrderProductsScalarFieldEnum | OrderProductsScalarFieldEnum[]
  }

  /**
   * orderProducts create
   */
  export type orderProductsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProducts
     */
    select?: orderProductsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderProducts
     */
    omit?: orderProductsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductsInclude<ExtArgs> | null
    /**
     * The data needed to create a orderProducts.
     */
    data: XOR<orderProductsCreateInput, orderProductsUncheckedCreateInput>
  }

  /**
   * orderProducts createMany
   */
  export type orderProductsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many orderProducts.
     */
    data: orderProductsCreateManyInput | orderProductsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * orderProducts createManyAndReturn
   */
  export type orderProductsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProducts
     */
    select?: orderProductsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the orderProducts
     */
    omit?: orderProductsOmit<ExtArgs> | null
    /**
     * The data used to create many orderProducts.
     */
    data: orderProductsCreateManyInput | orderProductsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * orderProducts update
   */
  export type orderProductsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProducts
     */
    select?: orderProductsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderProducts
     */
    omit?: orderProductsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductsInclude<ExtArgs> | null
    /**
     * The data needed to update a orderProducts.
     */
    data: XOR<orderProductsUpdateInput, orderProductsUncheckedUpdateInput>
    /**
     * Choose, which orderProducts to update.
     */
    where: orderProductsWhereUniqueInput
  }

  /**
   * orderProducts updateMany
   */
  export type orderProductsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update orderProducts.
     */
    data: XOR<orderProductsUpdateManyMutationInput, orderProductsUncheckedUpdateManyInput>
    /**
     * Filter which orderProducts to update
     */
    where?: orderProductsWhereInput
    /**
     * Limit how many orderProducts to update.
     */
    limit?: number
  }

  /**
   * orderProducts updateManyAndReturn
   */
  export type orderProductsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProducts
     */
    select?: orderProductsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the orderProducts
     */
    omit?: orderProductsOmit<ExtArgs> | null
    /**
     * The data used to update orderProducts.
     */
    data: XOR<orderProductsUpdateManyMutationInput, orderProductsUncheckedUpdateManyInput>
    /**
     * Filter which orderProducts to update
     */
    where?: orderProductsWhereInput
    /**
     * Limit how many orderProducts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * orderProducts upsert
   */
  export type orderProductsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProducts
     */
    select?: orderProductsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderProducts
     */
    omit?: orderProductsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductsInclude<ExtArgs> | null
    /**
     * The filter to search for the orderProducts to update in case it exists.
     */
    where: orderProductsWhereUniqueInput
    /**
     * In case the orderProducts found by the `where` argument doesn't exist, create a new orderProducts with this data.
     */
    create: XOR<orderProductsCreateInput, orderProductsUncheckedCreateInput>
    /**
     * In case the orderProducts was found with the provided `where` argument, update it with this data.
     */
    update: XOR<orderProductsUpdateInput, orderProductsUncheckedUpdateInput>
  }

  /**
   * orderProducts delete
   */
  export type orderProductsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProducts
     */
    select?: orderProductsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderProducts
     */
    omit?: orderProductsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductsInclude<ExtArgs> | null
    /**
     * Filter which orderProducts to delete.
     */
    where: orderProductsWhereUniqueInput
  }

  /**
   * orderProducts deleteMany
   */
  export type orderProductsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orderProducts to delete
     */
    where?: orderProductsWhereInput
    /**
     * Limit how many orderProducts to delete.
     */
    limit?: number
  }

  /**
   * orderProducts.order
   */
  export type orderProducts$orderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order
     */
    select?: orderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the order
     */
    omit?: orderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderInclude<ExtArgs> | null
    where?: orderWhereInput
  }

  /**
   * orderProducts.product
   */
  export type orderProducts$productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    where?: productWhereInput
  }

  /**
   * orderProducts without action
   */
  export type orderProductsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orderProducts
     */
    select?: orderProductsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the orderProducts
     */
    omit?: orderProductsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: orderProductsInclude<ExtArgs> | null
  }


  /**
   * Model subscription
   */

  export type AggregateSubscription = {
    _count: SubscriptionCountAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  export type SubscriptionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    contentId: string | null
    paymentId: string | null
    startDate: Date | null
    endDate: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubscriptionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    contentId: string | null
    paymentId: string | null
    startDate: Date | null
    endDate: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubscriptionCountAggregateOutputType = {
    id: number
    userId: number
    contentId: number
    paymentId: number
    startDate: number
    endDate: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SubscriptionMinAggregateInputType = {
    id?: true
    userId?: true
    contentId?: true
    paymentId?: true
    startDate?: true
    endDate?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubscriptionMaxAggregateInputType = {
    id?: true
    userId?: true
    contentId?: true
    paymentId?: true
    startDate?: true
    endDate?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubscriptionCountAggregateInputType = {
    id?: true
    userId?: true
    contentId?: true
    paymentId?: true
    startDate?: true
    endDate?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which subscription to aggregate.
     */
    where?: subscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subscriptions to fetch.
     */
    orderBy?: subscriptionOrderByWithRelationInput | subscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: subscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned subscriptions
    **/
    _count?: true | SubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubscriptionMaxAggregateInputType
  }

  export type GetSubscriptionAggregateType<T extends SubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubscription[P]>
      : GetScalarType<T[P], AggregateSubscription[P]>
  }




  export type subscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: subscriptionWhereInput
    orderBy?: subscriptionOrderByWithAggregationInput | subscriptionOrderByWithAggregationInput[]
    by: SubscriptionScalarFieldEnum[] | SubscriptionScalarFieldEnum
    having?: subscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubscriptionCountAggregateInputType | true
    _min?: SubscriptionMinAggregateInputType
    _max?: SubscriptionMaxAggregateInputType
  }

  export type SubscriptionGroupByOutputType = {
    id: string
    userId: string
    contentId: string | null
    paymentId: string | null
    startDate: Date
    endDate: Date | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: SubscriptionCountAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  type GetSubscriptionGroupByPayload<T extends subscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type subscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    contentId?: boolean
    paymentId?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    content?: boolean | subscription$contentArgs<ExtArgs>
    payment?: boolean | subscription$paymentArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type subscriptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    contentId?: boolean
    paymentId?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    content?: boolean | subscription$contentArgs<ExtArgs>
    payment?: boolean | subscription$paymentArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type subscriptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    contentId?: boolean
    paymentId?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    content?: boolean | subscription$contentArgs<ExtArgs>
    payment?: boolean | subscription$paymentArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type subscriptionSelectScalar = {
    id?: boolean
    userId?: boolean
    contentId?: boolean
    paymentId?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type subscriptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "contentId" | "paymentId" | "startDate" | "endDate" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["subscription"]>
  export type subscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    content?: boolean | subscription$contentArgs<ExtArgs>
    payment?: boolean | subscription$paymentArgs<ExtArgs>
  }
  export type subscriptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    content?: boolean | subscription$contentArgs<ExtArgs>
    payment?: boolean | subscription$paymentArgs<ExtArgs>
  }
  export type subscriptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    content?: boolean | subscription$contentArgs<ExtArgs>
    payment?: boolean | subscription$paymentArgs<ExtArgs>
  }

  export type $subscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "subscription"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
      content: Prisma.$contentPayload<ExtArgs> | null
      payment: Prisma.$paymentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      contentId: string | null
      paymentId: string | null
      startDate: Date
      endDate: Date | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["subscription"]>
    composites: {}
  }

  type subscriptionGetPayload<S extends boolean | null | undefined | subscriptionDefaultArgs> = $Result.GetResult<Prisma.$subscriptionPayload, S>

  type subscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<subscriptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubscriptionCountAggregateInputType | true
    }

  export interface subscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['subscription'], meta: { name: 'subscription' } }
    /**
     * Find zero or one Subscription that matches the filter.
     * @param {subscriptionFindUniqueArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends subscriptionFindUniqueArgs>(args: SelectSubset<T, subscriptionFindUniqueArgs<ExtArgs>>): Prisma__subscriptionClient<$Result.GetResult<Prisma.$subscriptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Subscription that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {subscriptionFindUniqueOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends subscriptionFindUniqueOrThrowArgs>(args: SelectSubset<T, subscriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__subscriptionClient<$Result.GetResult<Prisma.$subscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subscriptionFindFirstArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends subscriptionFindFirstArgs>(args?: SelectSubset<T, subscriptionFindFirstArgs<ExtArgs>>): Prisma__subscriptionClient<$Result.GetResult<Prisma.$subscriptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subscriptionFindFirstOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends subscriptionFindFirstOrThrowArgs>(args?: SelectSubset<T, subscriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__subscriptionClient<$Result.GetResult<Prisma.$subscriptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Subscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subscriptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subscriptions
     * const subscriptions = await prisma.subscription.findMany()
     * 
     * // Get first 10 Subscriptions
     * const subscriptions = await prisma.subscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends subscriptionFindManyArgs>(args?: SelectSubset<T, subscriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$subscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Subscription.
     * @param {subscriptionCreateArgs} args - Arguments to create a Subscription.
     * @example
     * // Create one Subscription
     * const Subscription = await prisma.subscription.create({
     *   data: {
     *     // ... data to create a Subscription
     *   }
     * })
     * 
     */
    create<T extends subscriptionCreateArgs>(args: SelectSubset<T, subscriptionCreateArgs<ExtArgs>>): Prisma__subscriptionClient<$Result.GetResult<Prisma.$subscriptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Subscriptions.
     * @param {subscriptionCreateManyArgs} args - Arguments to create many Subscriptions.
     * @example
     * // Create many Subscriptions
     * const subscription = await prisma.subscription.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends subscriptionCreateManyArgs>(args?: SelectSubset<T, subscriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subscriptions and returns the data saved in the database.
     * @param {subscriptionCreateManyAndReturnArgs} args - Arguments to create many Subscriptions.
     * @example
     * // Create many Subscriptions
     * const subscription = await prisma.subscription.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subscriptions and only return the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends subscriptionCreateManyAndReturnArgs>(args?: SelectSubset<T, subscriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$subscriptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Subscription.
     * @param {subscriptionDeleteArgs} args - Arguments to delete one Subscription.
     * @example
     * // Delete one Subscription
     * const Subscription = await prisma.subscription.delete({
     *   where: {
     *     // ... filter to delete one Subscription
     *   }
     * })
     * 
     */
    delete<T extends subscriptionDeleteArgs>(args: SelectSubset<T, subscriptionDeleteArgs<ExtArgs>>): Prisma__subscriptionClient<$Result.GetResult<Prisma.$subscriptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Subscription.
     * @param {subscriptionUpdateArgs} args - Arguments to update one Subscription.
     * @example
     * // Update one Subscription
     * const subscription = await prisma.subscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends subscriptionUpdateArgs>(args: SelectSubset<T, subscriptionUpdateArgs<ExtArgs>>): Prisma__subscriptionClient<$Result.GetResult<Prisma.$subscriptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Subscriptions.
     * @param {subscriptionDeleteManyArgs} args - Arguments to filter Subscriptions to delete.
     * @example
     * // Delete a few Subscriptions
     * const { count } = await prisma.subscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends subscriptionDeleteManyArgs>(args?: SelectSubset<T, subscriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subscriptions
     * const subscription = await prisma.subscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends subscriptionUpdateManyArgs>(args: SelectSubset<T, subscriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscriptions and returns the data updated in the database.
     * @param {subscriptionUpdateManyAndReturnArgs} args - Arguments to update many Subscriptions.
     * @example
     * // Update many Subscriptions
     * const subscription = await prisma.subscription.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Subscriptions and only return the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends subscriptionUpdateManyAndReturnArgs>(args: SelectSubset<T, subscriptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$subscriptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Subscription.
     * @param {subscriptionUpsertArgs} args - Arguments to update or create a Subscription.
     * @example
     * // Update or create a Subscription
     * const subscription = await prisma.subscription.upsert({
     *   create: {
     *     // ... data to create a Subscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subscription we want to update
     *   }
     * })
     */
    upsert<T extends subscriptionUpsertArgs>(args: SelectSubset<T, subscriptionUpsertArgs<ExtArgs>>): Prisma__subscriptionClient<$Result.GetResult<Prisma.$subscriptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subscriptionCountArgs} args - Arguments to filter Subscriptions to count.
     * @example
     * // Count the number of Subscriptions
     * const count = await prisma.subscription.count({
     *   where: {
     *     // ... the filter for the Subscriptions we want to count
     *   }
     * })
    **/
    count<T extends subscriptionCountArgs>(
      args?: Subset<T, subscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubscriptionAggregateArgs>(args: Subset<T, SubscriptionAggregateArgs>): Prisma.PrismaPromise<GetSubscriptionAggregateType<T>>

    /**
     * Group by Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {subscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends subscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: subscriptionGroupByArgs['orderBy'] }
        : { orderBy?: subscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, subscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the subscription model
   */
  readonly fields: subscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for subscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__subscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    content<T extends subscription$contentArgs<ExtArgs> = {}>(args?: Subset<T, subscription$contentArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    payment<T extends subscription$paymentArgs<ExtArgs> = {}>(args?: Subset<T, subscription$paymentArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the subscription model
   */
  interface subscriptionFieldRefs {
    readonly id: FieldRef<"subscription", 'String'>
    readonly userId: FieldRef<"subscription", 'String'>
    readonly contentId: FieldRef<"subscription", 'String'>
    readonly paymentId: FieldRef<"subscription", 'String'>
    readonly startDate: FieldRef<"subscription", 'DateTime'>
    readonly endDate: FieldRef<"subscription", 'DateTime'>
    readonly isActive: FieldRef<"subscription", 'Boolean'>
    readonly createdAt: FieldRef<"subscription", 'DateTime'>
    readonly updatedAt: FieldRef<"subscription", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * subscription findUnique
   */
  export type subscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subscription
     */
    select?: subscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subscription
     */
    omit?: subscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subscriptionInclude<ExtArgs> | null
    /**
     * Filter, which subscription to fetch.
     */
    where: subscriptionWhereUniqueInput
  }

  /**
   * subscription findUniqueOrThrow
   */
  export type subscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subscription
     */
    select?: subscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subscription
     */
    omit?: subscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subscriptionInclude<ExtArgs> | null
    /**
     * Filter, which subscription to fetch.
     */
    where: subscriptionWhereUniqueInput
  }

  /**
   * subscription findFirst
   */
  export type subscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subscription
     */
    select?: subscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subscription
     */
    omit?: subscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subscriptionInclude<ExtArgs> | null
    /**
     * Filter, which subscription to fetch.
     */
    where?: subscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subscriptions to fetch.
     */
    orderBy?: subscriptionOrderByWithRelationInput | subscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for subscriptions.
     */
    cursor?: subscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * subscription findFirstOrThrow
   */
  export type subscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subscription
     */
    select?: subscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subscription
     */
    omit?: subscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subscriptionInclude<ExtArgs> | null
    /**
     * Filter, which subscription to fetch.
     */
    where?: subscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subscriptions to fetch.
     */
    orderBy?: subscriptionOrderByWithRelationInput | subscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for subscriptions.
     */
    cursor?: subscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * subscription findMany
   */
  export type subscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subscription
     */
    select?: subscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subscription
     */
    omit?: subscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subscriptionInclude<ExtArgs> | null
    /**
     * Filter, which subscriptions to fetch.
     */
    where?: subscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of subscriptions to fetch.
     */
    orderBy?: subscriptionOrderByWithRelationInput | subscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing subscriptions.
     */
    cursor?: subscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` subscriptions.
     */
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * subscription create
   */
  export type subscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subscription
     */
    select?: subscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subscription
     */
    omit?: subscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a subscription.
     */
    data: XOR<subscriptionCreateInput, subscriptionUncheckedCreateInput>
  }

  /**
   * subscription createMany
   */
  export type subscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many subscriptions.
     */
    data: subscriptionCreateManyInput | subscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * subscription createManyAndReturn
   */
  export type subscriptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subscription
     */
    select?: subscriptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the subscription
     */
    omit?: subscriptionOmit<ExtArgs> | null
    /**
     * The data used to create many subscriptions.
     */
    data: subscriptionCreateManyInput | subscriptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subscriptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * subscription update
   */
  export type subscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subscription
     */
    select?: subscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subscription
     */
    omit?: subscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a subscription.
     */
    data: XOR<subscriptionUpdateInput, subscriptionUncheckedUpdateInput>
    /**
     * Choose, which subscription to update.
     */
    where: subscriptionWhereUniqueInput
  }

  /**
   * subscription updateMany
   */
  export type subscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update subscriptions.
     */
    data: XOR<subscriptionUpdateManyMutationInput, subscriptionUncheckedUpdateManyInput>
    /**
     * Filter which subscriptions to update
     */
    where?: subscriptionWhereInput
    /**
     * Limit how many subscriptions to update.
     */
    limit?: number
  }

  /**
   * subscription updateManyAndReturn
   */
  export type subscriptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subscription
     */
    select?: subscriptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the subscription
     */
    omit?: subscriptionOmit<ExtArgs> | null
    /**
     * The data used to update subscriptions.
     */
    data: XOR<subscriptionUpdateManyMutationInput, subscriptionUncheckedUpdateManyInput>
    /**
     * Filter which subscriptions to update
     */
    where?: subscriptionWhereInput
    /**
     * Limit how many subscriptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subscriptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * subscription upsert
   */
  export type subscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subscription
     */
    select?: subscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subscription
     */
    omit?: subscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the subscription to update in case it exists.
     */
    where: subscriptionWhereUniqueInput
    /**
     * In case the subscription found by the `where` argument doesn't exist, create a new subscription with this data.
     */
    create: XOR<subscriptionCreateInput, subscriptionUncheckedCreateInput>
    /**
     * In case the subscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<subscriptionUpdateInput, subscriptionUncheckedUpdateInput>
  }

  /**
   * subscription delete
   */
  export type subscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subscription
     */
    select?: subscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subscription
     */
    omit?: subscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subscriptionInclude<ExtArgs> | null
    /**
     * Filter which subscription to delete.
     */
    where: subscriptionWhereUniqueInput
  }

  /**
   * subscription deleteMany
   */
  export type subscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which subscriptions to delete
     */
    where?: subscriptionWhereInput
    /**
     * Limit how many subscriptions to delete.
     */
    limit?: number
  }

  /**
   * subscription.content
   */
  export type subscription$contentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the content
     */
    select?: contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the content
     */
    omit?: contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentInclude<ExtArgs> | null
    where?: contentWhereInput
  }

  /**
   * subscription.payment
   */
  export type subscription$paymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    where?: paymentWhereInput
  }

  /**
   * subscription without action
   */
  export type subscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the subscription
     */
    select?: subscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the subscription
     */
    omit?: subscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: subscriptionInclude<ExtArgs> | null
  }


  /**
   * Model FanEngagement
   */

  export type AggregateFanEngagement = {
    _count: FanEngagementCountAggregateOutputType | null
    _min: FanEngagementMinAggregateOutputType | null
    _max: FanEngagementMaxAggregateOutputType | null
  }

  export type FanEngagementMinAggregateOutputType = {
    id: string | null
    userId: string | null
    contentId: string | null
    action: string | null
    value: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FanEngagementMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    contentId: string | null
    action: string | null
    value: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FanEngagementCountAggregateOutputType = {
    id: number
    userId: number
    contentId: number
    action: number
    value: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FanEngagementMinAggregateInputType = {
    id?: true
    userId?: true
    contentId?: true
    action?: true
    value?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FanEngagementMaxAggregateInputType = {
    id?: true
    userId?: true
    contentId?: true
    action?: true
    value?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FanEngagementCountAggregateInputType = {
    id?: true
    userId?: true
    contentId?: true
    action?: true
    value?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FanEngagementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FanEngagement to aggregate.
     */
    where?: FanEngagementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FanEngagements to fetch.
     */
    orderBy?: FanEngagementOrderByWithRelationInput | FanEngagementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FanEngagementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FanEngagements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FanEngagements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FanEngagements
    **/
    _count?: true | FanEngagementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FanEngagementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FanEngagementMaxAggregateInputType
  }

  export type GetFanEngagementAggregateType<T extends FanEngagementAggregateArgs> = {
        [P in keyof T & keyof AggregateFanEngagement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFanEngagement[P]>
      : GetScalarType<T[P], AggregateFanEngagement[P]>
  }




  export type FanEngagementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FanEngagementWhereInput
    orderBy?: FanEngagementOrderByWithAggregationInput | FanEngagementOrderByWithAggregationInput[]
    by: FanEngagementScalarFieldEnum[] | FanEngagementScalarFieldEnum
    having?: FanEngagementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FanEngagementCountAggregateInputType | true
    _min?: FanEngagementMinAggregateInputType
    _max?: FanEngagementMaxAggregateInputType
  }

  export type FanEngagementGroupByOutputType = {
    id: string
    userId: string
    contentId: string
    action: string | null
    value: string | null
    createdAt: Date
    updatedAt: Date
    _count: FanEngagementCountAggregateOutputType | null
    _min: FanEngagementMinAggregateOutputType | null
    _max: FanEngagementMaxAggregateOutputType | null
  }

  type GetFanEngagementGroupByPayload<T extends FanEngagementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FanEngagementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FanEngagementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FanEngagementGroupByOutputType[P]>
            : GetScalarType<T[P], FanEngagementGroupByOutputType[P]>
        }
      >
    >


  export type FanEngagementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    contentId?: boolean
    action?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    content?: boolean | contentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fanEngagement"]>

  export type FanEngagementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    contentId?: boolean
    action?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    content?: boolean | contentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fanEngagement"]>

  export type FanEngagementSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    contentId?: boolean
    action?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    content?: boolean | contentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fanEngagement"]>

  export type FanEngagementSelectScalar = {
    id?: boolean
    userId?: boolean
    contentId?: boolean
    action?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FanEngagementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "contentId" | "action" | "value" | "createdAt" | "updatedAt", ExtArgs["result"]["fanEngagement"]>
  export type FanEngagementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    content?: boolean | contentDefaultArgs<ExtArgs>
  }
  export type FanEngagementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    content?: boolean | contentDefaultArgs<ExtArgs>
  }
  export type FanEngagementIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    content?: boolean | contentDefaultArgs<ExtArgs>
  }

  export type $FanEngagementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FanEngagement"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
      content: Prisma.$contentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      contentId: string
      action: string | null
      value: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["fanEngagement"]>
    composites: {}
  }

  type FanEngagementGetPayload<S extends boolean | null | undefined | FanEngagementDefaultArgs> = $Result.GetResult<Prisma.$FanEngagementPayload, S>

  type FanEngagementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FanEngagementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FanEngagementCountAggregateInputType | true
    }

  export interface FanEngagementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FanEngagement'], meta: { name: 'FanEngagement' } }
    /**
     * Find zero or one FanEngagement that matches the filter.
     * @param {FanEngagementFindUniqueArgs} args - Arguments to find a FanEngagement
     * @example
     * // Get one FanEngagement
     * const fanEngagement = await prisma.fanEngagement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FanEngagementFindUniqueArgs>(args: SelectSubset<T, FanEngagementFindUniqueArgs<ExtArgs>>): Prisma__FanEngagementClient<$Result.GetResult<Prisma.$FanEngagementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FanEngagement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FanEngagementFindUniqueOrThrowArgs} args - Arguments to find a FanEngagement
     * @example
     * // Get one FanEngagement
     * const fanEngagement = await prisma.fanEngagement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FanEngagementFindUniqueOrThrowArgs>(args: SelectSubset<T, FanEngagementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FanEngagementClient<$Result.GetResult<Prisma.$FanEngagementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FanEngagement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FanEngagementFindFirstArgs} args - Arguments to find a FanEngagement
     * @example
     * // Get one FanEngagement
     * const fanEngagement = await prisma.fanEngagement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FanEngagementFindFirstArgs>(args?: SelectSubset<T, FanEngagementFindFirstArgs<ExtArgs>>): Prisma__FanEngagementClient<$Result.GetResult<Prisma.$FanEngagementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FanEngagement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FanEngagementFindFirstOrThrowArgs} args - Arguments to find a FanEngagement
     * @example
     * // Get one FanEngagement
     * const fanEngagement = await prisma.fanEngagement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FanEngagementFindFirstOrThrowArgs>(args?: SelectSubset<T, FanEngagementFindFirstOrThrowArgs<ExtArgs>>): Prisma__FanEngagementClient<$Result.GetResult<Prisma.$FanEngagementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FanEngagements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FanEngagementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FanEngagements
     * const fanEngagements = await prisma.fanEngagement.findMany()
     * 
     * // Get first 10 FanEngagements
     * const fanEngagements = await prisma.fanEngagement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fanEngagementWithIdOnly = await prisma.fanEngagement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FanEngagementFindManyArgs>(args?: SelectSubset<T, FanEngagementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FanEngagementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FanEngagement.
     * @param {FanEngagementCreateArgs} args - Arguments to create a FanEngagement.
     * @example
     * // Create one FanEngagement
     * const FanEngagement = await prisma.fanEngagement.create({
     *   data: {
     *     // ... data to create a FanEngagement
     *   }
     * })
     * 
     */
    create<T extends FanEngagementCreateArgs>(args: SelectSubset<T, FanEngagementCreateArgs<ExtArgs>>): Prisma__FanEngagementClient<$Result.GetResult<Prisma.$FanEngagementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FanEngagements.
     * @param {FanEngagementCreateManyArgs} args - Arguments to create many FanEngagements.
     * @example
     * // Create many FanEngagements
     * const fanEngagement = await prisma.fanEngagement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FanEngagementCreateManyArgs>(args?: SelectSubset<T, FanEngagementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FanEngagements and returns the data saved in the database.
     * @param {FanEngagementCreateManyAndReturnArgs} args - Arguments to create many FanEngagements.
     * @example
     * // Create many FanEngagements
     * const fanEngagement = await prisma.fanEngagement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FanEngagements and only return the `id`
     * const fanEngagementWithIdOnly = await prisma.fanEngagement.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FanEngagementCreateManyAndReturnArgs>(args?: SelectSubset<T, FanEngagementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FanEngagementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FanEngagement.
     * @param {FanEngagementDeleteArgs} args - Arguments to delete one FanEngagement.
     * @example
     * // Delete one FanEngagement
     * const FanEngagement = await prisma.fanEngagement.delete({
     *   where: {
     *     // ... filter to delete one FanEngagement
     *   }
     * })
     * 
     */
    delete<T extends FanEngagementDeleteArgs>(args: SelectSubset<T, FanEngagementDeleteArgs<ExtArgs>>): Prisma__FanEngagementClient<$Result.GetResult<Prisma.$FanEngagementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FanEngagement.
     * @param {FanEngagementUpdateArgs} args - Arguments to update one FanEngagement.
     * @example
     * // Update one FanEngagement
     * const fanEngagement = await prisma.fanEngagement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FanEngagementUpdateArgs>(args: SelectSubset<T, FanEngagementUpdateArgs<ExtArgs>>): Prisma__FanEngagementClient<$Result.GetResult<Prisma.$FanEngagementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FanEngagements.
     * @param {FanEngagementDeleteManyArgs} args - Arguments to filter FanEngagements to delete.
     * @example
     * // Delete a few FanEngagements
     * const { count } = await prisma.fanEngagement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FanEngagementDeleteManyArgs>(args?: SelectSubset<T, FanEngagementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FanEngagements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FanEngagementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FanEngagements
     * const fanEngagement = await prisma.fanEngagement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FanEngagementUpdateManyArgs>(args: SelectSubset<T, FanEngagementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FanEngagements and returns the data updated in the database.
     * @param {FanEngagementUpdateManyAndReturnArgs} args - Arguments to update many FanEngagements.
     * @example
     * // Update many FanEngagements
     * const fanEngagement = await prisma.fanEngagement.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FanEngagements and only return the `id`
     * const fanEngagementWithIdOnly = await prisma.fanEngagement.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FanEngagementUpdateManyAndReturnArgs>(args: SelectSubset<T, FanEngagementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FanEngagementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FanEngagement.
     * @param {FanEngagementUpsertArgs} args - Arguments to update or create a FanEngagement.
     * @example
     * // Update or create a FanEngagement
     * const fanEngagement = await prisma.fanEngagement.upsert({
     *   create: {
     *     // ... data to create a FanEngagement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FanEngagement we want to update
     *   }
     * })
     */
    upsert<T extends FanEngagementUpsertArgs>(args: SelectSubset<T, FanEngagementUpsertArgs<ExtArgs>>): Prisma__FanEngagementClient<$Result.GetResult<Prisma.$FanEngagementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FanEngagements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FanEngagementCountArgs} args - Arguments to filter FanEngagements to count.
     * @example
     * // Count the number of FanEngagements
     * const count = await prisma.fanEngagement.count({
     *   where: {
     *     // ... the filter for the FanEngagements we want to count
     *   }
     * })
    **/
    count<T extends FanEngagementCountArgs>(
      args?: Subset<T, FanEngagementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FanEngagementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FanEngagement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FanEngagementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FanEngagementAggregateArgs>(args: Subset<T, FanEngagementAggregateArgs>): Prisma.PrismaPromise<GetFanEngagementAggregateType<T>>

    /**
     * Group by FanEngagement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FanEngagementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FanEngagementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FanEngagementGroupByArgs['orderBy'] }
        : { orderBy?: FanEngagementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FanEngagementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFanEngagementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FanEngagement model
   */
  readonly fields: FanEngagementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FanEngagement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FanEngagementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    content<T extends contentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, contentDefaultArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FanEngagement model
   */
  interface FanEngagementFieldRefs {
    readonly id: FieldRef<"FanEngagement", 'String'>
    readonly userId: FieldRef<"FanEngagement", 'String'>
    readonly contentId: FieldRef<"FanEngagement", 'String'>
    readonly action: FieldRef<"FanEngagement", 'String'>
    readonly value: FieldRef<"FanEngagement", 'String'>
    readonly createdAt: FieldRef<"FanEngagement", 'DateTime'>
    readonly updatedAt: FieldRef<"FanEngagement", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FanEngagement findUnique
   */
  export type FanEngagementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FanEngagement
     */
    select?: FanEngagementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FanEngagement
     */
    omit?: FanEngagementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FanEngagementInclude<ExtArgs> | null
    /**
     * Filter, which FanEngagement to fetch.
     */
    where: FanEngagementWhereUniqueInput
  }

  /**
   * FanEngagement findUniqueOrThrow
   */
  export type FanEngagementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FanEngagement
     */
    select?: FanEngagementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FanEngagement
     */
    omit?: FanEngagementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FanEngagementInclude<ExtArgs> | null
    /**
     * Filter, which FanEngagement to fetch.
     */
    where: FanEngagementWhereUniqueInput
  }

  /**
   * FanEngagement findFirst
   */
  export type FanEngagementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FanEngagement
     */
    select?: FanEngagementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FanEngagement
     */
    omit?: FanEngagementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FanEngagementInclude<ExtArgs> | null
    /**
     * Filter, which FanEngagement to fetch.
     */
    where?: FanEngagementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FanEngagements to fetch.
     */
    orderBy?: FanEngagementOrderByWithRelationInput | FanEngagementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FanEngagements.
     */
    cursor?: FanEngagementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FanEngagements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FanEngagements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FanEngagements.
     */
    distinct?: FanEngagementScalarFieldEnum | FanEngagementScalarFieldEnum[]
  }

  /**
   * FanEngagement findFirstOrThrow
   */
  export type FanEngagementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FanEngagement
     */
    select?: FanEngagementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FanEngagement
     */
    omit?: FanEngagementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FanEngagementInclude<ExtArgs> | null
    /**
     * Filter, which FanEngagement to fetch.
     */
    where?: FanEngagementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FanEngagements to fetch.
     */
    orderBy?: FanEngagementOrderByWithRelationInput | FanEngagementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FanEngagements.
     */
    cursor?: FanEngagementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FanEngagements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FanEngagements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FanEngagements.
     */
    distinct?: FanEngagementScalarFieldEnum | FanEngagementScalarFieldEnum[]
  }

  /**
   * FanEngagement findMany
   */
  export type FanEngagementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FanEngagement
     */
    select?: FanEngagementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FanEngagement
     */
    omit?: FanEngagementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FanEngagementInclude<ExtArgs> | null
    /**
     * Filter, which FanEngagements to fetch.
     */
    where?: FanEngagementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FanEngagements to fetch.
     */
    orderBy?: FanEngagementOrderByWithRelationInput | FanEngagementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FanEngagements.
     */
    cursor?: FanEngagementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FanEngagements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FanEngagements.
     */
    skip?: number
    distinct?: FanEngagementScalarFieldEnum | FanEngagementScalarFieldEnum[]
  }

  /**
   * FanEngagement create
   */
  export type FanEngagementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FanEngagement
     */
    select?: FanEngagementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FanEngagement
     */
    omit?: FanEngagementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FanEngagementInclude<ExtArgs> | null
    /**
     * The data needed to create a FanEngagement.
     */
    data: XOR<FanEngagementCreateInput, FanEngagementUncheckedCreateInput>
  }

  /**
   * FanEngagement createMany
   */
  export type FanEngagementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FanEngagements.
     */
    data: FanEngagementCreateManyInput | FanEngagementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FanEngagement createManyAndReturn
   */
  export type FanEngagementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FanEngagement
     */
    select?: FanEngagementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FanEngagement
     */
    omit?: FanEngagementOmit<ExtArgs> | null
    /**
     * The data used to create many FanEngagements.
     */
    data: FanEngagementCreateManyInput | FanEngagementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FanEngagementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FanEngagement update
   */
  export type FanEngagementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FanEngagement
     */
    select?: FanEngagementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FanEngagement
     */
    omit?: FanEngagementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FanEngagementInclude<ExtArgs> | null
    /**
     * The data needed to update a FanEngagement.
     */
    data: XOR<FanEngagementUpdateInput, FanEngagementUncheckedUpdateInput>
    /**
     * Choose, which FanEngagement to update.
     */
    where: FanEngagementWhereUniqueInput
  }

  /**
   * FanEngagement updateMany
   */
  export type FanEngagementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FanEngagements.
     */
    data: XOR<FanEngagementUpdateManyMutationInput, FanEngagementUncheckedUpdateManyInput>
    /**
     * Filter which FanEngagements to update
     */
    where?: FanEngagementWhereInput
    /**
     * Limit how many FanEngagements to update.
     */
    limit?: number
  }

  /**
   * FanEngagement updateManyAndReturn
   */
  export type FanEngagementUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FanEngagement
     */
    select?: FanEngagementSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FanEngagement
     */
    omit?: FanEngagementOmit<ExtArgs> | null
    /**
     * The data used to update FanEngagements.
     */
    data: XOR<FanEngagementUpdateManyMutationInput, FanEngagementUncheckedUpdateManyInput>
    /**
     * Filter which FanEngagements to update
     */
    where?: FanEngagementWhereInput
    /**
     * Limit how many FanEngagements to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FanEngagementIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FanEngagement upsert
   */
  export type FanEngagementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FanEngagement
     */
    select?: FanEngagementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FanEngagement
     */
    omit?: FanEngagementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FanEngagementInclude<ExtArgs> | null
    /**
     * The filter to search for the FanEngagement to update in case it exists.
     */
    where: FanEngagementWhereUniqueInput
    /**
     * In case the FanEngagement found by the `where` argument doesn't exist, create a new FanEngagement with this data.
     */
    create: XOR<FanEngagementCreateInput, FanEngagementUncheckedCreateInput>
    /**
     * In case the FanEngagement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FanEngagementUpdateInput, FanEngagementUncheckedUpdateInput>
  }

  /**
   * FanEngagement delete
   */
  export type FanEngagementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FanEngagement
     */
    select?: FanEngagementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FanEngagement
     */
    omit?: FanEngagementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FanEngagementInclude<ExtArgs> | null
    /**
     * Filter which FanEngagement to delete.
     */
    where: FanEngagementWhereUniqueInput
  }

  /**
   * FanEngagement deleteMany
   */
  export type FanEngagementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FanEngagements to delete
     */
    where?: FanEngagementWhereInput
    /**
     * Limit how many FanEngagements to delete.
     */
    limit?: number
  }

  /**
   * FanEngagement without action
   */
  export type FanEngagementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FanEngagement
     */
    select?: FanEngagementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FanEngagement
     */
    omit?: FanEngagementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FanEngagementInclude<ExtArgs> | null
  }


  /**
   * Model favourite_content
   */

  export type AggregateFavourite_content = {
    _count: Favourite_contentCountAggregateOutputType | null
    _min: Favourite_contentMinAggregateOutputType | null
    _max: Favourite_contentMaxAggregateOutputType | null
  }

  export type Favourite_contentMinAggregateOutputType = {
    id: string | null
    userId: string | null
    contentId: string | null
    productId: string | null
    storeId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type Favourite_contentMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    contentId: string | null
    productId: string | null
    storeId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type Favourite_contentCountAggregateOutputType = {
    id: number
    userId: number
    contentId: number
    productId: number
    storeId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type Favourite_contentMinAggregateInputType = {
    id?: true
    userId?: true
    contentId?: true
    productId?: true
    storeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type Favourite_contentMaxAggregateInputType = {
    id?: true
    userId?: true
    contentId?: true
    productId?: true
    storeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type Favourite_contentCountAggregateInputType = {
    id?: true
    userId?: true
    contentId?: true
    productId?: true
    storeId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type Favourite_contentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which favourite_content to aggregate.
     */
    where?: favourite_contentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of favourite_contents to fetch.
     */
    orderBy?: favourite_contentOrderByWithRelationInput | favourite_contentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: favourite_contentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` favourite_contents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` favourite_contents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned favourite_contents
    **/
    _count?: true | Favourite_contentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Favourite_contentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Favourite_contentMaxAggregateInputType
  }

  export type GetFavourite_contentAggregateType<T extends Favourite_contentAggregateArgs> = {
        [P in keyof T & keyof AggregateFavourite_content]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavourite_content[P]>
      : GetScalarType<T[P], AggregateFavourite_content[P]>
  }




  export type favourite_contentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: favourite_contentWhereInput
    orderBy?: favourite_contentOrderByWithAggregationInput | favourite_contentOrderByWithAggregationInput[]
    by: Favourite_contentScalarFieldEnum[] | Favourite_contentScalarFieldEnum
    having?: favourite_contentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Favourite_contentCountAggregateInputType | true
    _min?: Favourite_contentMinAggregateInputType
    _max?: Favourite_contentMaxAggregateInputType
  }

  export type Favourite_contentGroupByOutputType = {
    id: string
    userId: string
    contentId: string | null
    productId: string | null
    storeId: string | null
    createdAt: Date
    updatedAt: Date
    _count: Favourite_contentCountAggregateOutputType | null
    _min: Favourite_contentMinAggregateOutputType | null
    _max: Favourite_contentMaxAggregateOutputType | null
  }

  type GetFavourite_contentGroupByPayload<T extends favourite_contentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Favourite_contentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Favourite_contentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Favourite_contentGroupByOutputType[P]>
            : GetScalarType<T[P], Favourite_contentGroupByOutputType[P]>
        }
      >
    >


  export type favourite_contentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    contentId?: boolean
    productId?: boolean
    storeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    content?: boolean | favourite_content$contentArgs<ExtArgs>
    product?: boolean | favourite_content$productArgs<ExtArgs>
    store?: boolean | favourite_content$storeArgs<ExtArgs>
  }, ExtArgs["result"]["favourite_content"]>

  export type favourite_contentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    contentId?: boolean
    productId?: boolean
    storeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    content?: boolean | favourite_content$contentArgs<ExtArgs>
    product?: boolean | favourite_content$productArgs<ExtArgs>
    store?: boolean | favourite_content$storeArgs<ExtArgs>
  }, ExtArgs["result"]["favourite_content"]>

  export type favourite_contentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    contentId?: boolean
    productId?: boolean
    storeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    content?: boolean | favourite_content$contentArgs<ExtArgs>
    product?: boolean | favourite_content$productArgs<ExtArgs>
    store?: boolean | favourite_content$storeArgs<ExtArgs>
  }, ExtArgs["result"]["favourite_content"]>

  export type favourite_contentSelectScalar = {
    id?: boolean
    userId?: boolean
    contentId?: boolean
    productId?: boolean
    storeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type favourite_contentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "contentId" | "productId" | "storeId" | "createdAt" | "updatedAt", ExtArgs["result"]["favourite_content"]>
  export type favourite_contentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    content?: boolean | favourite_content$contentArgs<ExtArgs>
    product?: boolean | favourite_content$productArgs<ExtArgs>
    store?: boolean | favourite_content$storeArgs<ExtArgs>
  }
  export type favourite_contentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    content?: boolean | favourite_content$contentArgs<ExtArgs>
    product?: boolean | favourite_content$productArgs<ExtArgs>
    store?: boolean | favourite_content$storeArgs<ExtArgs>
  }
  export type favourite_contentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    content?: boolean | favourite_content$contentArgs<ExtArgs>
    product?: boolean | favourite_content$productArgs<ExtArgs>
    store?: boolean | favourite_content$storeArgs<ExtArgs>
  }

  export type $favourite_contentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "favourite_content"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
      content: Prisma.$contentPayload<ExtArgs> | null
      product: Prisma.$productPayload<ExtArgs> | null
      store: Prisma.$storePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      contentId: string | null
      productId: string | null
      storeId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["favourite_content"]>
    composites: {}
  }

  type favourite_contentGetPayload<S extends boolean | null | undefined | favourite_contentDefaultArgs> = $Result.GetResult<Prisma.$favourite_contentPayload, S>

  type favourite_contentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<favourite_contentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Favourite_contentCountAggregateInputType | true
    }

  export interface favourite_contentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['favourite_content'], meta: { name: 'favourite_content' } }
    /**
     * Find zero or one Favourite_content that matches the filter.
     * @param {favourite_contentFindUniqueArgs} args - Arguments to find a Favourite_content
     * @example
     * // Get one Favourite_content
     * const favourite_content = await prisma.favourite_content.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends favourite_contentFindUniqueArgs>(args: SelectSubset<T, favourite_contentFindUniqueArgs<ExtArgs>>): Prisma__favourite_contentClient<$Result.GetResult<Prisma.$favourite_contentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Favourite_content that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {favourite_contentFindUniqueOrThrowArgs} args - Arguments to find a Favourite_content
     * @example
     * // Get one Favourite_content
     * const favourite_content = await prisma.favourite_content.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends favourite_contentFindUniqueOrThrowArgs>(args: SelectSubset<T, favourite_contentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__favourite_contentClient<$Result.GetResult<Prisma.$favourite_contentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Favourite_content that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favourite_contentFindFirstArgs} args - Arguments to find a Favourite_content
     * @example
     * // Get one Favourite_content
     * const favourite_content = await prisma.favourite_content.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends favourite_contentFindFirstArgs>(args?: SelectSubset<T, favourite_contentFindFirstArgs<ExtArgs>>): Prisma__favourite_contentClient<$Result.GetResult<Prisma.$favourite_contentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Favourite_content that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favourite_contentFindFirstOrThrowArgs} args - Arguments to find a Favourite_content
     * @example
     * // Get one Favourite_content
     * const favourite_content = await prisma.favourite_content.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends favourite_contentFindFirstOrThrowArgs>(args?: SelectSubset<T, favourite_contentFindFirstOrThrowArgs<ExtArgs>>): Prisma__favourite_contentClient<$Result.GetResult<Prisma.$favourite_contentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Favourite_contents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favourite_contentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Favourite_contents
     * const favourite_contents = await prisma.favourite_content.findMany()
     * 
     * // Get first 10 Favourite_contents
     * const favourite_contents = await prisma.favourite_content.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const favourite_contentWithIdOnly = await prisma.favourite_content.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends favourite_contentFindManyArgs>(args?: SelectSubset<T, favourite_contentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$favourite_contentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Favourite_content.
     * @param {favourite_contentCreateArgs} args - Arguments to create a Favourite_content.
     * @example
     * // Create one Favourite_content
     * const Favourite_content = await prisma.favourite_content.create({
     *   data: {
     *     // ... data to create a Favourite_content
     *   }
     * })
     * 
     */
    create<T extends favourite_contentCreateArgs>(args: SelectSubset<T, favourite_contentCreateArgs<ExtArgs>>): Prisma__favourite_contentClient<$Result.GetResult<Prisma.$favourite_contentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Favourite_contents.
     * @param {favourite_contentCreateManyArgs} args - Arguments to create many Favourite_contents.
     * @example
     * // Create many Favourite_contents
     * const favourite_content = await prisma.favourite_content.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends favourite_contentCreateManyArgs>(args?: SelectSubset<T, favourite_contentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Favourite_contents and returns the data saved in the database.
     * @param {favourite_contentCreateManyAndReturnArgs} args - Arguments to create many Favourite_contents.
     * @example
     * // Create many Favourite_contents
     * const favourite_content = await prisma.favourite_content.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Favourite_contents and only return the `id`
     * const favourite_contentWithIdOnly = await prisma.favourite_content.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends favourite_contentCreateManyAndReturnArgs>(args?: SelectSubset<T, favourite_contentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$favourite_contentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Favourite_content.
     * @param {favourite_contentDeleteArgs} args - Arguments to delete one Favourite_content.
     * @example
     * // Delete one Favourite_content
     * const Favourite_content = await prisma.favourite_content.delete({
     *   where: {
     *     // ... filter to delete one Favourite_content
     *   }
     * })
     * 
     */
    delete<T extends favourite_contentDeleteArgs>(args: SelectSubset<T, favourite_contentDeleteArgs<ExtArgs>>): Prisma__favourite_contentClient<$Result.GetResult<Prisma.$favourite_contentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Favourite_content.
     * @param {favourite_contentUpdateArgs} args - Arguments to update one Favourite_content.
     * @example
     * // Update one Favourite_content
     * const favourite_content = await prisma.favourite_content.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends favourite_contentUpdateArgs>(args: SelectSubset<T, favourite_contentUpdateArgs<ExtArgs>>): Prisma__favourite_contentClient<$Result.GetResult<Prisma.$favourite_contentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Favourite_contents.
     * @param {favourite_contentDeleteManyArgs} args - Arguments to filter Favourite_contents to delete.
     * @example
     * // Delete a few Favourite_contents
     * const { count } = await prisma.favourite_content.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends favourite_contentDeleteManyArgs>(args?: SelectSubset<T, favourite_contentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Favourite_contents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favourite_contentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Favourite_contents
     * const favourite_content = await prisma.favourite_content.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends favourite_contentUpdateManyArgs>(args: SelectSubset<T, favourite_contentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Favourite_contents and returns the data updated in the database.
     * @param {favourite_contentUpdateManyAndReturnArgs} args - Arguments to update many Favourite_contents.
     * @example
     * // Update many Favourite_contents
     * const favourite_content = await prisma.favourite_content.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Favourite_contents and only return the `id`
     * const favourite_contentWithIdOnly = await prisma.favourite_content.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends favourite_contentUpdateManyAndReturnArgs>(args: SelectSubset<T, favourite_contentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$favourite_contentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Favourite_content.
     * @param {favourite_contentUpsertArgs} args - Arguments to update or create a Favourite_content.
     * @example
     * // Update or create a Favourite_content
     * const favourite_content = await prisma.favourite_content.upsert({
     *   create: {
     *     // ... data to create a Favourite_content
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Favourite_content we want to update
     *   }
     * })
     */
    upsert<T extends favourite_contentUpsertArgs>(args: SelectSubset<T, favourite_contentUpsertArgs<ExtArgs>>): Prisma__favourite_contentClient<$Result.GetResult<Prisma.$favourite_contentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Favourite_contents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favourite_contentCountArgs} args - Arguments to filter Favourite_contents to count.
     * @example
     * // Count the number of Favourite_contents
     * const count = await prisma.favourite_content.count({
     *   where: {
     *     // ... the filter for the Favourite_contents we want to count
     *   }
     * })
    **/
    count<T extends favourite_contentCountArgs>(
      args?: Subset<T, favourite_contentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Favourite_contentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Favourite_content.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Favourite_contentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Favourite_contentAggregateArgs>(args: Subset<T, Favourite_contentAggregateArgs>): Prisma.PrismaPromise<GetFavourite_contentAggregateType<T>>

    /**
     * Group by Favourite_content.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favourite_contentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends favourite_contentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: favourite_contentGroupByArgs['orderBy'] }
        : { orderBy?: favourite_contentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, favourite_contentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavourite_contentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the favourite_content model
   */
  readonly fields: favourite_contentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for favourite_content.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__favourite_contentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    content<T extends favourite_content$contentArgs<ExtArgs> = {}>(args?: Subset<T, favourite_content$contentArgs<ExtArgs>>): Prisma__contentClient<$Result.GetResult<Prisma.$contentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    product<T extends favourite_content$productArgs<ExtArgs> = {}>(args?: Subset<T, favourite_content$productArgs<ExtArgs>>): Prisma__productClient<$Result.GetResult<Prisma.$productPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    store<T extends favourite_content$storeArgs<ExtArgs> = {}>(args?: Subset<T, favourite_content$storeArgs<ExtArgs>>): Prisma__storeClient<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the favourite_content model
   */
  interface favourite_contentFieldRefs {
    readonly id: FieldRef<"favourite_content", 'String'>
    readonly userId: FieldRef<"favourite_content", 'String'>
    readonly contentId: FieldRef<"favourite_content", 'String'>
    readonly productId: FieldRef<"favourite_content", 'String'>
    readonly storeId: FieldRef<"favourite_content", 'String'>
    readonly createdAt: FieldRef<"favourite_content", 'DateTime'>
    readonly updatedAt: FieldRef<"favourite_content", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * favourite_content findUnique
   */
  export type favourite_contentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favourite_content
     */
    select?: favourite_contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the favourite_content
     */
    omit?: favourite_contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favourite_contentInclude<ExtArgs> | null
    /**
     * Filter, which favourite_content to fetch.
     */
    where: favourite_contentWhereUniqueInput
  }

  /**
   * favourite_content findUniqueOrThrow
   */
  export type favourite_contentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favourite_content
     */
    select?: favourite_contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the favourite_content
     */
    omit?: favourite_contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favourite_contentInclude<ExtArgs> | null
    /**
     * Filter, which favourite_content to fetch.
     */
    where: favourite_contentWhereUniqueInput
  }

  /**
   * favourite_content findFirst
   */
  export type favourite_contentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favourite_content
     */
    select?: favourite_contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the favourite_content
     */
    omit?: favourite_contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favourite_contentInclude<ExtArgs> | null
    /**
     * Filter, which favourite_content to fetch.
     */
    where?: favourite_contentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of favourite_contents to fetch.
     */
    orderBy?: favourite_contentOrderByWithRelationInput | favourite_contentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for favourite_contents.
     */
    cursor?: favourite_contentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` favourite_contents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` favourite_contents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of favourite_contents.
     */
    distinct?: Favourite_contentScalarFieldEnum | Favourite_contentScalarFieldEnum[]
  }

  /**
   * favourite_content findFirstOrThrow
   */
  export type favourite_contentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favourite_content
     */
    select?: favourite_contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the favourite_content
     */
    omit?: favourite_contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favourite_contentInclude<ExtArgs> | null
    /**
     * Filter, which favourite_content to fetch.
     */
    where?: favourite_contentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of favourite_contents to fetch.
     */
    orderBy?: favourite_contentOrderByWithRelationInput | favourite_contentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for favourite_contents.
     */
    cursor?: favourite_contentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` favourite_contents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` favourite_contents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of favourite_contents.
     */
    distinct?: Favourite_contentScalarFieldEnum | Favourite_contentScalarFieldEnum[]
  }

  /**
   * favourite_content findMany
   */
  export type favourite_contentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favourite_content
     */
    select?: favourite_contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the favourite_content
     */
    omit?: favourite_contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favourite_contentInclude<ExtArgs> | null
    /**
     * Filter, which favourite_contents to fetch.
     */
    where?: favourite_contentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of favourite_contents to fetch.
     */
    orderBy?: favourite_contentOrderByWithRelationInput | favourite_contentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing favourite_contents.
     */
    cursor?: favourite_contentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` favourite_contents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` favourite_contents.
     */
    skip?: number
    distinct?: Favourite_contentScalarFieldEnum | Favourite_contentScalarFieldEnum[]
  }

  /**
   * favourite_content create
   */
  export type favourite_contentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favourite_content
     */
    select?: favourite_contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the favourite_content
     */
    omit?: favourite_contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favourite_contentInclude<ExtArgs> | null
    /**
     * The data needed to create a favourite_content.
     */
    data: XOR<favourite_contentCreateInput, favourite_contentUncheckedCreateInput>
  }

  /**
   * favourite_content createMany
   */
  export type favourite_contentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many favourite_contents.
     */
    data: favourite_contentCreateManyInput | favourite_contentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * favourite_content createManyAndReturn
   */
  export type favourite_contentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favourite_content
     */
    select?: favourite_contentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the favourite_content
     */
    omit?: favourite_contentOmit<ExtArgs> | null
    /**
     * The data used to create many favourite_contents.
     */
    data: favourite_contentCreateManyInput | favourite_contentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favourite_contentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * favourite_content update
   */
  export type favourite_contentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favourite_content
     */
    select?: favourite_contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the favourite_content
     */
    omit?: favourite_contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favourite_contentInclude<ExtArgs> | null
    /**
     * The data needed to update a favourite_content.
     */
    data: XOR<favourite_contentUpdateInput, favourite_contentUncheckedUpdateInput>
    /**
     * Choose, which favourite_content to update.
     */
    where: favourite_contentWhereUniqueInput
  }

  /**
   * favourite_content updateMany
   */
  export type favourite_contentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update favourite_contents.
     */
    data: XOR<favourite_contentUpdateManyMutationInput, favourite_contentUncheckedUpdateManyInput>
    /**
     * Filter which favourite_contents to update
     */
    where?: favourite_contentWhereInput
    /**
     * Limit how many favourite_contents to update.
     */
    limit?: number
  }

  /**
   * favourite_content updateManyAndReturn
   */
  export type favourite_contentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favourite_content
     */
    select?: favourite_contentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the favourite_content
     */
    omit?: favourite_contentOmit<ExtArgs> | null
    /**
     * The data used to update favourite_contents.
     */
    data: XOR<favourite_contentUpdateManyMutationInput, favourite_contentUncheckedUpdateManyInput>
    /**
     * Filter which favourite_contents to update
     */
    where?: favourite_contentWhereInput
    /**
     * Limit how many favourite_contents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favourite_contentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * favourite_content upsert
   */
  export type favourite_contentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favourite_content
     */
    select?: favourite_contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the favourite_content
     */
    omit?: favourite_contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favourite_contentInclude<ExtArgs> | null
    /**
     * The filter to search for the favourite_content to update in case it exists.
     */
    where: favourite_contentWhereUniqueInput
    /**
     * In case the favourite_content found by the `where` argument doesn't exist, create a new favourite_content with this data.
     */
    create: XOR<favourite_contentCreateInput, favourite_contentUncheckedCreateInput>
    /**
     * In case the favourite_content was found with the provided `where` argument, update it with this data.
     */
    update: XOR<favourite_contentUpdateInput, favourite_contentUncheckedUpdateInput>
  }

  /**
   * favourite_content delete
   */
  export type favourite_contentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favourite_content
     */
    select?: favourite_contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the favourite_content
     */
    omit?: favourite_contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favourite_contentInclude<ExtArgs> | null
    /**
     * Filter which favourite_content to delete.
     */
    where: favourite_contentWhereUniqueInput
  }

  /**
   * favourite_content deleteMany
   */
  export type favourite_contentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which favourite_contents to delete
     */
    where?: favourite_contentWhereInput
    /**
     * Limit how many favourite_contents to delete.
     */
    limit?: number
  }

  /**
   * favourite_content.content
   */
  export type favourite_content$contentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the content
     */
    select?: contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the content
     */
    omit?: contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contentInclude<ExtArgs> | null
    where?: contentWhereInput
  }

  /**
   * favourite_content.product
   */
  export type favourite_content$productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the product
     */
    select?: productSelect<ExtArgs> | null
    /**
     * Omit specific fields from the product
     */
    omit?: productOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productInclude<ExtArgs> | null
    where?: productWhereInput
  }

  /**
   * favourite_content.store
   */
  export type favourite_content$storeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeInclude<ExtArgs> | null
    where?: storeWhereInput
  }

  /**
   * favourite_content without action
   */
  export type favourite_contentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favourite_content
     */
    select?: favourite_contentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the favourite_content
     */
    omit?: favourite_contentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favourite_contentInclude<ExtArgs> | null
  }


  /**
   * Model acknowledgement
   */

  export type AggregateAcknowledgement = {
    _count: AcknowledgementCountAggregateOutputType | null
    _min: AcknowledgementMinAggregateOutputType | null
    _max: AcknowledgementMaxAggregateOutputType | null
  }

  export type AcknowledgementMinAggregateOutputType = {
    id: string | null
    type: string | null
    interval: string | null
    userId: string | null
    expiresOn: Date | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type AcknowledgementMaxAggregateOutputType = {
    id: string | null
    type: string | null
    interval: string | null
    userId: string | null
    expiresOn: Date | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type AcknowledgementCountAggregateOutputType = {
    id: number
    type: number
    interval: number
    userId: number
    expiresOn: number
    createdAt: number
    updateAt: number
    _all: number
  }


  export type AcknowledgementMinAggregateInputType = {
    id?: true
    type?: true
    interval?: true
    userId?: true
    expiresOn?: true
    createdAt?: true
    updateAt?: true
  }

  export type AcknowledgementMaxAggregateInputType = {
    id?: true
    type?: true
    interval?: true
    userId?: true
    expiresOn?: true
    createdAt?: true
    updateAt?: true
  }

  export type AcknowledgementCountAggregateInputType = {
    id?: true
    type?: true
    interval?: true
    userId?: true
    expiresOn?: true
    createdAt?: true
    updateAt?: true
    _all?: true
  }

  export type AcknowledgementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which acknowledgement to aggregate.
     */
    where?: acknowledgementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of acknowledgements to fetch.
     */
    orderBy?: acknowledgementOrderByWithRelationInput | acknowledgementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: acknowledgementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` acknowledgements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` acknowledgements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned acknowledgements
    **/
    _count?: true | AcknowledgementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AcknowledgementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AcknowledgementMaxAggregateInputType
  }

  export type GetAcknowledgementAggregateType<T extends AcknowledgementAggregateArgs> = {
        [P in keyof T & keyof AggregateAcknowledgement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAcknowledgement[P]>
      : GetScalarType<T[P], AggregateAcknowledgement[P]>
  }




  export type acknowledgementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: acknowledgementWhereInput
    orderBy?: acknowledgementOrderByWithAggregationInput | acknowledgementOrderByWithAggregationInput[]
    by: AcknowledgementScalarFieldEnum[] | AcknowledgementScalarFieldEnum
    having?: acknowledgementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AcknowledgementCountAggregateInputType | true
    _min?: AcknowledgementMinAggregateInputType
    _max?: AcknowledgementMaxAggregateInputType
  }

  export type AcknowledgementGroupByOutputType = {
    id: string
    type: string
    interval: string
    userId: string
    expiresOn: Date
    createdAt: Date
    updateAt: Date
    _count: AcknowledgementCountAggregateOutputType | null
    _min: AcknowledgementMinAggregateOutputType | null
    _max: AcknowledgementMaxAggregateOutputType | null
  }

  type GetAcknowledgementGroupByPayload<T extends acknowledgementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AcknowledgementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AcknowledgementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AcknowledgementGroupByOutputType[P]>
            : GetScalarType<T[P], AcknowledgementGroupByOutputType[P]>
        }
      >
    >


  export type acknowledgementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    interval?: boolean
    userId?: boolean
    expiresOn?: boolean
    createdAt?: boolean
    updateAt?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["acknowledgement"]>

  export type acknowledgementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    interval?: boolean
    userId?: boolean
    expiresOn?: boolean
    createdAt?: boolean
    updateAt?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["acknowledgement"]>

  export type acknowledgementSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    interval?: boolean
    userId?: boolean
    expiresOn?: boolean
    createdAt?: boolean
    updateAt?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["acknowledgement"]>

  export type acknowledgementSelectScalar = {
    id?: boolean
    type?: boolean
    interval?: boolean
    userId?: boolean
    expiresOn?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }

  export type acknowledgementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "interval" | "userId" | "expiresOn" | "createdAt" | "updateAt", ExtArgs["result"]["acknowledgement"]>
  export type acknowledgementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
  }
  export type acknowledgementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
  }
  export type acknowledgementIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $acknowledgementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "acknowledgement"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      interval: string
      userId: string
      expiresOn: Date
      createdAt: Date
      updateAt: Date
    }, ExtArgs["result"]["acknowledgement"]>
    composites: {}
  }

  type acknowledgementGetPayload<S extends boolean | null | undefined | acknowledgementDefaultArgs> = $Result.GetResult<Prisma.$acknowledgementPayload, S>

  type acknowledgementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<acknowledgementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AcknowledgementCountAggregateInputType | true
    }

  export interface acknowledgementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['acknowledgement'], meta: { name: 'acknowledgement' } }
    /**
     * Find zero or one Acknowledgement that matches the filter.
     * @param {acknowledgementFindUniqueArgs} args - Arguments to find a Acknowledgement
     * @example
     * // Get one Acknowledgement
     * const acknowledgement = await prisma.acknowledgement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends acknowledgementFindUniqueArgs>(args: SelectSubset<T, acknowledgementFindUniqueArgs<ExtArgs>>): Prisma__acknowledgementClient<$Result.GetResult<Prisma.$acknowledgementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Acknowledgement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {acknowledgementFindUniqueOrThrowArgs} args - Arguments to find a Acknowledgement
     * @example
     * // Get one Acknowledgement
     * const acknowledgement = await prisma.acknowledgement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends acknowledgementFindUniqueOrThrowArgs>(args: SelectSubset<T, acknowledgementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__acknowledgementClient<$Result.GetResult<Prisma.$acknowledgementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Acknowledgement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {acknowledgementFindFirstArgs} args - Arguments to find a Acknowledgement
     * @example
     * // Get one Acknowledgement
     * const acknowledgement = await prisma.acknowledgement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends acknowledgementFindFirstArgs>(args?: SelectSubset<T, acknowledgementFindFirstArgs<ExtArgs>>): Prisma__acknowledgementClient<$Result.GetResult<Prisma.$acknowledgementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Acknowledgement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {acknowledgementFindFirstOrThrowArgs} args - Arguments to find a Acknowledgement
     * @example
     * // Get one Acknowledgement
     * const acknowledgement = await prisma.acknowledgement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends acknowledgementFindFirstOrThrowArgs>(args?: SelectSubset<T, acknowledgementFindFirstOrThrowArgs<ExtArgs>>): Prisma__acknowledgementClient<$Result.GetResult<Prisma.$acknowledgementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Acknowledgements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {acknowledgementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Acknowledgements
     * const acknowledgements = await prisma.acknowledgement.findMany()
     * 
     * // Get first 10 Acknowledgements
     * const acknowledgements = await prisma.acknowledgement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const acknowledgementWithIdOnly = await prisma.acknowledgement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends acknowledgementFindManyArgs>(args?: SelectSubset<T, acknowledgementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$acknowledgementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Acknowledgement.
     * @param {acknowledgementCreateArgs} args - Arguments to create a Acknowledgement.
     * @example
     * // Create one Acknowledgement
     * const Acknowledgement = await prisma.acknowledgement.create({
     *   data: {
     *     // ... data to create a Acknowledgement
     *   }
     * })
     * 
     */
    create<T extends acknowledgementCreateArgs>(args: SelectSubset<T, acknowledgementCreateArgs<ExtArgs>>): Prisma__acknowledgementClient<$Result.GetResult<Prisma.$acknowledgementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Acknowledgements.
     * @param {acknowledgementCreateManyArgs} args - Arguments to create many Acknowledgements.
     * @example
     * // Create many Acknowledgements
     * const acknowledgement = await prisma.acknowledgement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends acknowledgementCreateManyArgs>(args?: SelectSubset<T, acknowledgementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Acknowledgements and returns the data saved in the database.
     * @param {acknowledgementCreateManyAndReturnArgs} args - Arguments to create many Acknowledgements.
     * @example
     * // Create many Acknowledgements
     * const acknowledgement = await prisma.acknowledgement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Acknowledgements and only return the `id`
     * const acknowledgementWithIdOnly = await prisma.acknowledgement.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends acknowledgementCreateManyAndReturnArgs>(args?: SelectSubset<T, acknowledgementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$acknowledgementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Acknowledgement.
     * @param {acknowledgementDeleteArgs} args - Arguments to delete one Acknowledgement.
     * @example
     * // Delete one Acknowledgement
     * const Acknowledgement = await prisma.acknowledgement.delete({
     *   where: {
     *     // ... filter to delete one Acknowledgement
     *   }
     * })
     * 
     */
    delete<T extends acknowledgementDeleteArgs>(args: SelectSubset<T, acknowledgementDeleteArgs<ExtArgs>>): Prisma__acknowledgementClient<$Result.GetResult<Prisma.$acknowledgementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Acknowledgement.
     * @param {acknowledgementUpdateArgs} args - Arguments to update one Acknowledgement.
     * @example
     * // Update one Acknowledgement
     * const acknowledgement = await prisma.acknowledgement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends acknowledgementUpdateArgs>(args: SelectSubset<T, acknowledgementUpdateArgs<ExtArgs>>): Prisma__acknowledgementClient<$Result.GetResult<Prisma.$acknowledgementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Acknowledgements.
     * @param {acknowledgementDeleteManyArgs} args - Arguments to filter Acknowledgements to delete.
     * @example
     * // Delete a few Acknowledgements
     * const { count } = await prisma.acknowledgement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends acknowledgementDeleteManyArgs>(args?: SelectSubset<T, acknowledgementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Acknowledgements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {acknowledgementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Acknowledgements
     * const acknowledgement = await prisma.acknowledgement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends acknowledgementUpdateManyArgs>(args: SelectSubset<T, acknowledgementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Acknowledgements and returns the data updated in the database.
     * @param {acknowledgementUpdateManyAndReturnArgs} args - Arguments to update many Acknowledgements.
     * @example
     * // Update many Acknowledgements
     * const acknowledgement = await prisma.acknowledgement.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Acknowledgements and only return the `id`
     * const acknowledgementWithIdOnly = await prisma.acknowledgement.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends acknowledgementUpdateManyAndReturnArgs>(args: SelectSubset<T, acknowledgementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$acknowledgementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Acknowledgement.
     * @param {acknowledgementUpsertArgs} args - Arguments to update or create a Acknowledgement.
     * @example
     * // Update or create a Acknowledgement
     * const acknowledgement = await prisma.acknowledgement.upsert({
     *   create: {
     *     // ... data to create a Acknowledgement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Acknowledgement we want to update
     *   }
     * })
     */
    upsert<T extends acknowledgementUpsertArgs>(args: SelectSubset<T, acknowledgementUpsertArgs<ExtArgs>>): Prisma__acknowledgementClient<$Result.GetResult<Prisma.$acknowledgementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Acknowledgements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {acknowledgementCountArgs} args - Arguments to filter Acknowledgements to count.
     * @example
     * // Count the number of Acknowledgements
     * const count = await prisma.acknowledgement.count({
     *   where: {
     *     // ... the filter for the Acknowledgements we want to count
     *   }
     * })
    **/
    count<T extends acknowledgementCountArgs>(
      args?: Subset<T, acknowledgementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AcknowledgementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Acknowledgement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcknowledgementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AcknowledgementAggregateArgs>(args: Subset<T, AcknowledgementAggregateArgs>): Prisma.PrismaPromise<GetAcknowledgementAggregateType<T>>

    /**
     * Group by Acknowledgement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {acknowledgementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends acknowledgementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: acknowledgementGroupByArgs['orderBy'] }
        : { orderBy?: acknowledgementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, acknowledgementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAcknowledgementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the acknowledgement model
   */
  readonly fields: acknowledgementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for acknowledgement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__acknowledgementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the acknowledgement model
   */
  interface acknowledgementFieldRefs {
    readonly id: FieldRef<"acknowledgement", 'String'>
    readonly type: FieldRef<"acknowledgement", 'String'>
    readonly interval: FieldRef<"acknowledgement", 'String'>
    readonly userId: FieldRef<"acknowledgement", 'String'>
    readonly expiresOn: FieldRef<"acknowledgement", 'DateTime'>
    readonly createdAt: FieldRef<"acknowledgement", 'DateTime'>
    readonly updateAt: FieldRef<"acknowledgement", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * acknowledgement findUnique
   */
  export type acknowledgementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the acknowledgement
     */
    select?: acknowledgementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the acknowledgement
     */
    omit?: acknowledgementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: acknowledgementInclude<ExtArgs> | null
    /**
     * Filter, which acknowledgement to fetch.
     */
    where: acknowledgementWhereUniqueInput
  }

  /**
   * acknowledgement findUniqueOrThrow
   */
  export type acknowledgementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the acknowledgement
     */
    select?: acknowledgementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the acknowledgement
     */
    omit?: acknowledgementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: acknowledgementInclude<ExtArgs> | null
    /**
     * Filter, which acknowledgement to fetch.
     */
    where: acknowledgementWhereUniqueInput
  }

  /**
   * acknowledgement findFirst
   */
  export type acknowledgementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the acknowledgement
     */
    select?: acknowledgementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the acknowledgement
     */
    omit?: acknowledgementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: acknowledgementInclude<ExtArgs> | null
    /**
     * Filter, which acknowledgement to fetch.
     */
    where?: acknowledgementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of acknowledgements to fetch.
     */
    orderBy?: acknowledgementOrderByWithRelationInput | acknowledgementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for acknowledgements.
     */
    cursor?: acknowledgementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` acknowledgements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` acknowledgements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of acknowledgements.
     */
    distinct?: AcknowledgementScalarFieldEnum | AcknowledgementScalarFieldEnum[]
  }

  /**
   * acknowledgement findFirstOrThrow
   */
  export type acknowledgementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the acknowledgement
     */
    select?: acknowledgementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the acknowledgement
     */
    omit?: acknowledgementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: acknowledgementInclude<ExtArgs> | null
    /**
     * Filter, which acknowledgement to fetch.
     */
    where?: acknowledgementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of acknowledgements to fetch.
     */
    orderBy?: acknowledgementOrderByWithRelationInput | acknowledgementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for acknowledgements.
     */
    cursor?: acknowledgementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` acknowledgements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` acknowledgements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of acknowledgements.
     */
    distinct?: AcknowledgementScalarFieldEnum | AcknowledgementScalarFieldEnum[]
  }

  /**
   * acknowledgement findMany
   */
  export type acknowledgementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the acknowledgement
     */
    select?: acknowledgementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the acknowledgement
     */
    omit?: acknowledgementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: acknowledgementInclude<ExtArgs> | null
    /**
     * Filter, which acknowledgements to fetch.
     */
    where?: acknowledgementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of acknowledgements to fetch.
     */
    orderBy?: acknowledgementOrderByWithRelationInput | acknowledgementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing acknowledgements.
     */
    cursor?: acknowledgementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` acknowledgements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` acknowledgements.
     */
    skip?: number
    distinct?: AcknowledgementScalarFieldEnum | AcknowledgementScalarFieldEnum[]
  }

  /**
   * acknowledgement create
   */
  export type acknowledgementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the acknowledgement
     */
    select?: acknowledgementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the acknowledgement
     */
    omit?: acknowledgementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: acknowledgementInclude<ExtArgs> | null
    /**
     * The data needed to create a acknowledgement.
     */
    data: XOR<acknowledgementCreateInput, acknowledgementUncheckedCreateInput>
  }

  /**
   * acknowledgement createMany
   */
  export type acknowledgementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many acknowledgements.
     */
    data: acknowledgementCreateManyInput | acknowledgementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * acknowledgement createManyAndReturn
   */
  export type acknowledgementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the acknowledgement
     */
    select?: acknowledgementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the acknowledgement
     */
    omit?: acknowledgementOmit<ExtArgs> | null
    /**
     * The data used to create many acknowledgements.
     */
    data: acknowledgementCreateManyInput | acknowledgementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: acknowledgementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * acknowledgement update
   */
  export type acknowledgementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the acknowledgement
     */
    select?: acknowledgementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the acknowledgement
     */
    omit?: acknowledgementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: acknowledgementInclude<ExtArgs> | null
    /**
     * The data needed to update a acknowledgement.
     */
    data: XOR<acknowledgementUpdateInput, acknowledgementUncheckedUpdateInput>
    /**
     * Choose, which acknowledgement to update.
     */
    where: acknowledgementWhereUniqueInput
  }

  /**
   * acknowledgement updateMany
   */
  export type acknowledgementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update acknowledgements.
     */
    data: XOR<acknowledgementUpdateManyMutationInput, acknowledgementUncheckedUpdateManyInput>
    /**
     * Filter which acknowledgements to update
     */
    where?: acknowledgementWhereInput
    /**
     * Limit how many acknowledgements to update.
     */
    limit?: number
  }

  /**
   * acknowledgement updateManyAndReturn
   */
  export type acknowledgementUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the acknowledgement
     */
    select?: acknowledgementSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the acknowledgement
     */
    omit?: acknowledgementOmit<ExtArgs> | null
    /**
     * The data used to update acknowledgements.
     */
    data: XOR<acknowledgementUpdateManyMutationInput, acknowledgementUncheckedUpdateManyInput>
    /**
     * Filter which acknowledgements to update
     */
    where?: acknowledgementWhereInput
    /**
     * Limit how many acknowledgements to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: acknowledgementIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * acknowledgement upsert
   */
  export type acknowledgementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the acknowledgement
     */
    select?: acknowledgementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the acknowledgement
     */
    omit?: acknowledgementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: acknowledgementInclude<ExtArgs> | null
    /**
     * The filter to search for the acknowledgement to update in case it exists.
     */
    where: acknowledgementWhereUniqueInput
    /**
     * In case the acknowledgement found by the `where` argument doesn't exist, create a new acknowledgement with this data.
     */
    create: XOR<acknowledgementCreateInput, acknowledgementUncheckedCreateInput>
    /**
     * In case the acknowledgement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<acknowledgementUpdateInput, acknowledgementUncheckedUpdateInput>
  }

  /**
   * acknowledgement delete
   */
  export type acknowledgementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the acknowledgement
     */
    select?: acknowledgementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the acknowledgement
     */
    omit?: acknowledgementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: acknowledgementInclude<ExtArgs> | null
    /**
     * Filter which acknowledgement to delete.
     */
    where: acknowledgementWhereUniqueInput
  }

  /**
   * acknowledgement deleteMany
   */
  export type acknowledgementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which acknowledgements to delete
     */
    where?: acknowledgementWhereInput
    /**
     * Limit how many acknowledgements to delete.
     */
    limit?: number
  }

  /**
   * acknowledgement without action
   */
  export type acknowledgementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the acknowledgement
     */
    select?: acknowledgementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the acknowledgement
     */
    omit?: acknowledgementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: acknowledgementInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    fullname: 'fullname',
    email: 'email',
    password: 'password',
    profile_image_url: 'profile_image_url',
    uploadedProfileImage: 'uploadedProfileImage',
    category: 'category',
    imagePublicID: 'imagePublicID',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    username: 'username'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ContentScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    mediaUrl: 'mediaUrl',
    thumbnailUrl: 'thumbnailUrl',
    isPublished: 'isPublished',
    category: 'category',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    storeId: 'storeId',
    artistId: 'artistId'
  };

  export type ContentScalarFieldEnum = (typeof ContentScalarFieldEnum)[keyof typeof ContentScalarFieldEnum]


  export const StoreScalarFieldEnum: {
    id: 'id',
    storeName: 'storeName',
    storeLogo: 'storeLogo',
    imagePublicID: 'imagePublicID',
    storeOwnerID: 'storeOwnerID',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type StoreScalarFieldEnum = (typeof StoreScalarFieldEnum)[keyof typeof StoreScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    productName: 'productName',
    description: 'description',
    productImageID: 'productImageID',
    quantity: 'quantity',
    price: 'price',
    rating: 'rating',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    storeId: 'storeId'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    userID: 'userID',
    productID: 'productID',
    review: 'review',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const RatingScalarFieldEnum: {
    id: 'id',
    userID: 'userID',
    productID: 'productID',
    rating: 'rating',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RatingScalarFieldEnum = (typeof RatingScalarFieldEnum)[keyof typeof RatingScalarFieldEnum]


  export const ProductImageScalarFieldEnum: {
    id: 'id',
    productImage: 'productImage',
    imagePublicID: 'imagePublicID',
    productImageID: 'productImageID',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProductImageScalarFieldEnum = (typeof ProductImageScalarFieldEnum)[keyof typeof ProductImageScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    userID: 'userID',
    storeID: 'storeID',
    amount: 'amount',
    paymentMethod: 'paymentMethod',
    paymentStatus: 'paymentStatus',
    type: 'type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    orderId: 'orderId',
    paymentRef: 'paymentRef'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    userID: 'userID',
    storeID: 'storeID',
    shippingAddress: 'shippingAddress',
    amount: 'amount',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const OrderProductsScalarFieldEnum: {
    id: 'id',
    orderID: 'orderID',
    productID: 'productID',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrderProductsScalarFieldEnum = (typeof OrderProductsScalarFieldEnum)[keyof typeof OrderProductsScalarFieldEnum]


  export const SubscriptionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    contentId: 'contentId',
    paymentId: 'paymentId',
    startDate: 'startDate',
    endDate: 'endDate',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SubscriptionScalarFieldEnum = (typeof SubscriptionScalarFieldEnum)[keyof typeof SubscriptionScalarFieldEnum]


  export const FanEngagementScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    contentId: 'contentId',
    action: 'action',
    value: 'value',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FanEngagementScalarFieldEnum = (typeof FanEngagementScalarFieldEnum)[keyof typeof FanEngagementScalarFieldEnum]


  export const Favourite_contentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    contentId: 'contentId',
    productId: 'productId',
    storeId: 'storeId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type Favourite_contentScalarFieldEnum = (typeof Favourite_contentScalarFieldEnum)[keyof typeof Favourite_contentScalarFieldEnum]


  export const AcknowledgementScalarFieldEnum: {
    id: 'id',
    type: 'type',
    interval: 'interval',
    userId: 'userId',
    expiresOn: 'expiresOn',
    createdAt: 'createdAt',
    updateAt: 'updateAt'
  };

  export type AcknowledgementScalarFieldEnum = (typeof AcknowledgementScalarFieldEnum)[keyof typeof AcknowledgementScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    id?: StringFilter<"user"> | string
    fullname?: StringFilter<"user"> | string
    email?: StringFilter<"user"> | string
    password?: StringNullableFilter<"user"> | string | null
    profile_image_url?: StringNullableFilter<"user"> | string | null
    uploadedProfileImage?: StringNullableFilter<"user"> | string | null
    category?: StringNullableFilter<"user"> | string | null
    imagePublicID?: StringNullableFilter<"user"> | string | null
    role?: StringNullableFilter<"user"> | string | null
    createdAt?: DateTimeFilter<"user"> | Date | string
    updatedAt?: DateTimeFilter<"user"> | Date | string
    username?: StringFilter<"user"> | string
    acknowledgements?: AcknowledgementListRelationFilter
    order?: OrderListRelationFilter
    payment?: PaymentListRelationFilter
    content?: ContentListRelationFilter
    store?: StoreListRelationFilter
    review?: ReviewListRelationFilter
    rating?: RatingListRelationFilter
    subscription?: SubscriptionListRelationFilter
    FanEngagement?: FanEngagementListRelationFilter
    favourite_content?: Favourite_contentListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    fullname?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    profile_image_url?: SortOrderInput | SortOrder
    uploadedProfileImage?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    imagePublicID?: SortOrderInput | SortOrder
    role?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    username?: SortOrder
    acknowledgements?: acknowledgementOrderByRelationAggregateInput
    order?: orderOrderByRelationAggregateInput
    payment?: paymentOrderByRelationAggregateInput
    content?: contentOrderByRelationAggregateInput
    store?: storeOrderByRelationAggregateInput
    review?: reviewOrderByRelationAggregateInput
    rating?: ratingOrderByRelationAggregateInput
    subscription?: subscriptionOrderByRelationAggregateInput
    FanEngagement?: FanEngagementOrderByRelationAggregateInput
    favourite_content?: favourite_contentOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    fullname?: StringFilter<"user"> | string
    password?: StringNullableFilter<"user"> | string | null
    profile_image_url?: StringNullableFilter<"user"> | string | null
    uploadedProfileImage?: StringNullableFilter<"user"> | string | null
    category?: StringNullableFilter<"user"> | string | null
    imagePublicID?: StringNullableFilter<"user"> | string | null
    role?: StringNullableFilter<"user"> | string | null
    createdAt?: DateTimeFilter<"user"> | Date | string
    updatedAt?: DateTimeFilter<"user"> | Date | string
    username?: StringFilter<"user"> | string
    acknowledgements?: AcknowledgementListRelationFilter
    order?: OrderListRelationFilter
    payment?: PaymentListRelationFilter
    content?: ContentListRelationFilter
    store?: StoreListRelationFilter
    review?: ReviewListRelationFilter
    rating?: RatingListRelationFilter
    subscription?: SubscriptionListRelationFilter
    FanEngagement?: FanEngagementListRelationFilter
    favourite_content?: Favourite_contentListRelationFilter
  }, "id" | "email">

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    fullname?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    profile_image_url?: SortOrderInput | SortOrder
    uploadedProfileImage?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    imagePublicID?: SortOrderInput | SortOrder
    role?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    username?: SortOrder
    _count?: userCountOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"user"> | string
    fullname?: StringWithAggregatesFilter<"user"> | string
    email?: StringWithAggregatesFilter<"user"> | string
    password?: StringNullableWithAggregatesFilter<"user"> | string | null
    profile_image_url?: StringNullableWithAggregatesFilter<"user"> | string | null
    uploadedProfileImage?: StringNullableWithAggregatesFilter<"user"> | string | null
    category?: StringNullableWithAggregatesFilter<"user"> | string | null
    imagePublicID?: StringNullableWithAggregatesFilter<"user"> | string | null
    role?: StringNullableWithAggregatesFilter<"user"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"user"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"user"> | Date | string
    username?: StringWithAggregatesFilter<"user"> | string
  }

  export type contentWhereInput = {
    AND?: contentWhereInput | contentWhereInput[]
    OR?: contentWhereInput[]
    NOT?: contentWhereInput | contentWhereInput[]
    id?: StringFilter<"content"> | string
    title?: StringFilter<"content"> | string
    description?: StringNullableFilter<"content"> | string | null
    mediaUrl?: StringFilter<"content"> | string
    thumbnailUrl?: StringNullableFilter<"content"> | string | null
    isPublished?: BoolFilter<"content"> | boolean
    category?: StringNullableFilter<"content"> | string | null
    createdAt?: DateTimeFilter<"content"> | Date | string
    updatedAt?: DateTimeFilter<"content"> | Date | string
    storeId?: StringFilter<"content"> | string
    artistId?: StringFilter<"content"> | string
    artist?: XOR<UserScalarRelationFilter, userWhereInput>
    store?: XOR<StoreScalarRelationFilter, storeWhereInput>
    subscription?: SubscriptionListRelationFilter
    FanEngagement?: FanEngagementListRelationFilter
    favourite_content?: Favourite_contentListRelationFilter
  }

  export type contentOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    mediaUrl?: SortOrder
    thumbnailUrl?: SortOrderInput | SortOrder
    isPublished?: SortOrder
    category?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    storeId?: SortOrder
    artistId?: SortOrder
    artist?: userOrderByWithRelationInput
    store?: storeOrderByWithRelationInput
    subscription?: subscriptionOrderByRelationAggregateInput
    FanEngagement?: FanEngagementOrderByRelationAggregateInput
    favourite_content?: favourite_contentOrderByRelationAggregateInput
  }

  export type contentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: contentWhereInput | contentWhereInput[]
    OR?: contentWhereInput[]
    NOT?: contentWhereInput | contentWhereInput[]
    title?: StringFilter<"content"> | string
    description?: StringNullableFilter<"content"> | string | null
    mediaUrl?: StringFilter<"content"> | string
    thumbnailUrl?: StringNullableFilter<"content"> | string | null
    isPublished?: BoolFilter<"content"> | boolean
    category?: StringNullableFilter<"content"> | string | null
    createdAt?: DateTimeFilter<"content"> | Date | string
    updatedAt?: DateTimeFilter<"content"> | Date | string
    storeId?: StringFilter<"content"> | string
    artistId?: StringFilter<"content"> | string
    artist?: XOR<UserScalarRelationFilter, userWhereInput>
    store?: XOR<StoreScalarRelationFilter, storeWhereInput>
    subscription?: SubscriptionListRelationFilter
    FanEngagement?: FanEngagementListRelationFilter
    favourite_content?: Favourite_contentListRelationFilter
  }, "id">

  export type contentOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    mediaUrl?: SortOrder
    thumbnailUrl?: SortOrderInput | SortOrder
    isPublished?: SortOrder
    category?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    storeId?: SortOrder
    artistId?: SortOrder
    _count?: contentCountOrderByAggregateInput
    _max?: contentMaxOrderByAggregateInput
    _min?: contentMinOrderByAggregateInput
  }

  export type contentScalarWhereWithAggregatesInput = {
    AND?: contentScalarWhereWithAggregatesInput | contentScalarWhereWithAggregatesInput[]
    OR?: contentScalarWhereWithAggregatesInput[]
    NOT?: contentScalarWhereWithAggregatesInput | contentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"content"> | string
    title?: StringWithAggregatesFilter<"content"> | string
    description?: StringNullableWithAggregatesFilter<"content"> | string | null
    mediaUrl?: StringWithAggregatesFilter<"content"> | string
    thumbnailUrl?: StringNullableWithAggregatesFilter<"content"> | string | null
    isPublished?: BoolWithAggregatesFilter<"content"> | boolean
    category?: StringNullableWithAggregatesFilter<"content"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"content"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"content"> | Date | string
    storeId?: StringWithAggregatesFilter<"content"> | string
    artistId?: StringWithAggregatesFilter<"content"> | string
  }

  export type storeWhereInput = {
    AND?: storeWhereInput | storeWhereInput[]
    OR?: storeWhereInput[]
    NOT?: storeWhereInput | storeWhereInput[]
    id?: StringFilter<"store"> | string
    storeName?: StringNullableFilter<"store"> | string | null
    storeLogo?: StringNullableFilter<"store"> | string | null
    imagePublicID?: StringNullableFilter<"store"> | string | null
    storeOwnerID?: StringNullableFilter<"store"> | string | null
    createdAt?: DateTimeFilter<"store"> | Date | string
    updatedAt?: DateTimeFilter<"store"> | Date | string
    userId?: StringNullableFilter<"store"> | string | null
    order?: OrderListRelationFilter
    payment?: PaymentListRelationFilter
    products?: ProductListRelationFilter
    storeOwner?: XOR<UserNullableScalarRelationFilter, userWhereInput> | null
    content?: ContentListRelationFilter
    favourite_content?: Favourite_contentListRelationFilter
  }

  export type storeOrderByWithRelationInput = {
    id?: SortOrder
    storeName?: SortOrderInput | SortOrder
    storeLogo?: SortOrderInput | SortOrder
    imagePublicID?: SortOrderInput | SortOrder
    storeOwnerID?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    order?: orderOrderByRelationAggregateInput
    payment?: paymentOrderByRelationAggregateInput
    products?: productOrderByRelationAggregateInput
    storeOwner?: userOrderByWithRelationInput
    content?: contentOrderByRelationAggregateInput
    favourite_content?: favourite_contentOrderByRelationAggregateInput
  }

  export type storeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    storeName?: string
    AND?: storeWhereInput | storeWhereInput[]
    OR?: storeWhereInput[]
    NOT?: storeWhereInput | storeWhereInput[]
    storeLogo?: StringNullableFilter<"store"> | string | null
    imagePublicID?: StringNullableFilter<"store"> | string | null
    storeOwnerID?: StringNullableFilter<"store"> | string | null
    createdAt?: DateTimeFilter<"store"> | Date | string
    updatedAt?: DateTimeFilter<"store"> | Date | string
    userId?: StringNullableFilter<"store"> | string | null
    order?: OrderListRelationFilter
    payment?: PaymentListRelationFilter
    products?: ProductListRelationFilter
    storeOwner?: XOR<UserNullableScalarRelationFilter, userWhereInput> | null
    content?: ContentListRelationFilter
    favourite_content?: Favourite_contentListRelationFilter
  }, "id" | "storeName">

  export type storeOrderByWithAggregationInput = {
    id?: SortOrder
    storeName?: SortOrderInput | SortOrder
    storeLogo?: SortOrderInput | SortOrder
    imagePublicID?: SortOrderInput | SortOrder
    storeOwnerID?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: storeCountOrderByAggregateInput
    _max?: storeMaxOrderByAggregateInput
    _min?: storeMinOrderByAggregateInput
  }

  export type storeScalarWhereWithAggregatesInput = {
    AND?: storeScalarWhereWithAggregatesInput | storeScalarWhereWithAggregatesInput[]
    OR?: storeScalarWhereWithAggregatesInput[]
    NOT?: storeScalarWhereWithAggregatesInput | storeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"store"> | string
    storeName?: StringNullableWithAggregatesFilter<"store"> | string | null
    storeLogo?: StringNullableWithAggregatesFilter<"store"> | string | null
    imagePublicID?: StringNullableWithAggregatesFilter<"store"> | string | null
    storeOwnerID?: StringNullableWithAggregatesFilter<"store"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"store"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"store"> | Date | string
    userId?: StringNullableWithAggregatesFilter<"store"> | string | null
  }

  export type productWhereInput = {
    AND?: productWhereInput | productWhereInput[]
    OR?: productWhereInput[]
    NOT?: productWhereInput | productWhereInput[]
    id?: StringFilter<"product"> | string
    productName?: StringFilter<"product"> | string
    description?: StringFilter<"product"> | string
    productImageID?: StringNullableFilter<"product"> | string | null
    quantity?: IntNullableFilter<"product"> | number | null
    price?: StringFilter<"product"> | string
    rating?: DecimalNullableFilter<"product"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"product"> | Date | string
    updatedAt?: DateTimeFilter<"product"> | Date | string
    storeId?: StringNullableFilter<"product"> | string | null
    orderProducts?: OrderProductsListRelationFilter
    productImage?: XOR<ProductImageNullableScalarRelationFilter, productImageWhereInput> | null
    store?: XOR<StoreNullableScalarRelationFilter, storeWhereInput> | null
    ratings?: RatingListRelationFilter
    reviews?: ReviewListRelationFilter
    favourite_content?: Favourite_contentListRelationFilter
  }

  export type productOrderByWithRelationInput = {
    id?: SortOrder
    productName?: SortOrder
    description?: SortOrder
    productImageID?: SortOrderInput | SortOrder
    quantity?: SortOrderInput | SortOrder
    price?: SortOrder
    rating?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    storeId?: SortOrderInput | SortOrder
    orderProducts?: orderProductsOrderByRelationAggregateInput
    productImage?: productImageOrderByWithRelationInput
    store?: storeOrderByWithRelationInput
    ratings?: ratingOrderByRelationAggregateInput
    reviews?: reviewOrderByRelationAggregateInput
    favourite_content?: favourite_contentOrderByRelationAggregateInput
  }

  export type productWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: productWhereInput | productWhereInput[]
    OR?: productWhereInput[]
    NOT?: productWhereInput | productWhereInput[]
    productName?: StringFilter<"product"> | string
    description?: StringFilter<"product"> | string
    productImageID?: StringNullableFilter<"product"> | string | null
    quantity?: IntNullableFilter<"product"> | number | null
    price?: StringFilter<"product"> | string
    rating?: DecimalNullableFilter<"product"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"product"> | Date | string
    updatedAt?: DateTimeFilter<"product"> | Date | string
    storeId?: StringNullableFilter<"product"> | string | null
    orderProducts?: OrderProductsListRelationFilter
    productImage?: XOR<ProductImageNullableScalarRelationFilter, productImageWhereInput> | null
    store?: XOR<StoreNullableScalarRelationFilter, storeWhereInput> | null
    ratings?: RatingListRelationFilter
    reviews?: ReviewListRelationFilter
    favourite_content?: Favourite_contentListRelationFilter
  }, "id">

  export type productOrderByWithAggregationInput = {
    id?: SortOrder
    productName?: SortOrder
    description?: SortOrder
    productImageID?: SortOrderInput | SortOrder
    quantity?: SortOrderInput | SortOrder
    price?: SortOrder
    rating?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    storeId?: SortOrderInput | SortOrder
    _count?: productCountOrderByAggregateInput
    _avg?: productAvgOrderByAggregateInput
    _max?: productMaxOrderByAggregateInput
    _min?: productMinOrderByAggregateInput
    _sum?: productSumOrderByAggregateInput
  }

  export type productScalarWhereWithAggregatesInput = {
    AND?: productScalarWhereWithAggregatesInput | productScalarWhereWithAggregatesInput[]
    OR?: productScalarWhereWithAggregatesInput[]
    NOT?: productScalarWhereWithAggregatesInput | productScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"product"> | string
    productName?: StringWithAggregatesFilter<"product"> | string
    description?: StringWithAggregatesFilter<"product"> | string
    productImageID?: StringNullableWithAggregatesFilter<"product"> | string | null
    quantity?: IntNullableWithAggregatesFilter<"product"> | number | null
    price?: StringWithAggregatesFilter<"product"> | string
    rating?: DecimalNullableWithAggregatesFilter<"product"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeWithAggregatesFilter<"product"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"product"> | Date | string
    storeId?: StringNullableWithAggregatesFilter<"product"> | string | null
  }

  export type reviewWhereInput = {
    AND?: reviewWhereInput | reviewWhereInput[]
    OR?: reviewWhereInput[]
    NOT?: reviewWhereInput | reviewWhereInput[]
    id?: StringFilter<"review"> | string
    userID?: StringNullableFilter<"review"> | string | null
    productID?: StringNullableFilter<"review"> | string | null
    review?: StringNullableFilter<"review"> | string | null
    createdAt?: DateTimeFilter<"review"> | Date | string
    updatedAt?: DateTimeFilter<"review"> | Date | string
    product?: XOR<ProductNullableScalarRelationFilter, productWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, userWhereInput> | null
  }

  export type reviewOrderByWithRelationInput = {
    id?: SortOrder
    userID?: SortOrderInput | SortOrder
    productID?: SortOrderInput | SortOrder
    review?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    product?: productOrderByWithRelationInput
    user?: userOrderByWithRelationInput
  }

  export type reviewWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: reviewWhereInput | reviewWhereInput[]
    OR?: reviewWhereInput[]
    NOT?: reviewWhereInput | reviewWhereInput[]
    userID?: StringNullableFilter<"review"> | string | null
    productID?: StringNullableFilter<"review"> | string | null
    review?: StringNullableFilter<"review"> | string | null
    createdAt?: DateTimeFilter<"review"> | Date | string
    updatedAt?: DateTimeFilter<"review"> | Date | string
    product?: XOR<ProductNullableScalarRelationFilter, productWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, userWhereInput> | null
  }, "id">

  export type reviewOrderByWithAggregationInput = {
    id?: SortOrder
    userID?: SortOrderInput | SortOrder
    productID?: SortOrderInput | SortOrder
    review?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: reviewCountOrderByAggregateInput
    _max?: reviewMaxOrderByAggregateInput
    _min?: reviewMinOrderByAggregateInput
  }

  export type reviewScalarWhereWithAggregatesInput = {
    AND?: reviewScalarWhereWithAggregatesInput | reviewScalarWhereWithAggregatesInput[]
    OR?: reviewScalarWhereWithAggregatesInput[]
    NOT?: reviewScalarWhereWithAggregatesInput | reviewScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"review"> | string
    userID?: StringNullableWithAggregatesFilter<"review"> | string | null
    productID?: StringNullableWithAggregatesFilter<"review"> | string | null
    review?: StringNullableWithAggregatesFilter<"review"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"review"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"review"> | Date | string
  }

  export type ratingWhereInput = {
    AND?: ratingWhereInput | ratingWhereInput[]
    OR?: ratingWhereInput[]
    NOT?: ratingWhereInput | ratingWhereInput[]
    id?: StringFilter<"rating"> | string
    userID?: StringNullableFilter<"rating"> | string | null
    productID?: StringNullableFilter<"rating"> | string | null
    rating?: IntNullableFilter<"rating"> | number | null
    createdAt?: DateTimeFilter<"rating"> | Date | string
    updatedAt?: DateTimeFilter<"rating"> | Date | string
    product?: XOR<ProductNullableScalarRelationFilter, productWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, userWhereInput> | null
  }

  export type ratingOrderByWithRelationInput = {
    id?: SortOrder
    userID?: SortOrderInput | SortOrder
    productID?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    product?: productOrderByWithRelationInput
    user?: userOrderByWithRelationInput
  }

  export type ratingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ratingWhereInput | ratingWhereInput[]
    OR?: ratingWhereInput[]
    NOT?: ratingWhereInput | ratingWhereInput[]
    userID?: StringNullableFilter<"rating"> | string | null
    productID?: StringNullableFilter<"rating"> | string | null
    rating?: IntNullableFilter<"rating"> | number | null
    createdAt?: DateTimeFilter<"rating"> | Date | string
    updatedAt?: DateTimeFilter<"rating"> | Date | string
    product?: XOR<ProductNullableScalarRelationFilter, productWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, userWhereInput> | null
  }, "id">

  export type ratingOrderByWithAggregationInput = {
    id?: SortOrder
    userID?: SortOrderInput | SortOrder
    productID?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ratingCountOrderByAggregateInput
    _avg?: ratingAvgOrderByAggregateInput
    _max?: ratingMaxOrderByAggregateInput
    _min?: ratingMinOrderByAggregateInput
    _sum?: ratingSumOrderByAggregateInput
  }

  export type ratingScalarWhereWithAggregatesInput = {
    AND?: ratingScalarWhereWithAggregatesInput | ratingScalarWhereWithAggregatesInput[]
    OR?: ratingScalarWhereWithAggregatesInput[]
    NOT?: ratingScalarWhereWithAggregatesInput | ratingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"rating"> | string
    userID?: StringNullableWithAggregatesFilter<"rating"> | string | null
    productID?: StringNullableWithAggregatesFilter<"rating"> | string | null
    rating?: IntNullableWithAggregatesFilter<"rating"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"rating"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"rating"> | Date | string
  }

  export type productImageWhereInput = {
    AND?: productImageWhereInput | productImageWhereInput[]
    OR?: productImageWhereInput[]
    NOT?: productImageWhereInput | productImageWhereInput[]
    id?: StringFilter<"productImage"> | string
    productImage?: StringNullableFilter<"productImage"> | string | null
    imagePublicID?: StringNullableFilter<"productImage"> | string | null
    productImageID?: StringNullableFilter<"productImage"> | string | null
    createdAt?: DateTimeFilter<"productImage"> | Date | string
    updatedAt?: DateTimeFilter<"productImage"> | Date | string
    product?: ProductListRelationFilter
  }

  export type productImageOrderByWithRelationInput = {
    id?: SortOrder
    productImage?: SortOrderInput | SortOrder
    imagePublicID?: SortOrderInput | SortOrder
    productImageID?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    product?: productOrderByRelationAggregateInput
  }

  export type productImageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    productImageID?: string
    AND?: productImageWhereInput | productImageWhereInput[]
    OR?: productImageWhereInput[]
    NOT?: productImageWhereInput | productImageWhereInput[]
    productImage?: StringNullableFilter<"productImage"> | string | null
    imagePublicID?: StringNullableFilter<"productImage"> | string | null
    createdAt?: DateTimeFilter<"productImage"> | Date | string
    updatedAt?: DateTimeFilter<"productImage"> | Date | string
    product?: ProductListRelationFilter
  }, "id" | "productImageID">

  export type productImageOrderByWithAggregationInput = {
    id?: SortOrder
    productImage?: SortOrderInput | SortOrder
    imagePublicID?: SortOrderInput | SortOrder
    productImageID?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: productImageCountOrderByAggregateInput
    _max?: productImageMaxOrderByAggregateInput
    _min?: productImageMinOrderByAggregateInput
  }

  export type productImageScalarWhereWithAggregatesInput = {
    AND?: productImageScalarWhereWithAggregatesInput | productImageScalarWhereWithAggregatesInput[]
    OR?: productImageScalarWhereWithAggregatesInput[]
    NOT?: productImageScalarWhereWithAggregatesInput | productImageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"productImage"> | string
    productImage?: StringNullableWithAggregatesFilter<"productImage"> | string | null
    imagePublicID?: StringNullableWithAggregatesFilter<"productImage"> | string | null
    productImageID?: StringNullableWithAggregatesFilter<"productImage"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"productImage"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"productImage"> | Date | string
  }

  export type paymentWhereInput = {
    AND?: paymentWhereInput | paymentWhereInput[]
    OR?: paymentWhereInput[]
    NOT?: paymentWhereInput | paymentWhereInput[]
    id?: StringFilter<"payment"> | string
    userID?: StringNullableFilter<"payment"> | string | null
    storeID?: StringNullableFilter<"payment"> | string | null
    amount?: DecimalFilter<"payment"> | Decimal | DecimalJsLike | number | string
    paymentMethod?: StringNullableFilter<"payment"> | string | null
    paymentStatus?: StringNullableFilter<"payment"> | string | null
    type?: StringNullableFilter<"payment"> | string | null
    createdAt?: DateTimeFilter<"payment"> | Date | string
    updatedAt?: DateTimeFilter<"payment"> | Date | string
    orderId?: StringNullableFilter<"payment"> | string | null
    paymentRef?: StringNullableFilter<"payment"> | string | null
    order?: XOR<OrderNullableScalarRelationFilter, orderWhereInput> | null
    store?: XOR<StoreNullableScalarRelationFilter, storeWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, userWhereInput> | null
    subscription?: SubscriptionListRelationFilter
  }

  export type paymentOrderByWithRelationInput = {
    id?: SortOrder
    userID?: SortOrderInput | SortOrder
    storeID?: SortOrderInput | SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrderInput | SortOrder
    paymentStatus?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orderId?: SortOrderInput | SortOrder
    paymentRef?: SortOrderInput | SortOrder
    order?: orderOrderByWithRelationInput
    store?: storeOrderByWithRelationInput
    user?: userOrderByWithRelationInput
    subscription?: subscriptionOrderByRelationAggregateInput
  }

  export type paymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: paymentWhereInput | paymentWhereInput[]
    OR?: paymentWhereInput[]
    NOT?: paymentWhereInput | paymentWhereInput[]
    userID?: StringNullableFilter<"payment"> | string | null
    storeID?: StringNullableFilter<"payment"> | string | null
    amount?: DecimalFilter<"payment"> | Decimal | DecimalJsLike | number | string
    paymentMethod?: StringNullableFilter<"payment"> | string | null
    paymentStatus?: StringNullableFilter<"payment"> | string | null
    type?: StringNullableFilter<"payment"> | string | null
    createdAt?: DateTimeFilter<"payment"> | Date | string
    updatedAt?: DateTimeFilter<"payment"> | Date | string
    orderId?: StringNullableFilter<"payment"> | string | null
    paymentRef?: StringNullableFilter<"payment"> | string | null
    order?: XOR<OrderNullableScalarRelationFilter, orderWhereInput> | null
    store?: XOR<StoreNullableScalarRelationFilter, storeWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, userWhereInput> | null
    subscription?: SubscriptionListRelationFilter
  }, "id">

  export type paymentOrderByWithAggregationInput = {
    id?: SortOrder
    userID?: SortOrderInput | SortOrder
    storeID?: SortOrderInput | SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrderInput | SortOrder
    paymentStatus?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orderId?: SortOrderInput | SortOrder
    paymentRef?: SortOrderInput | SortOrder
    _count?: paymentCountOrderByAggregateInput
    _avg?: paymentAvgOrderByAggregateInput
    _max?: paymentMaxOrderByAggregateInput
    _min?: paymentMinOrderByAggregateInput
    _sum?: paymentSumOrderByAggregateInput
  }

  export type paymentScalarWhereWithAggregatesInput = {
    AND?: paymentScalarWhereWithAggregatesInput | paymentScalarWhereWithAggregatesInput[]
    OR?: paymentScalarWhereWithAggregatesInput[]
    NOT?: paymentScalarWhereWithAggregatesInput | paymentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"payment"> | string
    userID?: StringNullableWithAggregatesFilter<"payment"> | string | null
    storeID?: StringNullableWithAggregatesFilter<"payment"> | string | null
    amount?: DecimalWithAggregatesFilter<"payment"> | Decimal | DecimalJsLike | number | string
    paymentMethod?: StringNullableWithAggregatesFilter<"payment"> | string | null
    paymentStatus?: StringNullableWithAggregatesFilter<"payment"> | string | null
    type?: StringNullableWithAggregatesFilter<"payment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"payment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"payment"> | Date | string
    orderId?: StringNullableWithAggregatesFilter<"payment"> | string | null
    paymentRef?: StringNullableWithAggregatesFilter<"payment"> | string | null
  }

  export type orderWhereInput = {
    AND?: orderWhereInput | orderWhereInput[]
    OR?: orderWhereInput[]
    NOT?: orderWhereInput | orderWhereInput[]
    id?: StringFilter<"order"> | string
    userID?: StringNullableFilter<"order"> | string | null
    storeID?: StringNullableFilter<"order"> | string | null
    shippingAddress?: StringNullableFilter<"order"> | string | null
    amount?: DecimalFilter<"order"> | Decimal | DecimalJsLike | number | string
    status?: StringNullableFilter<"order"> | string | null
    createdAt?: DateTimeFilter<"order"> | Date | string
    updatedAt?: DateTimeFilter<"order"> | Date | string
    store?: XOR<StoreNullableScalarRelationFilter, storeWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, userWhereInput> | null
    orderProducts?: OrderProductsListRelationFilter
    payment?: PaymentListRelationFilter
  }

  export type orderOrderByWithRelationInput = {
    id?: SortOrder
    userID?: SortOrderInput | SortOrder
    storeID?: SortOrderInput | SortOrder
    shippingAddress?: SortOrderInput | SortOrder
    amount?: SortOrder
    status?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    store?: storeOrderByWithRelationInput
    user?: userOrderByWithRelationInput
    orderProducts?: orderProductsOrderByRelationAggregateInput
    payment?: paymentOrderByRelationAggregateInput
  }

  export type orderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: orderWhereInput | orderWhereInput[]
    OR?: orderWhereInput[]
    NOT?: orderWhereInput | orderWhereInput[]
    userID?: StringNullableFilter<"order"> | string | null
    storeID?: StringNullableFilter<"order"> | string | null
    shippingAddress?: StringNullableFilter<"order"> | string | null
    amount?: DecimalFilter<"order"> | Decimal | DecimalJsLike | number | string
    status?: StringNullableFilter<"order"> | string | null
    createdAt?: DateTimeFilter<"order"> | Date | string
    updatedAt?: DateTimeFilter<"order"> | Date | string
    store?: XOR<StoreNullableScalarRelationFilter, storeWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, userWhereInput> | null
    orderProducts?: OrderProductsListRelationFilter
    payment?: PaymentListRelationFilter
  }, "id">

  export type orderOrderByWithAggregationInput = {
    id?: SortOrder
    userID?: SortOrderInput | SortOrder
    storeID?: SortOrderInput | SortOrder
    shippingAddress?: SortOrderInput | SortOrder
    amount?: SortOrder
    status?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: orderCountOrderByAggregateInput
    _avg?: orderAvgOrderByAggregateInput
    _max?: orderMaxOrderByAggregateInput
    _min?: orderMinOrderByAggregateInput
    _sum?: orderSumOrderByAggregateInput
  }

  export type orderScalarWhereWithAggregatesInput = {
    AND?: orderScalarWhereWithAggregatesInput | orderScalarWhereWithAggregatesInput[]
    OR?: orderScalarWhereWithAggregatesInput[]
    NOT?: orderScalarWhereWithAggregatesInput | orderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"order"> | string
    userID?: StringNullableWithAggregatesFilter<"order"> | string | null
    storeID?: StringNullableWithAggregatesFilter<"order"> | string | null
    shippingAddress?: StringNullableWithAggregatesFilter<"order"> | string | null
    amount?: DecimalWithAggregatesFilter<"order"> | Decimal | DecimalJsLike | number | string
    status?: StringNullableWithAggregatesFilter<"order"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"order"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"order"> | Date | string
  }

  export type orderProductsWhereInput = {
    AND?: orderProductsWhereInput | orderProductsWhereInput[]
    OR?: orderProductsWhereInput[]
    NOT?: orderProductsWhereInput | orderProductsWhereInput[]
    id?: StringFilter<"orderProducts"> | string
    orderID?: StringNullableFilter<"orderProducts"> | string | null
    productID?: StringNullableFilter<"orderProducts"> | string | null
    createdAt?: DateTimeFilter<"orderProducts"> | Date | string
    updatedAt?: DateTimeFilter<"orderProducts"> | Date | string
    order?: XOR<OrderNullableScalarRelationFilter, orderWhereInput> | null
    product?: XOR<ProductNullableScalarRelationFilter, productWhereInput> | null
  }

  export type orderProductsOrderByWithRelationInput = {
    id?: SortOrder
    orderID?: SortOrderInput | SortOrder
    productID?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    order?: orderOrderByWithRelationInput
    product?: productOrderByWithRelationInput
  }

  export type orderProductsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: orderProductsWhereInput | orderProductsWhereInput[]
    OR?: orderProductsWhereInput[]
    NOT?: orderProductsWhereInput | orderProductsWhereInput[]
    orderID?: StringNullableFilter<"orderProducts"> | string | null
    productID?: StringNullableFilter<"orderProducts"> | string | null
    createdAt?: DateTimeFilter<"orderProducts"> | Date | string
    updatedAt?: DateTimeFilter<"orderProducts"> | Date | string
    order?: XOR<OrderNullableScalarRelationFilter, orderWhereInput> | null
    product?: XOR<ProductNullableScalarRelationFilter, productWhereInput> | null
  }, "id">

  export type orderProductsOrderByWithAggregationInput = {
    id?: SortOrder
    orderID?: SortOrderInput | SortOrder
    productID?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: orderProductsCountOrderByAggregateInput
    _max?: orderProductsMaxOrderByAggregateInput
    _min?: orderProductsMinOrderByAggregateInput
  }

  export type orderProductsScalarWhereWithAggregatesInput = {
    AND?: orderProductsScalarWhereWithAggregatesInput | orderProductsScalarWhereWithAggregatesInput[]
    OR?: orderProductsScalarWhereWithAggregatesInput[]
    NOT?: orderProductsScalarWhereWithAggregatesInput | orderProductsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"orderProducts"> | string
    orderID?: StringNullableWithAggregatesFilter<"orderProducts"> | string | null
    productID?: StringNullableWithAggregatesFilter<"orderProducts"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"orderProducts"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"orderProducts"> | Date | string
  }

  export type subscriptionWhereInput = {
    AND?: subscriptionWhereInput | subscriptionWhereInput[]
    OR?: subscriptionWhereInput[]
    NOT?: subscriptionWhereInput | subscriptionWhereInput[]
    id?: StringFilter<"subscription"> | string
    userId?: StringFilter<"subscription"> | string
    contentId?: StringNullableFilter<"subscription"> | string | null
    paymentId?: StringNullableFilter<"subscription"> | string | null
    startDate?: DateTimeFilter<"subscription"> | Date | string
    endDate?: DateTimeNullableFilter<"subscription"> | Date | string | null
    isActive?: BoolFilter<"subscription"> | boolean
    createdAt?: DateTimeFilter<"subscription"> | Date | string
    updatedAt?: DateTimeFilter<"subscription"> | Date | string
    user?: XOR<UserScalarRelationFilter, userWhereInput>
    content?: XOR<ContentNullableScalarRelationFilter, contentWhereInput> | null
    payment?: XOR<PaymentNullableScalarRelationFilter, paymentWhereInput> | null
  }

  export type subscriptionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    contentId?: SortOrderInput | SortOrder
    paymentId?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: userOrderByWithRelationInput
    content?: contentOrderByWithRelationInput
    payment?: paymentOrderByWithRelationInput
  }

  export type subscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: subscriptionWhereInput | subscriptionWhereInput[]
    OR?: subscriptionWhereInput[]
    NOT?: subscriptionWhereInput | subscriptionWhereInput[]
    userId?: StringFilter<"subscription"> | string
    contentId?: StringNullableFilter<"subscription"> | string | null
    paymentId?: StringNullableFilter<"subscription"> | string | null
    startDate?: DateTimeFilter<"subscription"> | Date | string
    endDate?: DateTimeNullableFilter<"subscription"> | Date | string | null
    isActive?: BoolFilter<"subscription"> | boolean
    createdAt?: DateTimeFilter<"subscription"> | Date | string
    updatedAt?: DateTimeFilter<"subscription"> | Date | string
    user?: XOR<UserScalarRelationFilter, userWhereInput>
    content?: XOR<ContentNullableScalarRelationFilter, contentWhereInput> | null
    payment?: XOR<PaymentNullableScalarRelationFilter, paymentWhereInput> | null
  }, "id">

  export type subscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    contentId?: SortOrderInput | SortOrder
    paymentId?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: subscriptionCountOrderByAggregateInput
    _max?: subscriptionMaxOrderByAggregateInput
    _min?: subscriptionMinOrderByAggregateInput
  }

  export type subscriptionScalarWhereWithAggregatesInput = {
    AND?: subscriptionScalarWhereWithAggregatesInput | subscriptionScalarWhereWithAggregatesInput[]
    OR?: subscriptionScalarWhereWithAggregatesInput[]
    NOT?: subscriptionScalarWhereWithAggregatesInput | subscriptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"subscription"> | string
    userId?: StringWithAggregatesFilter<"subscription"> | string
    contentId?: StringNullableWithAggregatesFilter<"subscription"> | string | null
    paymentId?: StringNullableWithAggregatesFilter<"subscription"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"subscription"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"subscription"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"subscription"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"subscription"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"subscription"> | Date | string
  }

  export type FanEngagementWhereInput = {
    AND?: FanEngagementWhereInput | FanEngagementWhereInput[]
    OR?: FanEngagementWhereInput[]
    NOT?: FanEngagementWhereInput | FanEngagementWhereInput[]
    id?: StringFilter<"FanEngagement"> | string
    userId?: StringFilter<"FanEngagement"> | string
    contentId?: StringFilter<"FanEngagement"> | string
    action?: StringNullableFilter<"FanEngagement"> | string | null
    value?: StringNullableFilter<"FanEngagement"> | string | null
    createdAt?: DateTimeFilter<"FanEngagement"> | Date | string
    updatedAt?: DateTimeFilter<"FanEngagement"> | Date | string
    user?: XOR<UserScalarRelationFilter, userWhereInput>
    content?: XOR<ContentScalarRelationFilter, contentWhereInput>
  }

  export type FanEngagementOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    contentId?: SortOrder
    action?: SortOrderInput | SortOrder
    value?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: userOrderByWithRelationInput
    content?: contentOrderByWithRelationInput
  }

  export type FanEngagementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FanEngagementWhereInput | FanEngagementWhereInput[]
    OR?: FanEngagementWhereInput[]
    NOT?: FanEngagementWhereInput | FanEngagementWhereInput[]
    userId?: StringFilter<"FanEngagement"> | string
    contentId?: StringFilter<"FanEngagement"> | string
    action?: StringNullableFilter<"FanEngagement"> | string | null
    value?: StringNullableFilter<"FanEngagement"> | string | null
    createdAt?: DateTimeFilter<"FanEngagement"> | Date | string
    updatedAt?: DateTimeFilter<"FanEngagement"> | Date | string
    user?: XOR<UserScalarRelationFilter, userWhereInput>
    content?: XOR<ContentScalarRelationFilter, contentWhereInput>
  }, "id">

  export type FanEngagementOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    contentId?: SortOrder
    action?: SortOrderInput | SortOrder
    value?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FanEngagementCountOrderByAggregateInput
    _max?: FanEngagementMaxOrderByAggregateInput
    _min?: FanEngagementMinOrderByAggregateInput
  }

  export type FanEngagementScalarWhereWithAggregatesInput = {
    AND?: FanEngagementScalarWhereWithAggregatesInput | FanEngagementScalarWhereWithAggregatesInput[]
    OR?: FanEngagementScalarWhereWithAggregatesInput[]
    NOT?: FanEngagementScalarWhereWithAggregatesInput | FanEngagementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FanEngagement"> | string
    userId?: StringWithAggregatesFilter<"FanEngagement"> | string
    contentId?: StringWithAggregatesFilter<"FanEngagement"> | string
    action?: StringNullableWithAggregatesFilter<"FanEngagement"> | string | null
    value?: StringNullableWithAggregatesFilter<"FanEngagement"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"FanEngagement"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FanEngagement"> | Date | string
  }

  export type favourite_contentWhereInput = {
    AND?: favourite_contentWhereInput | favourite_contentWhereInput[]
    OR?: favourite_contentWhereInput[]
    NOT?: favourite_contentWhereInput | favourite_contentWhereInput[]
    id?: StringFilter<"favourite_content"> | string
    userId?: StringFilter<"favourite_content"> | string
    contentId?: StringNullableFilter<"favourite_content"> | string | null
    productId?: StringNullableFilter<"favourite_content"> | string | null
    storeId?: StringNullableFilter<"favourite_content"> | string | null
    createdAt?: DateTimeFilter<"favourite_content"> | Date | string
    updatedAt?: DateTimeFilter<"favourite_content"> | Date | string
    user?: XOR<UserScalarRelationFilter, userWhereInput>
    content?: XOR<ContentNullableScalarRelationFilter, contentWhereInput> | null
    product?: XOR<ProductNullableScalarRelationFilter, productWhereInput> | null
    store?: XOR<StoreNullableScalarRelationFilter, storeWhereInput> | null
  }

  export type favourite_contentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    contentId?: SortOrderInput | SortOrder
    productId?: SortOrderInput | SortOrder
    storeId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: userOrderByWithRelationInput
    content?: contentOrderByWithRelationInput
    product?: productOrderByWithRelationInput
    store?: storeOrderByWithRelationInput
  }

  export type favourite_contentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: favourite_contentWhereInput | favourite_contentWhereInput[]
    OR?: favourite_contentWhereInput[]
    NOT?: favourite_contentWhereInput | favourite_contentWhereInput[]
    userId?: StringFilter<"favourite_content"> | string
    contentId?: StringNullableFilter<"favourite_content"> | string | null
    productId?: StringNullableFilter<"favourite_content"> | string | null
    storeId?: StringNullableFilter<"favourite_content"> | string | null
    createdAt?: DateTimeFilter<"favourite_content"> | Date | string
    updatedAt?: DateTimeFilter<"favourite_content"> | Date | string
    user?: XOR<UserScalarRelationFilter, userWhereInput>
    content?: XOR<ContentNullableScalarRelationFilter, contentWhereInput> | null
    product?: XOR<ProductNullableScalarRelationFilter, productWhereInput> | null
    store?: XOR<StoreNullableScalarRelationFilter, storeWhereInput> | null
  }, "id">

  export type favourite_contentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    contentId?: SortOrderInput | SortOrder
    productId?: SortOrderInput | SortOrder
    storeId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: favourite_contentCountOrderByAggregateInput
    _max?: favourite_contentMaxOrderByAggregateInput
    _min?: favourite_contentMinOrderByAggregateInput
  }

  export type favourite_contentScalarWhereWithAggregatesInput = {
    AND?: favourite_contentScalarWhereWithAggregatesInput | favourite_contentScalarWhereWithAggregatesInput[]
    OR?: favourite_contentScalarWhereWithAggregatesInput[]
    NOT?: favourite_contentScalarWhereWithAggregatesInput | favourite_contentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"favourite_content"> | string
    userId?: StringWithAggregatesFilter<"favourite_content"> | string
    contentId?: StringNullableWithAggregatesFilter<"favourite_content"> | string | null
    productId?: StringNullableWithAggregatesFilter<"favourite_content"> | string | null
    storeId?: StringNullableWithAggregatesFilter<"favourite_content"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"favourite_content"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"favourite_content"> | Date | string
  }

  export type acknowledgementWhereInput = {
    AND?: acknowledgementWhereInput | acknowledgementWhereInput[]
    OR?: acknowledgementWhereInput[]
    NOT?: acknowledgementWhereInput | acknowledgementWhereInput[]
    id?: StringFilter<"acknowledgement"> | string
    type?: StringFilter<"acknowledgement"> | string
    interval?: StringFilter<"acknowledgement"> | string
    userId?: StringFilter<"acknowledgement"> | string
    expiresOn?: DateTimeFilter<"acknowledgement"> | Date | string
    createdAt?: DateTimeFilter<"acknowledgement"> | Date | string
    updateAt?: DateTimeFilter<"acknowledgement"> | Date | string
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }

  export type acknowledgementOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    interval?: SortOrder
    userId?: SortOrder
    expiresOn?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    user?: userOrderByWithRelationInput
  }

  export type acknowledgementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: acknowledgementWhereInput | acknowledgementWhereInput[]
    OR?: acknowledgementWhereInput[]
    NOT?: acknowledgementWhereInput | acknowledgementWhereInput[]
    type?: StringFilter<"acknowledgement"> | string
    interval?: StringFilter<"acknowledgement"> | string
    userId?: StringFilter<"acknowledgement"> | string
    expiresOn?: DateTimeFilter<"acknowledgement"> | Date | string
    createdAt?: DateTimeFilter<"acknowledgement"> | Date | string
    updateAt?: DateTimeFilter<"acknowledgement"> | Date | string
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }, "id">

  export type acknowledgementOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    interval?: SortOrder
    userId?: SortOrder
    expiresOn?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    _count?: acknowledgementCountOrderByAggregateInput
    _max?: acknowledgementMaxOrderByAggregateInput
    _min?: acknowledgementMinOrderByAggregateInput
  }

  export type acknowledgementScalarWhereWithAggregatesInput = {
    AND?: acknowledgementScalarWhereWithAggregatesInput | acknowledgementScalarWhereWithAggregatesInput[]
    OR?: acknowledgementScalarWhereWithAggregatesInput[]
    NOT?: acknowledgementScalarWhereWithAggregatesInput | acknowledgementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"acknowledgement"> | string
    type?: StringWithAggregatesFilter<"acknowledgement"> | string
    interval?: StringWithAggregatesFilter<"acknowledgement"> | string
    userId?: StringWithAggregatesFilter<"acknowledgement"> | string
    expiresOn?: DateTimeWithAggregatesFilter<"acknowledgement"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"acknowledgement"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"acknowledgement"> | Date | string
  }

  export type userCreateInput = {
    id?: string
    fullname: string
    email: string
    password?: string | null
    profile_image_url?: string | null
    uploadedProfileImage?: string | null
    category?: string | null
    imagePublicID?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    acknowledgements?: acknowledgementCreateNestedManyWithoutUserInput
    order?: orderCreateNestedManyWithoutUserInput
    payment?: paymentCreateNestedManyWithoutUserInput
    content?: contentCreateNestedManyWithoutArtistInput
    store?: storeCreateNestedManyWithoutStoreOwnerInput
    review?: reviewCreateNestedManyWithoutUserInput
    rating?: ratingCreateNestedManyWithoutUserInput
    subscription?: subscriptionCreateNestedManyWithoutUserInput
    FanEngagement?: FanEngagementCreateNestedManyWithoutUserInput
    favourite_content?: favourite_contentCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    id?: string
    fullname: string
    email: string
    password?: string | null
    profile_image_url?: string | null
    uploadedProfileImage?: string | null
    category?: string | null
    imagePublicID?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    acknowledgements?: acknowledgementUncheckedCreateNestedManyWithoutUserInput
    order?: orderUncheckedCreateNestedManyWithoutUserInput
    payment?: paymentUncheckedCreateNestedManyWithoutUserInput
    content?: contentUncheckedCreateNestedManyWithoutArtistInput
    store?: storeUncheckedCreateNestedManyWithoutStoreOwnerInput
    review?: reviewUncheckedCreateNestedManyWithoutUserInput
    rating?: ratingUncheckedCreateNestedManyWithoutUserInput
    subscription?: subscriptionUncheckedCreateNestedManyWithoutUserInput
    FanEngagement?: FanEngagementUncheckedCreateNestedManyWithoutUserInput
    favourite_content?: favourite_contentUncheckedCreateNestedManyWithoutUserInput
  }

  export type userUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedProfileImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    acknowledgements?: acknowledgementUpdateManyWithoutUserNestedInput
    order?: orderUpdateManyWithoutUserNestedInput
    payment?: paymentUpdateManyWithoutUserNestedInput
    content?: contentUpdateManyWithoutArtistNestedInput
    store?: storeUpdateManyWithoutStoreOwnerNestedInput
    review?: reviewUpdateManyWithoutUserNestedInput
    rating?: ratingUpdateManyWithoutUserNestedInput
    subscription?: subscriptionUpdateManyWithoutUserNestedInput
    FanEngagement?: FanEngagementUpdateManyWithoutUserNestedInput
    favourite_content?: favourite_contentUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedProfileImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    acknowledgements?: acknowledgementUncheckedUpdateManyWithoutUserNestedInput
    order?: orderUncheckedUpdateManyWithoutUserNestedInput
    payment?: paymentUncheckedUpdateManyWithoutUserNestedInput
    content?: contentUncheckedUpdateManyWithoutArtistNestedInput
    store?: storeUncheckedUpdateManyWithoutStoreOwnerNestedInput
    review?: reviewUncheckedUpdateManyWithoutUserNestedInput
    rating?: ratingUncheckedUpdateManyWithoutUserNestedInput
    subscription?: subscriptionUncheckedUpdateManyWithoutUserNestedInput
    FanEngagement?: FanEngagementUncheckedUpdateManyWithoutUserNestedInput
    favourite_content?: favourite_contentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateManyInput = {
    id?: string
    fullname: string
    email: string
    password?: string | null
    profile_image_url?: string | null
    uploadedProfileImage?: string | null
    category?: string | null
    imagePublicID?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
  }

  export type userUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedProfileImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
  }

  export type userUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedProfileImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
  }

  export type contentCreateInput = {
    id?: string
    title: string
    description?: string | null
    mediaUrl: string
    thumbnailUrl?: string | null
    isPublished?: boolean
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artist: userCreateNestedOneWithoutContentInput
    store: storeCreateNestedOneWithoutContentInput
    subscription?: subscriptionCreateNestedManyWithoutContentInput
    FanEngagement?: FanEngagementCreateNestedManyWithoutContentInput
    favourite_content?: favourite_contentCreateNestedManyWithoutContentInput
  }

  export type contentUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    mediaUrl: string
    thumbnailUrl?: string | null
    isPublished?: boolean
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    storeId: string
    artistId: string
    subscription?: subscriptionUncheckedCreateNestedManyWithoutContentInput
    FanEngagement?: FanEngagementUncheckedCreateNestedManyWithoutContentInput
    favourite_content?: favourite_contentUncheckedCreateNestedManyWithoutContentInput
  }

  export type contentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: StringFieldUpdateOperationsInput | string
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: userUpdateOneRequiredWithoutContentNestedInput
    store?: storeUpdateOneRequiredWithoutContentNestedInput
    subscription?: subscriptionUpdateManyWithoutContentNestedInput
    FanEngagement?: FanEngagementUpdateManyWithoutContentNestedInput
    favourite_content?: favourite_contentUpdateManyWithoutContentNestedInput
  }

  export type contentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: StringFieldUpdateOperationsInput | string
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storeId?: StringFieldUpdateOperationsInput | string
    artistId?: StringFieldUpdateOperationsInput | string
    subscription?: subscriptionUncheckedUpdateManyWithoutContentNestedInput
    FanEngagement?: FanEngagementUncheckedUpdateManyWithoutContentNestedInput
    favourite_content?: favourite_contentUncheckedUpdateManyWithoutContentNestedInput
  }

  export type contentCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    mediaUrl: string
    thumbnailUrl?: string | null
    isPublished?: boolean
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    storeId: string
    artistId: string
  }

  export type contentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: StringFieldUpdateOperationsInput | string
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type contentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: StringFieldUpdateOperationsInput | string
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storeId?: StringFieldUpdateOperationsInput | string
    artistId?: StringFieldUpdateOperationsInput | string
  }

  export type storeCreateInput = {
    id?: string
    storeName?: string | null
    storeLogo?: string | null
    imagePublicID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    order?: orderCreateNestedManyWithoutStoreInput
    payment?: paymentCreateNestedManyWithoutStoreInput
    products?: productCreateNestedManyWithoutStoreInput
    storeOwner?: userCreateNestedOneWithoutStoreInput
    content?: contentCreateNestedManyWithoutStoreInput
    favourite_content?: favourite_contentCreateNestedManyWithoutStoreInput
  }

  export type storeUncheckedCreateInput = {
    id?: string
    storeName?: string | null
    storeLogo?: string | null
    imagePublicID?: string | null
    storeOwnerID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    order?: orderUncheckedCreateNestedManyWithoutStoreInput
    payment?: paymentUncheckedCreateNestedManyWithoutStoreInput
    products?: productUncheckedCreateNestedManyWithoutStoreInput
    content?: contentUncheckedCreateNestedManyWithoutStoreInput
    favourite_content?: favourite_contentUncheckedCreateNestedManyWithoutStoreInput
  }

  export type storeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    storeLogo?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    order?: orderUpdateManyWithoutStoreNestedInput
    payment?: paymentUpdateManyWithoutStoreNestedInput
    products?: productUpdateManyWithoutStoreNestedInput
    storeOwner?: userUpdateOneWithoutStoreNestedInput
    content?: contentUpdateManyWithoutStoreNestedInput
    favourite_content?: favourite_contentUpdateManyWithoutStoreNestedInput
  }

  export type storeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    storeLogo?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    storeOwnerID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    order?: orderUncheckedUpdateManyWithoutStoreNestedInput
    payment?: paymentUncheckedUpdateManyWithoutStoreNestedInput
    products?: productUncheckedUpdateManyWithoutStoreNestedInput
    content?: contentUncheckedUpdateManyWithoutStoreNestedInput
    favourite_content?: favourite_contentUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type storeCreateManyInput = {
    id?: string
    storeName?: string | null
    storeLogo?: string | null
    imagePublicID?: string | null
    storeOwnerID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
  }

  export type storeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    storeLogo?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type storeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    storeLogo?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    storeOwnerID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type productCreateInput = {
    id?: string
    productName: string
    description: string
    quantity?: number | null
    price: string
    rating?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderProducts?: orderProductsCreateNestedManyWithoutProductInput
    productImage?: productImageCreateNestedOneWithoutProductInput
    store?: storeCreateNestedOneWithoutProductsInput
    ratings?: ratingCreateNestedManyWithoutProductInput
    reviews?: reviewCreateNestedManyWithoutProductInput
    favourite_content?: favourite_contentCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateInput = {
    id?: string
    productName: string
    description: string
    productImageID?: string | null
    quantity?: number | null
    price: string
    rating?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    storeId?: string | null
    orderProducts?: orderProductsUncheckedCreateNestedManyWithoutProductInput
    ratings?: ratingUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewUncheckedCreateNestedManyWithoutProductInput
    favourite_content?: favourite_contentUncheckedCreateNestedManyWithoutProductInput
  }

  export type productUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderProducts?: orderProductsUpdateManyWithoutProductNestedInput
    productImage?: productImageUpdateOneWithoutProductNestedInput
    store?: storeUpdateOneWithoutProductsNestedInput
    ratings?: ratingUpdateManyWithoutProductNestedInput
    reviews?: reviewUpdateManyWithoutProductNestedInput
    favourite_content?: favourite_contentUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    productImageID?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    orderProducts?: orderProductsUncheckedUpdateManyWithoutProductNestedInput
    ratings?: ratingUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewUncheckedUpdateManyWithoutProductNestedInput
    favourite_content?: favourite_contentUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productCreateManyInput = {
    id?: string
    productName: string
    description: string
    productImageID?: string | null
    quantity?: number | null
    price: string
    rating?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    storeId?: string | null
  }

  export type productUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    productImageID?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type reviewCreateInput = {
    id?: string
    review?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product?: productCreateNestedOneWithoutReviewsInput
    user?: userCreateNestedOneWithoutReviewInput
  }

  export type reviewUncheckedCreateInput = {
    id?: string
    userID?: string | null
    productID?: string | null
    review?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type reviewUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    review?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: productUpdateOneWithoutReviewsNestedInput
    user?: userUpdateOneWithoutReviewNestedInput
  }

  export type reviewUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
    productID?: NullableStringFieldUpdateOperationsInput | string | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reviewCreateManyInput = {
    id?: string
    userID?: string | null
    productID?: string | null
    review?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type reviewUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    review?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reviewUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
    productID?: NullableStringFieldUpdateOperationsInput | string | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ratingCreateInput = {
    id?: string
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product?: productCreateNestedOneWithoutRatingsInput
    user?: userCreateNestedOneWithoutRatingInput
  }

  export type ratingUncheckedCreateInput = {
    id?: string
    userID?: string | null
    productID?: string | null
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ratingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: productUpdateOneWithoutRatingsNestedInput
    user?: userUpdateOneWithoutRatingNestedInput
  }

  export type ratingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
    productID?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ratingCreateManyInput = {
    id?: string
    userID?: string | null
    productID?: string | null
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ratingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ratingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
    productID?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productImageCreateInput = {
    id?: string
    productImage?: string | null
    imagePublicID?: string | null
    productImageID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product?: productCreateNestedManyWithoutProductImageInput
  }

  export type productImageUncheckedCreateInput = {
    id?: string
    productImage?: string | null
    imagePublicID?: string | null
    productImageID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product?: productUncheckedCreateNestedManyWithoutProductImageInput
  }

  export type productImageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productImage?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    productImageID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: productUpdateManyWithoutProductImageNestedInput
  }

  export type productImageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productImage?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    productImageID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: productUncheckedUpdateManyWithoutProductImageNestedInput
  }

  export type productImageCreateManyInput = {
    id?: string
    productImage?: string | null
    imagePublicID?: string | null
    productImageID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type productImageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    productImage?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    productImageID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productImageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productImage?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    productImageID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type paymentCreateInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod?: string | null
    paymentStatus?: string | null
    type?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentRef?: string | null
    order?: orderCreateNestedOneWithoutPaymentInput
    store?: storeCreateNestedOneWithoutPaymentInput
    user?: userCreateNestedOneWithoutPaymentInput
    subscription?: subscriptionCreateNestedManyWithoutPaymentInput
  }

  export type paymentUncheckedCreateInput = {
    id?: string
    userID?: string | null
    storeID?: string | null
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod?: string | null
    paymentStatus?: string | null
    type?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderId?: string | null
    paymentRef?: string | null
    subscription?: subscriptionUncheckedCreateNestedManyWithoutPaymentInput
  }

  export type paymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentRef?: NullableStringFieldUpdateOperationsInput | string | null
    order?: orderUpdateOneWithoutPaymentNestedInput
    store?: storeUpdateOneWithoutPaymentNestedInput
    user?: userUpdateOneWithoutPaymentNestedInput
    subscription?: subscriptionUpdateManyWithoutPaymentNestedInput
  }

  export type paymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
    storeID?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentRef?: NullableStringFieldUpdateOperationsInput | string | null
    subscription?: subscriptionUncheckedUpdateManyWithoutPaymentNestedInput
  }

  export type paymentCreateManyInput = {
    id?: string
    userID?: string | null
    storeID?: string | null
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod?: string | null
    paymentStatus?: string | null
    type?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderId?: string | null
    paymentRef?: string | null
  }

  export type paymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentRef?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type paymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
    storeID?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentRef?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type orderCreateInput = {
    id?: string
    shippingAddress?: string | null
    amount: Decimal | DecimalJsLike | number | string
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    store?: storeCreateNestedOneWithoutOrderInput
    user?: userCreateNestedOneWithoutOrderInput
    orderProducts?: orderProductsCreateNestedManyWithoutOrderInput
    payment?: paymentCreateNestedManyWithoutOrderInput
  }

  export type orderUncheckedCreateInput = {
    id?: string
    userID?: string | null
    storeID?: string | null
    shippingAddress?: string | null
    amount: Decimal | DecimalJsLike | number | string
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderProducts?: orderProductsUncheckedCreateNestedManyWithoutOrderInput
    payment?: paymentUncheckedCreateNestedManyWithoutOrderInput
  }

  export type orderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    store?: storeUpdateOneWithoutOrderNestedInput
    user?: userUpdateOneWithoutOrderNestedInput
    orderProducts?: orderProductsUpdateManyWithoutOrderNestedInput
    payment?: paymentUpdateManyWithoutOrderNestedInput
  }

  export type orderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
    storeID?: NullableStringFieldUpdateOperationsInput | string | null
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderProducts?: orderProductsUncheckedUpdateManyWithoutOrderNestedInput
    payment?: paymentUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type orderCreateManyInput = {
    id?: string
    userID?: string | null
    storeID?: string | null
    shippingAddress?: string | null
    amount: Decimal | DecimalJsLike | number | string
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type orderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
    storeID?: NullableStringFieldUpdateOperationsInput | string | null
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderProductsCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    order?: orderCreateNestedOneWithoutOrderProductsInput
    product?: productCreateNestedOneWithoutOrderProductsInput
  }

  export type orderProductsUncheckedCreateInput = {
    id?: string
    orderID?: string | null
    productID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type orderProductsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: orderUpdateOneWithoutOrderProductsNestedInput
    product?: productUpdateOneWithoutOrderProductsNestedInput
  }

  export type orderProductsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderID?: NullableStringFieldUpdateOperationsInput | string | null
    productID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderProductsCreateManyInput = {
    id?: string
    orderID?: string | null
    productID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type orderProductsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderProductsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderID?: NullableStringFieldUpdateOperationsInput | string | null
    productID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type subscriptionCreateInput = {
    id?: string
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: userCreateNestedOneWithoutSubscriptionInput
    content?: contentCreateNestedOneWithoutSubscriptionInput
    payment?: paymentCreateNestedOneWithoutSubscriptionInput
  }

  export type subscriptionUncheckedCreateInput = {
    id?: string
    userId: string
    contentId?: string | null
    paymentId?: string | null
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type subscriptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutSubscriptionNestedInput
    content?: contentUpdateOneWithoutSubscriptionNestedInput
    payment?: paymentUpdateOneWithoutSubscriptionNestedInput
  }

  export type subscriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    contentId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type subscriptionCreateManyInput = {
    id?: string
    userId: string
    contentId?: string | null
    paymentId?: string | null
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type subscriptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type subscriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    contentId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FanEngagementCreateInput = {
    id?: string
    action?: string | null
    value?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: userCreateNestedOneWithoutFanEngagementInput
    content: contentCreateNestedOneWithoutFanEngagementInput
  }

  export type FanEngagementUncheckedCreateInput = {
    id?: string
    userId: string
    contentId: string
    action?: string | null
    value?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FanEngagementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: NullableStringFieldUpdateOperationsInput | string | null
    value?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutFanEngagementNestedInput
    content?: contentUpdateOneRequiredWithoutFanEngagementNestedInput
  }

  export type FanEngagementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    action?: NullableStringFieldUpdateOperationsInput | string | null
    value?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FanEngagementCreateManyInput = {
    id?: string
    userId: string
    contentId: string
    action?: string | null
    value?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FanEngagementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: NullableStringFieldUpdateOperationsInput | string | null
    value?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FanEngagementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    action?: NullableStringFieldUpdateOperationsInput | string | null
    value?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type favourite_contentCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: userCreateNestedOneWithoutFavourite_contentInput
    content?: contentCreateNestedOneWithoutFavourite_contentInput
    product?: productCreateNestedOneWithoutFavourite_contentInput
    store?: storeCreateNestedOneWithoutFavourite_contentInput
  }

  export type favourite_contentUncheckedCreateInput = {
    id?: string
    userId: string
    contentId?: string | null
    productId?: string | null
    storeId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type favourite_contentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutFavourite_contentNestedInput
    content?: contentUpdateOneWithoutFavourite_contentNestedInput
    product?: productUpdateOneWithoutFavourite_contentNestedInput
    store?: storeUpdateOneWithoutFavourite_contentNestedInput
  }

  export type favourite_contentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    contentId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type favourite_contentCreateManyInput = {
    id?: string
    userId: string
    contentId?: string | null
    productId?: string | null
    storeId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type favourite_contentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type favourite_contentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    contentId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type acknowledgementCreateInput = {
    id?: string
    type: string
    interval: string
    expiresOn: Date | string
    createdAt?: Date | string
    updateAt?: Date | string
    user: userCreateNestedOneWithoutAcknowledgementsInput
  }

  export type acknowledgementUncheckedCreateInput = {
    id?: string
    type: string
    interval: string
    userId: string
    expiresOn: Date | string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type acknowledgementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    interval?: StringFieldUpdateOperationsInput | string
    expiresOn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutAcknowledgementsNestedInput
  }

  export type acknowledgementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    interval?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expiresOn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type acknowledgementCreateManyInput = {
    id?: string
    type: string
    interval: string
    userId: string
    expiresOn: Date | string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type acknowledgementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    interval?: StringFieldUpdateOperationsInput | string
    expiresOn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type acknowledgementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    interval?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expiresOn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AcknowledgementListRelationFilter = {
    every?: acknowledgementWhereInput
    some?: acknowledgementWhereInput
    none?: acknowledgementWhereInput
  }

  export type OrderListRelationFilter = {
    every?: orderWhereInput
    some?: orderWhereInput
    none?: orderWhereInput
  }

  export type PaymentListRelationFilter = {
    every?: paymentWhereInput
    some?: paymentWhereInput
    none?: paymentWhereInput
  }

  export type ContentListRelationFilter = {
    every?: contentWhereInput
    some?: contentWhereInput
    none?: contentWhereInput
  }

  export type StoreListRelationFilter = {
    every?: storeWhereInput
    some?: storeWhereInput
    none?: storeWhereInput
  }

  export type ReviewListRelationFilter = {
    every?: reviewWhereInput
    some?: reviewWhereInput
    none?: reviewWhereInput
  }

  export type RatingListRelationFilter = {
    every?: ratingWhereInput
    some?: ratingWhereInput
    none?: ratingWhereInput
  }

  export type SubscriptionListRelationFilter = {
    every?: subscriptionWhereInput
    some?: subscriptionWhereInput
    none?: subscriptionWhereInput
  }

  export type FanEngagementListRelationFilter = {
    every?: FanEngagementWhereInput
    some?: FanEngagementWhereInput
    none?: FanEngagementWhereInput
  }

  export type Favourite_contentListRelationFilter = {
    every?: favourite_contentWhereInput
    some?: favourite_contentWhereInput
    none?: favourite_contentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type acknowledgementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type orderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type paymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type contentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type storeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type reviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ratingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type subscriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FanEngagementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type favourite_contentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profile_image_url?: SortOrder
    uploadedProfileImage?: SortOrder
    category?: SortOrder
    imagePublicID?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    username?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profile_image_url?: SortOrder
    uploadedProfileImage?: SortOrder
    category?: SortOrder
    imagePublicID?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    username?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profile_image_url?: SortOrder
    uploadedProfileImage?: SortOrder
    category?: SortOrder
    imagePublicID?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    username?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserScalarRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type StoreScalarRelationFilter = {
    is?: storeWhereInput
    isNot?: storeWhereInput
  }

  export type contentCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    mediaUrl?: SortOrder
    thumbnailUrl?: SortOrder
    isPublished?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    storeId?: SortOrder
    artistId?: SortOrder
  }

  export type contentMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    mediaUrl?: SortOrder
    thumbnailUrl?: SortOrder
    isPublished?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    storeId?: SortOrder
    artistId?: SortOrder
  }

  export type contentMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    mediaUrl?: SortOrder
    thumbnailUrl?: SortOrder
    isPublished?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    storeId?: SortOrder
    artistId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ProductListRelationFilter = {
    every?: productWhereInput
    some?: productWhereInput
    none?: productWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: userWhereInput | null
    isNot?: userWhereInput | null
  }

  export type productOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type storeCountOrderByAggregateInput = {
    id?: SortOrder
    storeName?: SortOrder
    storeLogo?: SortOrder
    imagePublicID?: SortOrder
    storeOwnerID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type storeMaxOrderByAggregateInput = {
    id?: SortOrder
    storeName?: SortOrder
    storeLogo?: SortOrder
    imagePublicID?: SortOrder
    storeOwnerID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type storeMinOrderByAggregateInput = {
    id?: SortOrder
    storeName?: SortOrder
    storeLogo?: SortOrder
    imagePublicID?: SortOrder
    storeOwnerID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type OrderProductsListRelationFilter = {
    every?: orderProductsWhereInput
    some?: orderProductsWhereInput
    none?: orderProductsWhereInput
  }

  export type ProductImageNullableScalarRelationFilter = {
    is?: productImageWhereInput | null
    isNot?: productImageWhereInput | null
  }

  export type StoreNullableScalarRelationFilter = {
    is?: storeWhereInput | null
    isNot?: storeWhereInput | null
  }

  export type orderProductsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type productCountOrderByAggregateInput = {
    id?: SortOrder
    productName?: SortOrder
    description?: SortOrder
    productImageID?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    storeId?: SortOrder
  }

  export type productAvgOrderByAggregateInput = {
    quantity?: SortOrder
    rating?: SortOrder
  }

  export type productMaxOrderByAggregateInput = {
    id?: SortOrder
    productName?: SortOrder
    description?: SortOrder
    productImageID?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    storeId?: SortOrder
  }

  export type productMinOrderByAggregateInput = {
    id?: SortOrder
    productName?: SortOrder
    description?: SortOrder
    productImageID?: SortOrder
    quantity?: SortOrder
    price?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    storeId?: SortOrder
  }

  export type productSumOrderByAggregateInput = {
    quantity?: SortOrder
    rating?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type ProductNullableScalarRelationFilter = {
    is?: productWhereInput | null
    isNot?: productWhereInput | null
  }

  export type reviewCountOrderByAggregateInput = {
    id?: SortOrder
    userID?: SortOrder
    productID?: SortOrder
    review?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type reviewMaxOrderByAggregateInput = {
    id?: SortOrder
    userID?: SortOrder
    productID?: SortOrder
    review?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type reviewMinOrderByAggregateInput = {
    id?: SortOrder
    userID?: SortOrder
    productID?: SortOrder
    review?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ratingCountOrderByAggregateInput = {
    id?: SortOrder
    userID?: SortOrder
    productID?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ratingAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type ratingMaxOrderByAggregateInput = {
    id?: SortOrder
    userID?: SortOrder
    productID?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ratingMinOrderByAggregateInput = {
    id?: SortOrder
    userID?: SortOrder
    productID?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ratingSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type productImageCountOrderByAggregateInput = {
    id?: SortOrder
    productImage?: SortOrder
    imagePublicID?: SortOrder
    productImageID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type productImageMaxOrderByAggregateInput = {
    id?: SortOrder
    productImage?: SortOrder
    imagePublicID?: SortOrder
    productImageID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type productImageMinOrderByAggregateInput = {
    id?: SortOrder
    productImage?: SortOrder
    imagePublicID?: SortOrder
    productImageID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type OrderNullableScalarRelationFilter = {
    is?: orderWhereInput | null
    isNot?: orderWhereInput | null
  }

  export type paymentCountOrderByAggregateInput = {
    id?: SortOrder
    userID?: SortOrder
    storeID?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    paymentStatus?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orderId?: SortOrder
    paymentRef?: SortOrder
  }

  export type paymentAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type paymentMaxOrderByAggregateInput = {
    id?: SortOrder
    userID?: SortOrder
    storeID?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    paymentStatus?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orderId?: SortOrder
    paymentRef?: SortOrder
  }

  export type paymentMinOrderByAggregateInput = {
    id?: SortOrder
    userID?: SortOrder
    storeID?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    paymentStatus?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orderId?: SortOrder
    paymentRef?: SortOrder
  }

  export type paymentSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type orderCountOrderByAggregateInput = {
    id?: SortOrder
    userID?: SortOrder
    storeID?: SortOrder
    shippingAddress?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type orderAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type orderMaxOrderByAggregateInput = {
    id?: SortOrder
    userID?: SortOrder
    storeID?: SortOrder
    shippingAddress?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type orderMinOrderByAggregateInput = {
    id?: SortOrder
    userID?: SortOrder
    storeID?: SortOrder
    shippingAddress?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type orderSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type orderProductsCountOrderByAggregateInput = {
    id?: SortOrder
    orderID?: SortOrder
    productID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type orderProductsMaxOrderByAggregateInput = {
    id?: SortOrder
    orderID?: SortOrder
    productID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type orderProductsMinOrderByAggregateInput = {
    id?: SortOrder
    orderID?: SortOrder
    productID?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ContentNullableScalarRelationFilter = {
    is?: contentWhereInput | null
    isNot?: contentWhereInput | null
  }

  export type PaymentNullableScalarRelationFilter = {
    is?: paymentWhereInput | null
    isNot?: paymentWhereInput | null
  }

  export type subscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    contentId?: SortOrder
    paymentId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type subscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    contentId?: SortOrder
    paymentId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type subscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    contentId?: SortOrder
    paymentId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ContentScalarRelationFilter = {
    is?: contentWhereInput
    isNot?: contentWhereInput
  }

  export type FanEngagementCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    contentId?: SortOrder
    action?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FanEngagementMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    contentId?: SortOrder
    action?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FanEngagementMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    contentId?: SortOrder
    action?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type favourite_contentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    contentId?: SortOrder
    productId?: SortOrder
    storeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type favourite_contentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    contentId?: SortOrder
    productId?: SortOrder
    storeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type favourite_contentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    contentId?: SortOrder
    productId?: SortOrder
    storeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type acknowledgementCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    interval?: SortOrder
    userId?: SortOrder
    expiresOn?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type acknowledgementMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    interval?: SortOrder
    userId?: SortOrder
    expiresOn?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type acknowledgementMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    interval?: SortOrder
    userId?: SortOrder
    expiresOn?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type acknowledgementCreateNestedManyWithoutUserInput = {
    create?: XOR<acknowledgementCreateWithoutUserInput, acknowledgementUncheckedCreateWithoutUserInput> | acknowledgementCreateWithoutUserInput[] | acknowledgementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: acknowledgementCreateOrConnectWithoutUserInput | acknowledgementCreateOrConnectWithoutUserInput[]
    createMany?: acknowledgementCreateManyUserInputEnvelope
    connect?: acknowledgementWhereUniqueInput | acknowledgementWhereUniqueInput[]
  }

  export type orderCreateNestedManyWithoutUserInput = {
    create?: XOR<orderCreateWithoutUserInput, orderUncheckedCreateWithoutUserInput> | orderCreateWithoutUserInput[] | orderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: orderCreateOrConnectWithoutUserInput | orderCreateOrConnectWithoutUserInput[]
    createMany?: orderCreateManyUserInputEnvelope
    connect?: orderWhereUniqueInput | orderWhereUniqueInput[]
  }

  export type paymentCreateNestedManyWithoutUserInput = {
    create?: XOR<paymentCreateWithoutUserInput, paymentUncheckedCreateWithoutUserInput> | paymentCreateWithoutUserInput[] | paymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutUserInput | paymentCreateOrConnectWithoutUserInput[]
    createMany?: paymentCreateManyUserInputEnvelope
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
  }

  export type contentCreateNestedManyWithoutArtistInput = {
    create?: XOR<contentCreateWithoutArtistInput, contentUncheckedCreateWithoutArtistInput> | contentCreateWithoutArtistInput[] | contentUncheckedCreateWithoutArtistInput[]
    connectOrCreate?: contentCreateOrConnectWithoutArtistInput | contentCreateOrConnectWithoutArtistInput[]
    createMany?: contentCreateManyArtistInputEnvelope
    connect?: contentWhereUniqueInput | contentWhereUniqueInput[]
  }

  export type storeCreateNestedManyWithoutStoreOwnerInput = {
    create?: XOR<storeCreateWithoutStoreOwnerInput, storeUncheckedCreateWithoutStoreOwnerInput> | storeCreateWithoutStoreOwnerInput[] | storeUncheckedCreateWithoutStoreOwnerInput[]
    connectOrCreate?: storeCreateOrConnectWithoutStoreOwnerInput | storeCreateOrConnectWithoutStoreOwnerInput[]
    createMany?: storeCreateManyStoreOwnerInputEnvelope
    connect?: storeWhereUniqueInput | storeWhereUniqueInput[]
  }

  export type reviewCreateNestedManyWithoutUserInput = {
    create?: XOR<reviewCreateWithoutUserInput, reviewUncheckedCreateWithoutUserInput> | reviewCreateWithoutUserInput[] | reviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reviewCreateOrConnectWithoutUserInput | reviewCreateOrConnectWithoutUserInput[]
    createMany?: reviewCreateManyUserInputEnvelope
    connect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
  }

  export type ratingCreateNestedManyWithoutUserInput = {
    create?: XOR<ratingCreateWithoutUserInput, ratingUncheckedCreateWithoutUserInput> | ratingCreateWithoutUserInput[] | ratingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ratingCreateOrConnectWithoutUserInput | ratingCreateOrConnectWithoutUserInput[]
    createMany?: ratingCreateManyUserInputEnvelope
    connect?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
  }

  export type subscriptionCreateNestedManyWithoutUserInput = {
    create?: XOR<subscriptionCreateWithoutUserInput, subscriptionUncheckedCreateWithoutUserInput> | subscriptionCreateWithoutUserInput[] | subscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: subscriptionCreateOrConnectWithoutUserInput | subscriptionCreateOrConnectWithoutUserInput[]
    createMany?: subscriptionCreateManyUserInputEnvelope
    connect?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
  }

  export type FanEngagementCreateNestedManyWithoutUserInput = {
    create?: XOR<FanEngagementCreateWithoutUserInput, FanEngagementUncheckedCreateWithoutUserInput> | FanEngagementCreateWithoutUserInput[] | FanEngagementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FanEngagementCreateOrConnectWithoutUserInput | FanEngagementCreateOrConnectWithoutUserInput[]
    createMany?: FanEngagementCreateManyUserInputEnvelope
    connect?: FanEngagementWhereUniqueInput | FanEngagementWhereUniqueInput[]
  }

  export type favourite_contentCreateNestedManyWithoutUserInput = {
    create?: XOR<favourite_contentCreateWithoutUserInput, favourite_contentUncheckedCreateWithoutUserInput> | favourite_contentCreateWithoutUserInput[] | favourite_contentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: favourite_contentCreateOrConnectWithoutUserInput | favourite_contentCreateOrConnectWithoutUserInput[]
    createMany?: favourite_contentCreateManyUserInputEnvelope
    connect?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
  }

  export type acknowledgementUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<acknowledgementCreateWithoutUserInput, acknowledgementUncheckedCreateWithoutUserInput> | acknowledgementCreateWithoutUserInput[] | acknowledgementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: acknowledgementCreateOrConnectWithoutUserInput | acknowledgementCreateOrConnectWithoutUserInput[]
    createMany?: acknowledgementCreateManyUserInputEnvelope
    connect?: acknowledgementWhereUniqueInput | acknowledgementWhereUniqueInput[]
  }

  export type orderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<orderCreateWithoutUserInput, orderUncheckedCreateWithoutUserInput> | orderCreateWithoutUserInput[] | orderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: orderCreateOrConnectWithoutUserInput | orderCreateOrConnectWithoutUserInput[]
    createMany?: orderCreateManyUserInputEnvelope
    connect?: orderWhereUniqueInput | orderWhereUniqueInput[]
  }

  export type paymentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<paymentCreateWithoutUserInput, paymentUncheckedCreateWithoutUserInput> | paymentCreateWithoutUserInput[] | paymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutUserInput | paymentCreateOrConnectWithoutUserInput[]
    createMany?: paymentCreateManyUserInputEnvelope
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
  }

  export type contentUncheckedCreateNestedManyWithoutArtistInput = {
    create?: XOR<contentCreateWithoutArtistInput, contentUncheckedCreateWithoutArtistInput> | contentCreateWithoutArtistInput[] | contentUncheckedCreateWithoutArtistInput[]
    connectOrCreate?: contentCreateOrConnectWithoutArtistInput | contentCreateOrConnectWithoutArtistInput[]
    createMany?: contentCreateManyArtistInputEnvelope
    connect?: contentWhereUniqueInput | contentWhereUniqueInput[]
  }

  export type storeUncheckedCreateNestedManyWithoutStoreOwnerInput = {
    create?: XOR<storeCreateWithoutStoreOwnerInput, storeUncheckedCreateWithoutStoreOwnerInput> | storeCreateWithoutStoreOwnerInput[] | storeUncheckedCreateWithoutStoreOwnerInput[]
    connectOrCreate?: storeCreateOrConnectWithoutStoreOwnerInput | storeCreateOrConnectWithoutStoreOwnerInput[]
    createMany?: storeCreateManyStoreOwnerInputEnvelope
    connect?: storeWhereUniqueInput | storeWhereUniqueInput[]
  }

  export type reviewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<reviewCreateWithoutUserInput, reviewUncheckedCreateWithoutUserInput> | reviewCreateWithoutUserInput[] | reviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reviewCreateOrConnectWithoutUserInput | reviewCreateOrConnectWithoutUserInput[]
    createMany?: reviewCreateManyUserInputEnvelope
    connect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
  }

  export type ratingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ratingCreateWithoutUserInput, ratingUncheckedCreateWithoutUserInput> | ratingCreateWithoutUserInput[] | ratingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ratingCreateOrConnectWithoutUserInput | ratingCreateOrConnectWithoutUserInput[]
    createMany?: ratingCreateManyUserInputEnvelope
    connect?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
  }

  export type subscriptionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<subscriptionCreateWithoutUserInput, subscriptionUncheckedCreateWithoutUserInput> | subscriptionCreateWithoutUserInput[] | subscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: subscriptionCreateOrConnectWithoutUserInput | subscriptionCreateOrConnectWithoutUserInput[]
    createMany?: subscriptionCreateManyUserInputEnvelope
    connect?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
  }

  export type FanEngagementUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FanEngagementCreateWithoutUserInput, FanEngagementUncheckedCreateWithoutUserInput> | FanEngagementCreateWithoutUserInput[] | FanEngagementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FanEngagementCreateOrConnectWithoutUserInput | FanEngagementCreateOrConnectWithoutUserInput[]
    createMany?: FanEngagementCreateManyUserInputEnvelope
    connect?: FanEngagementWhereUniqueInput | FanEngagementWhereUniqueInput[]
  }

  export type favourite_contentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<favourite_contentCreateWithoutUserInput, favourite_contentUncheckedCreateWithoutUserInput> | favourite_contentCreateWithoutUserInput[] | favourite_contentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: favourite_contentCreateOrConnectWithoutUserInput | favourite_contentCreateOrConnectWithoutUserInput[]
    createMany?: favourite_contentCreateManyUserInputEnvelope
    connect?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type acknowledgementUpdateManyWithoutUserNestedInput = {
    create?: XOR<acknowledgementCreateWithoutUserInput, acknowledgementUncheckedCreateWithoutUserInput> | acknowledgementCreateWithoutUserInput[] | acknowledgementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: acknowledgementCreateOrConnectWithoutUserInput | acknowledgementCreateOrConnectWithoutUserInput[]
    upsert?: acknowledgementUpsertWithWhereUniqueWithoutUserInput | acknowledgementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: acknowledgementCreateManyUserInputEnvelope
    set?: acknowledgementWhereUniqueInput | acknowledgementWhereUniqueInput[]
    disconnect?: acknowledgementWhereUniqueInput | acknowledgementWhereUniqueInput[]
    delete?: acknowledgementWhereUniqueInput | acknowledgementWhereUniqueInput[]
    connect?: acknowledgementWhereUniqueInput | acknowledgementWhereUniqueInput[]
    update?: acknowledgementUpdateWithWhereUniqueWithoutUserInput | acknowledgementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: acknowledgementUpdateManyWithWhereWithoutUserInput | acknowledgementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: acknowledgementScalarWhereInput | acknowledgementScalarWhereInput[]
  }

  export type orderUpdateManyWithoutUserNestedInput = {
    create?: XOR<orderCreateWithoutUserInput, orderUncheckedCreateWithoutUserInput> | orderCreateWithoutUserInput[] | orderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: orderCreateOrConnectWithoutUserInput | orderCreateOrConnectWithoutUserInput[]
    upsert?: orderUpsertWithWhereUniqueWithoutUserInput | orderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: orderCreateManyUserInputEnvelope
    set?: orderWhereUniqueInput | orderWhereUniqueInput[]
    disconnect?: orderWhereUniqueInput | orderWhereUniqueInput[]
    delete?: orderWhereUniqueInput | orderWhereUniqueInput[]
    connect?: orderWhereUniqueInput | orderWhereUniqueInput[]
    update?: orderUpdateWithWhereUniqueWithoutUserInput | orderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: orderUpdateManyWithWhereWithoutUserInput | orderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: orderScalarWhereInput | orderScalarWhereInput[]
  }

  export type paymentUpdateManyWithoutUserNestedInput = {
    create?: XOR<paymentCreateWithoutUserInput, paymentUncheckedCreateWithoutUserInput> | paymentCreateWithoutUserInput[] | paymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutUserInput | paymentCreateOrConnectWithoutUserInput[]
    upsert?: paymentUpsertWithWhereUniqueWithoutUserInput | paymentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: paymentCreateManyUserInputEnvelope
    set?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    disconnect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    delete?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    update?: paymentUpdateWithWhereUniqueWithoutUserInput | paymentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: paymentUpdateManyWithWhereWithoutUserInput | paymentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: paymentScalarWhereInput | paymentScalarWhereInput[]
  }

  export type contentUpdateManyWithoutArtistNestedInput = {
    create?: XOR<contentCreateWithoutArtistInput, contentUncheckedCreateWithoutArtistInput> | contentCreateWithoutArtistInput[] | contentUncheckedCreateWithoutArtistInput[]
    connectOrCreate?: contentCreateOrConnectWithoutArtistInput | contentCreateOrConnectWithoutArtistInput[]
    upsert?: contentUpsertWithWhereUniqueWithoutArtistInput | contentUpsertWithWhereUniqueWithoutArtistInput[]
    createMany?: contentCreateManyArtistInputEnvelope
    set?: contentWhereUniqueInput | contentWhereUniqueInput[]
    disconnect?: contentWhereUniqueInput | contentWhereUniqueInput[]
    delete?: contentWhereUniqueInput | contentWhereUniqueInput[]
    connect?: contentWhereUniqueInput | contentWhereUniqueInput[]
    update?: contentUpdateWithWhereUniqueWithoutArtistInput | contentUpdateWithWhereUniqueWithoutArtistInput[]
    updateMany?: contentUpdateManyWithWhereWithoutArtistInput | contentUpdateManyWithWhereWithoutArtistInput[]
    deleteMany?: contentScalarWhereInput | contentScalarWhereInput[]
  }

  export type storeUpdateManyWithoutStoreOwnerNestedInput = {
    create?: XOR<storeCreateWithoutStoreOwnerInput, storeUncheckedCreateWithoutStoreOwnerInput> | storeCreateWithoutStoreOwnerInput[] | storeUncheckedCreateWithoutStoreOwnerInput[]
    connectOrCreate?: storeCreateOrConnectWithoutStoreOwnerInput | storeCreateOrConnectWithoutStoreOwnerInput[]
    upsert?: storeUpsertWithWhereUniqueWithoutStoreOwnerInput | storeUpsertWithWhereUniqueWithoutStoreOwnerInput[]
    createMany?: storeCreateManyStoreOwnerInputEnvelope
    set?: storeWhereUniqueInput | storeWhereUniqueInput[]
    disconnect?: storeWhereUniqueInput | storeWhereUniqueInput[]
    delete?: storeWhereUniqueInput | storeWhereUniqueInput[]
    connect?: storeWhereUniqueInput | storeWhereUniqueInput[]
    update?: storeUpdateWithWhereUniqueWithoutStoreOwnerInput | storeUpdateWithWhereUniqueWithoutStoreOwnerInput[]
    updateMany?: storeUpdateManyWithWhereWithoutStoreOwnerInput | storeUpdateManyWithWhereWithoutStoreOwnerInput[]
    deleteMany?: storeScalarWhereInput | storeScalarWhereInput[]
  }

  export type reviewUpdateManyWithoutUserNestedInput = {
    create?: XOR<reviewCreateWithoutUserInput, reviewUncheckedCreateWithoutUserInput> | reviewCreateWithoutUserInput[] | reviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reviewCreateOrConnectWithoutUserInput | reviewCreateOrConnectWithoutUserInput[]
    upsert?: reviewUpsertWithWhereUniqueWithoutUserInput | reviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: reviewCreateManyUserInputEnvelope
    set?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    disconnect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    delete?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    connect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    update?: reviewUpdateWithWhereUniqueWithoutUserInput | reviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: reviewUpdateManyWithWhereWithoutUserInput | reviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: reviewScalarWhereInput | reviewScalarWhereInput[]
  }

  export type ratingUpdateManyWithoutUserNestedInput = {
    create?: XOR<ratingCreateWithoutUserInput, ratingUncheckedCreateWithoutUserInput> | ratingCreateWithoutUserInput[] | ratingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ratingCreateOrConnectWithoutUserInput | ratingCreateOrConnectWithoutUserInput[]
    upsert?: ratingUpsertWithWhereUniqueWithoutUserInput | ratingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ratingCreateManyUserInputEnvelope
    set?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    disconnect?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    delete?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    connect?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    update?: ratingUpdateWithWhereUniqueWithoutUserInput | ratingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ratingUpdateManyWithWhereWithoutUserInput | ratingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ratingScalarWhereInput | ratingScalarWhereInput[]
  }

  export type subscriptionUpdateManyWithoutUserNestedInput = {
    create?: XOR<subscriptionCreateWithoutUserInput, subscriptionUncheckedCreateWithoutUserInput> | subscriptionCreateWithoutUserInput[] | subscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: subscriptionCreateOrConnectWithoutUserInput | subscriptionCreateOrConnectWithoutUserInput[]
    upsert?: subscriptionUpsertWithWhereUniqueWithoutUserInput | subscriptionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: subscriptionCreateManyUserInputEnvelope
    set?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
    disconnect?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
    delete?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
    connect?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
    update?: subscriptionUpdateWithWhereUniqueWithoutUserInput | subscriptionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: subscriptionUpdateManyWithWhereWithoutUserInput | subscriptionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: subscriptionScalarWhereInput | subscriptionScalarWhereInput[]
  }

  export type FanEngagementUpdateManyWithoutUserNestedInput = {
    create?: XOR<FanEngagementCreateWithoutUserInput, FanEngagementUncheckedCreateWithoutUserInput> | FanEngagementCreateWithoutUserInput[] | FanEngagementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FanEngagementCreateOrConnectWithoutUserInput | FanEngagementCreateOrConnectWithoutUserInput[]
    upsert?: FanEngagementUpsertWithWhereUniqueWithoutUserInput | FanEngagementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FanEngagementCreateManyUserInputEnvelope
    set?: FanEngagementWhereUniqueInput | FanEngagementWhereUniqueInput[]
    disconnect?: FanEngagementWhereUniqueInput | FanEngagementWhereUniqueInput[]
    delete?: FanEngagementWhereUniqueInput | FanEngagementWhereUniqueInput[]
    connect?: FanEngagementWhereUniqueInput | FanEngagementWhereUniqueInput[]
    update?: FanEngagementUpdateWithWhereUniqueWithoutUserInput | FanEngagementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FanEngagementUpdateManyWithWhereWithoutUserInput | FanEngagementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FanEngagementScalarWhereInput | FanEngagementScalarWhereInput[]
  }

  export type favourite_contentUpdateManyWithoutUserNestedInput = {
    create?: XOR<favourite_contentCreateWithoutUserInput, favourite_contentUncheckedCreateWithoutUserInput> | favourite_contentCreateWithoutUserInput[] | favourite_contentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: favourite_contentCreateOrConnectWithoutUserInput | favourite_contentCreateOrConnectWithoutUserInput[]
    upsert?: favourite_contentUpsertWithWhereUniqueWithoutUserInput | favourite_contentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: favourite_contentCreateManyUserInputEnvelope
    set?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    disconnect?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    delete?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    connect?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    update?: favourite_contentUpdateWithWhereUniqueWithoutUserInput | favourite_contentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: favourite_contentUpdateManyWithWhereWithoutUserInput | favourite_contentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: favourite_contentScalarWhereInput | favourite_contentScalarWhereInput[]
  }

  export type acknowledgementUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<acknowledgementCreateWithoutUserInput, acknowledgementUncheckedCreateWithoutUserInput> | acknowledgementCreateWithoutUserInput[] | acknowledgementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: acknowledgementCreateOrConnectWithoutUserInput | acknowledgementCreateOrConnectWithoutUserInput[]
    upsert?: acknowledgementUpsertWithWhereUniqueWithoutUserInput | acknowledgementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: acknowledgementCreateManyUserInputEnvelope
    set?: acknowledgementWhereUniqueInput | acknowledgementWhereUniqueInput[]
    disconnect?: acknowledgementWhereUniqueInput | acknowledgementWhereUniqueInput[]
    delete?: acknowledgementWhereUniqueInput | acknowledgementWhereUniqueInput[]
    connect?: acknowledgementWhereUniqueInput | acknowledgementWhereUniqueInput[]
    update?: acknowledgementUpdateWithWhereUniqueWithoutUserInput | acknowledgementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: acknowledgementUpdateManyWithWhereWithoutUserInput | acknowledgementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: acknowledgementScalarWhereInput | acknowledgementScalarWhereInput[]
  }

  export type orderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<orderCreateWithoutUserInput, orderUncheckedCreateWithoutUserInput> | orderCreateWithoutUserInput[] | orderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: orderCreateOrConnectWithoutUserInput | orderCreateOrConnectWithoutUserInput[]
    upsert?: orderUpsertWithWhereUniqueWithoutUserInput | orderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: orderCreateManyUserInputEnvelope
    set?: orderWhereUniqueInput | orderWhereUniqueInput[]
    disconnect?: orderWhereUniqueInput | orderWhereUniqueInput[]
    delete?: orderWhereUniqueInput | orderWhereUniqueInput[]
    connect?: orderWhereUniqueInput | orderWhereUniqueInput[]
    update?: orderUpdateWithWhereUniqueWithoutUserInput | orderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: orderUpdateManyWithWhereWithoutUserInput | orderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: orderScalarWhereInput | orderScalarWhereInput[]
  }

  export type paymentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<paymentCreateWithoutUserInput, paymentUncheckedCreateWithoutUserInput> | paymentCreateWithoutUserInput[] | paymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutUserInput | paymentCreateOrConnectWithoutUserInput[]
    upsert?: paymentUpsertWithWhereUniqueWithoutUserInput | paymentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: paymentCreateManyUserInputEnvelope
    set?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    disconnect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    delete?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    update?: paymentUpdateWithWhereUniqueWithoutUserInput | paymentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: paymentUpdateManyWithWhereWithoutUserInput | paymentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: paymentScalarWhereInput | paymentScalarWhereInput[]
  }

  export type contentUncheckedUpdateManyWithoutArtistNestedInput = {
    create?: XOR<contentCreateWithoutArtistInput, contentUncheckedCreateWithoutArtistInput> | contentCreateWithoutArtistInput[] | contentUncheckedCreateWithoutArtistInput[]
    connectOrCreate?: contentCreateOrConnectWithoutArtistInput | contentCreateOrConnectWithoutArtistInput[]
    upsert?: contentUpsertWithWhereUniqueWithoutArtistInput | contentUpsertWithWhereUniqueWithoutArtistInput[]
    createMany?: contentCreateManyArtistInputEnvelope
    set?: contentWhereUniqueInput | contentWhereUniqueInput[]
    disconnect?: contentWhereUniqueInput | contentWhereUniqueInput[]
    delete?: contentWhereUniqueInput | contentWhereUniqueInput[]
    connect?: contentWhereUniqueInput | contentWhereUniqueInput[]
    update?: contentUpdateWithWhereUniqueWithoutArtistInput | contentUpdateWithWhereUniqueWithoutArtistInput[]
    updateMany?: contentUpdateManyWithWhereWithoutArtistInput | contentUpdateManyWithWhereWithoutArtistInput[]
    deleteMany?: contentScalarWhereInput | contentScalarWhereInput[]
  }

  export type storeUncheckedUpdateManyWithoutStoreOwnerNestedInput = {
    create?: XOR<storeCreateWithoutStoreOwnerInput, storeUncheckedCreateWithoutStoreOwnerInput> | storeCreateWithoutStoreOwnerInput[] | storeUncheckedCreateWithoutStoreOwnerInput[]
    connectOrCreate?: storeCreateOrConnectWithoutStoreOwnerInput | storeCreateOrConnectWithoutStoreOwnerInput[]
    upsert?: storeUpsertWithWhereUniqueWithoutStoreOwnerInput | storeUpsertWithWhereUniqueWithoutStoreOwnerInput[]
    createMany?: storeCreateManyStoreOwnerInputEnvelope
    set?: storeWhereUniqueInput | storeWhereUniqueInput[]
    disconnect?: storeWhereUniqueInput | storeWhereUniqueInput[]
    delete?: storeWhereUniqueInput | storeWhereUniqueInput[]
    connect?: storeWhereUniqueInput | storeWhereUniqueInput[]
    update?: storeUpdateWithWhereUniqueWithoutStoreOwnerInput | storeUpdateWithWhereUniqueWithoutStoreOwnerInput[]
    updateMany?: storeUpdateManyWithWhereWithoutStoreOwnerInput | storeUpdateManyWithWhereWithoutStoreOwnerInput[]
    deleteMany?: storeScalarWhereInput | storeScalarWhereInput[]
  }

  export type reviewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<reviewCreateWithoutUserInput, reviewUncheckedCreateWithoutUserInput> | reviewCreateWithoutUserInput[] | reviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: reviewCreateOrConnectWithoutUserInput | reviewCreateOrConnectWithoutUserInput[]
    upsert?: reviewUpsertWithWhereUniqueWithoutUserInput | reviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: reviewCreateManyUserInputEnvelope
    set?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    disconnect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    delete?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    connect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    update?: reviewUpdateWithWhereUniqueWithoutUserInput | reviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: reviewUpdateManyWithWhereWithoutUserInput | reviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: reviewScalarWhereInput | reviewScalarWhereInput[]
  }

  export type ratingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ratingCreateWithoutUserInput, ratingUncheckedCreateWithoutUserInput> | ratingCreateWithoutUserInput[] | ratingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ratingCreateOrConnectWithoutUserInput | ratingCreateOrConnectWithoutUserInput[]
    upsert?: ratingUpsertWithWhereUniqueWithoutUserInput | ratingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ratingCreateManyUserInputEnvelope
    set?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    disconnect?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    delete?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    connect?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    update?: ratingUpdateWithWhereUniqueWithoutUserInput | ratingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ratingUpdateManyWithWhereWithoutUserInput | ratingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ratingScalarWhereInput | ratingScalarWhereInput[]
  }

  export type subscriptionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<subscriptionCreateWithoutUserInput, subscriptionUncheckedCreateWithoutUserInput> | subscriptionCreateWithoutUserInput[] | subscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: subscriptionCreateOrConnectWithoutUserInput | subscriptionCreateOrConnectWithoutUserInput[]
    upsert?: subscriptionUpsertWithWhereUniqueWithoutUserInput | subscriptionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: subscriptionCreateManyUserInputEnvelope
    set?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
    disconnect?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
    delete?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
    connect?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
    update?: subscriptionUpdateWithWhereUniqueWithoutUserInput | subscriptionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: subscriptionUpdateManyWithWhereWithoutUserInput | subscriptionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: subscriptionScalarWhereInput | subscriptionScalarWhereInput[]
  }

  export type FanEngagementUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FanEngagementCreateWithoutUserInput, FanEngagementUncheckedCreateWithoutUserInput> | FanEngagementCreateWithoutUserInput[] | FanEngagementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FanEngagementCreateOrConnectWithoutUserInput | FanEngagementCreateOrConnectWithoutUserInput[]
    upsert?: FanEngagementUpsertWithWhereUniqueWithoutUserInput | FanEngagementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FanEngagementCreateManyUserInputEnvelope
    set?: FanEngagementWhereUniqueInput | FanEngagementWhereUniqueInput[]
    disconnect?: FanEngagementWhereUniqueInput | FanEngagementWhereUniqueInput[]
    delete?: FanEngagementWhereUniqueInput | FanEngagementWhereUniqueInput[]
    connect?: FanEngagementWhereUniqueInput | FanEngagementWhereUniqueInput[]
    update?: FanEngagementUpdateWithWhereUniqueWithoutUserInput | FanEngagementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FanEngagementUpdateManyWithWhereWithoutUserInput | FanEngagementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FanEngagementScalarWhereInput | FanEngagementScalarWhereInput[]
  }

  export type favourite_contentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<favourite_contentCreateWithoutUserInput, favourite_contentUncheckedCreateWithoutUserInput> | favourite_contentCreateWithoutUserInput[] | favourite_contentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: favourite_contentCreateOrConnectWithoutUserInput | favourite_contentCreateOrConnectWithoutUserInput[]
    upsert?: favourite_contentUpsertWithWhereUniqueWithoutUserInput | favourite_contentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: favourite_contentCreateManyUserInputEnvelope
    set?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    disconnect?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    delete?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    connect?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    update?: favourite_contentUpdateWithWhereUniqueWithoutUserInput | favourite_contentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: favourite_contentUpdateManyWithWhereWithoutUserInput | favourite_contentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: favourite_contentScalarWhereInput | favourite_contentScalarWhereInput[]
  }

  export type userCreateNestedOneWithoutContentInput = {
    create?: XOR<userCreateWithoutContentInput, userUncheckedCreateWithoutContentInput>
    connectOrCreate?: userCreateOrConnectWithoutContentInput
    connect?: userWhereUniqueInput
  }

  export type storeCreateNestedOneWithoutContentInput = {
    create?: XOR<storeCreateWithoutContentInput, storeUncheckedCreateWithoutContentInput>
    connectOrCreate?: storeCreateOrConnectWithoutContentInput
    connect?: storeWhereUniqueInput
  }

  export type subscriptionCreateNestedManyWithoutContentInput = {
    create?: XOR<subscriptionCreateWithoutContentInput, subscriptionUncheckedCreateWithoutContentInput> | subscriptionCreateWithoutContentInput[] | subscriptionUncheckedCreateWithoutContentInput[]
    connectOrCreate?: subscriptionCreateOrConnectWithoutContentInput | subscriptionCreateOrConnectWithoutContentInput[]
    createMany?: subscriptionCreateManyContentInputEnvelope
    connect?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
  }

  export type FanEngagementCreateNestedManyWithoutContentInput = {
    create?: XOR<FanEngagementCreateWithoutContentInput, FanEngagementUncheckedCreateWithoutContentInput> | FanEngagementCreateWithoutContentInput[] | FanEngagementUncheckedCreateWithoutContentInput[]
    connectOrCreate?: FanEngagementCreateOrConnectWithoutContentInput | FanEngagementCreateOrConnectWithoutContentInput[]
    createMany?: FanEngagementCreateManyContentInputEnvelope
    connect?: FanEngagementWhereUniqueInput | FanEngagementWhereUniqueInput[]
  }

  export type favourite_contentCreateNestedManyWithoutContentInput = {
    create?: XOR<favourite_contentCreateWithoutContentInput, favourite_contentUncheckedCreateWithoutContentInput> | favourite_contentCreateWithoutContentInput[] | favourite_contentUncheckedCreateWithoutContentInput[]
    connectOrCreate?: favourite_contentCreateOrConnectWithoutContentInput | favourite_contentCreateOrConnectWithoutContentInput[]
    createMany?: favourite_contentCreateManyContentInputEnvelope
    connect?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
  }

  export type subscriptionUncheckedCreateNestedManyWithoutContentInput = {
    create?: XOR<subscriptionCreateWithoutContentInput, subscriptionUncheckedCreateWithoutContentInput> | subscriptionCreateWithoutContentInput[] | subscriptionUncheckedCreateWithoutContentInput[]
    connectOrCreate?: subscriptionCreateOrConnectWithoutContentInput | subscriptionCreateOrConnectWithoutContentInput[]
    createMany?: subscriptionCreateManyContentInputEnvelope
    connect?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
  }

  export type FanEngagementUncheckedCreateNestedManyWithoutContentInput = {
    create?: XOR<FanEngagementCreateWithoutContentInput, FanEngagementUncheckedCreateWithoutContentInput> | FanEngagementCreateWithoutContentInput[] | FanEngagementUncheckedCreateWithoutContentInput[]
    connectOrCreate?: FanEngagementCreateOrConnectWithoutContentInput | FanEngagementCreateOrConnectWithoutContentInput[]
    createMany?: FanEngagementCreateManyContentInputEnvelope
    connect?: FanEngagementWhereUniqueInput | FanEngagementWhereUniqueInput[]
  }

  export type favourite_contentUncheckedCreateNestedManyWithoutContentInput = {
    create?: XOR<favourite_contentCreateWithoutContentInput, favourite_contentUncheckedCreateWithoutContentInput> | favourite_contentCreateWithoutContentInput[] | favourite_contentUncheckedCreateWithoutContentInput[]
    connectOrCreate?: favourite_contentCreateOrConnectWithoutContentInput | favourite_contentCreateOrConnectWithoutContentInput[]
    createMany?: favourite_contentCreateManyContentInputEnvelope
    connect?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type userUpdateOneRequiredWithoutContentNestedInput = {
    create?: XOR<userCreateWithoutContentInput, userUncheckedCreateWithoutContentInput>
    connectOrCreate?: userCreateOrConnectWithoutContentInput
    upsert?: userUpsertWithoutContentInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutContentInput, userUpdateWithoutContentInput>, userUncheckedUpdateWithoutContentInput>
  }

  export type storeUpdateOneRequiredWithoutContentNestedInput = {
    create?: XOR<storeCreateWithoutContentInput, storeUncheckedCreateWithoutContentInput>
    connectOrCreate?: storeCreateOrConnectWithoutContentInput
    upsert?: storeUpsertWithoutContentInput
    connect?: storeWhereUniqueInput
    update?: XOR<XOR<storeUpdateToOneWithWhereWithoutContentInput, storeUpdateWithoutContentInput>, storeUncheckedUpdateWithoutContentInput>
  }

  export type subscriptionUpdateManyWithoutContentNestedInput = {
    create?: XOR<subscriptionCreateWithoutContentInput, subscriptionUncheckedCreateWithoutContentInput> | subscriptionCreateWithoutContentInput[] | subscriptionUncheckedCreateWithoutContentInput[]
    connectOrCreate?: subscriptionCreateOrConnectWithoutContentInput | subscriptionCreateOrConnectWithoutContentInput[]
    upsert?: subscriptionUpsertWithWhereUniqueWithoutContentInput | subscriptionUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: subscriptionCreateManyContentInputEnvelope
    set?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
    disconnect?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
    delete?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
    connect?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
    update?: subscriptionUpdateWithWhereUniqueWithoutContentInput | subscriptionUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: subscriptionUpdateManyWithWhereWithoutContentInput | subscriptionUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: subscriptionScalarWhereInput | subscriptionScalarWhereInput[]
  }

  export type FanEngagementUpdateManyWithoutContentNestedInput = {
    create?: XOR<FanEngagementCreateWithoutContentInput, FanEngagementUncheckedCreateWithoutContentInput> | FanEngagementCreateWithoutContentInput[] | FanEngagementUncheckedCreateWithoutContentInput[]
    connectOrCreate?: FanEngagementCreateOrConnectWithoutContentInput | FanEngagementCreateOrConnectWithoutContentInput[]
    upsert?: FanEngagementUpsertWithWhereUniqueWithoutContentInput | FanEngagementUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: FanEngagementCreateManyContentInputEnvelope
    set?: FanEngagementWhereUniqueInput | FanEngagementWhereUniqueInput[]
    disconnect?: FanEngagementWhereUniqueInput | FanEngagementWhereUniqueInput[]
    delete?: FanEngagementWhereUniqueInput | FanEngagementWhereUniqueInput[]
    connect?: FanEngagementWhereUniqueInput | FanEngagementWhereUniqueInput[]
    update?: FanEngagementUpdateWithWhereUniqueWithoutContentInput | FanEngagementUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: FanEngagementUpdateManyWithWhereWithoutContentInput | FanEngagementUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: FanEngagementScalarWhereInput | FanEngagementScalarWhereInput[]
  }

  export type favourite_contentUpdateManyWithoutContentNestedInput = {
    create?: XOR<favourite_contentCreateWithoutContentInput, favourite_contentUncheckedCreateWithoutContentInput> | favourite_contentCreateWithoutContentInput[] | favourite_contentUncheckedCreateWithoutContentInput[]
    connectOrCreate?: favourite_contentCreateOrConnectWithoutContentInput | favourite_contentCreateOrConnectWithoutContentInput[]
    upsert?: favourite_contentUpsertWithWhereUniqueWithoutContentInput | favourite_contentUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: favourite_contentCreateManyContentInputEnvelope
    set?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    disconnect?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    delete?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    connect?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    update?: favourite_contentUpdateWithWhereUniqueWithoutContentInput | favourite_contentUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: favourite_contentUpdateManyWithWhereWithoutContentInput | favourite_contentUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: favourite_contentScalarWhereInput | favourite_contentScalarWhereInput[]
  }

  export type subscriptionUncheckedUpdateManyWithoutContentNestedInput = {
    create?: XOR<subscriptionCreateWithoutContentInput, subscriptionUncheckedCreateWithoutContentInput> | subscriptionCreateWithoutContentInput[] | subscriptionUncheckedCreateWithoutContentInput[]
    connectOrCreate?: subscriptionCreateOrConnectWithoutContentInput | subscriptionCreateOrConnectWithoutContentInput[]
    upsert?: subscriptionUpsertWithWhereUniqueWithoutContentInput | subscriptionUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: subscriptionCreateManyContentInputEnvelope
    set?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
    disconnect?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
    delete?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
    connect?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
    update?: subscriptionUpdateWithWhereUniqueWithoutContentInput | subscriptionUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: subscriptionUpdateManyWithWhereWithoutContentInput | subscriptionUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: subscriptionScalarWhereInput | subscriptionScalarWhereInput[]
  }

  export type FanEngagementUncheckedUpdateManyWithoutContentNestedInput = {
    create?: XOR<FanEngagementCreateWithoutContentInput, FanEngagementUncheckedCreateWithoutContentInput> | FanEngagementCreateWithoutContentInput[] | FanEngagementUncheckedCreateWithoutContentInput[]
    connectOrCreate?: FanEngagementCreateOrConnectWithoutContentInput | FanEngagementCreateOrConnectWithoutContentInput[]
    upsert?: FanEngagementUpsertWithWhereUniqueWithoutContentInput | FanEngagementUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: FanEngagementCreateManyContentInputEnvelope
    set?: FanEngagementWhereUniqueInput | FanEngagementWhereUniqueInput[]
    disconnect?: FanEngagementWhereUniqueInput | FanEngagementWhereUniqueInput[]
    delete?: FanEngagementWhereUniqueInput | FanEngagementWhereUniqueInput[]
    connect?: FanEngagementWhereUniqueInput | FanEngagementWhereUniqueInput[]
    update?: FanEngagementUpdateWithWhereUniqueWithoutContentInput | FanEngagementUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: FanEngagementUpdateManyWithWhereWithoutContentInput | FanEngagementUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: FanEngagementScalarWhereInput | FanEngagementScalarWhereInput[]
  }

  export type favourite_contentUncheckedUpdateManyWithoutContentNestedInput = {
    create?: XOR<favourite_contentCreateWithoutContentInput, favourite_contentUncheckedCreateWithoutContentInput> | favourite_contentCreateWithoutContentInput[] | favourite_contentUncheckedCreateWithoutContentInput[]
    connectOrCreate?: favourite_contentCreateOrConnectWithoutContentInput | favourite_contentCreateOrConnectWithoutContentInput[]
    upsert?: favourite_contentUpsertWithWhereUniqueWithoutContentInput | favourite_contentUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: favourite_contentCreateManyContentInputEnvelope
    set?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    disconnect?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    delete?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    connect?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    update?: favourite_contentUpdateWithWhereUniqueWithoutContentInput | favourite_contentUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: favourite_contentUpdateManyWithWhereWithoutContentInput | favourite_contentUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: favourite_contentScalarWhereInput | favourite_contentScalarWhereInput[]
  }

  export type orderCreateNestedManyWithoutStoreInput = {
    create?: XOR<orderCreateWithoutStoreInput, orderUncheckedCreateWithoutStoreInput> | orderCreateWithoutStoreInput[] | orderUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: orderCreateOrConnectWithoutStoreInput | orderCreateOrConnectWithoutStoreInput[]
    createMany?: orderCreateManyStoreInputEnvelope
    connect?: orderWhereUniqueInput | orderWhereUniqueInput[]
  }

  export type paymentCreateNestedManyWithoutStoreInput = {
    create?: XOR<paymentCreateWithoutStoreInput, paymentUncheckedCreateWithoutStoreInput> | paymentCreateWithoutStoreInput[] | paymentUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutStoreInput | paymentCreateOrConnectWithoutStoreInput[]
    createMany?: paymentCreateManyStoreInputEnvelope
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
  }

  export type productCreateNestedManyWithoutStoreInput = {
    create?: XOR<productCreateWithoutStoreInput, productUncheckedCreateWithoutStoreInput> | productCreateWithoutStoreInput[] | productUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: productCreateOrConnectWithoutStoreInput | productCreateOrConnectWithoutStoreInput[]
    createMany?: productCreateManyStoreInputEnvelope
    connect?: productWhereUniqueInput | productWhereUniqueInput[]
  }

  export type userCreateNestedOneWithoutStoreInput = {
    create?: XOR<userCreateWithoutStoreInput, userUncheckedCreateWithoutStoreInput>
    connectOrCreate?: userCreateOrConnectWithoutStoreInput
    connect?: userWhereUniqueInput
  }

  export type contentCreateNestedManyWithoutStoreInput = {
    create?: XOR<contentCreateWithoutStoreInput, contentUncheckedCreateWithoutStoreInput> | contentCreateWithoutStoreInput[] | contentUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: contentCreateOrConnectWithoutStoreInput | contentCreateOrConnectWithoutStoreInput[]
    createMany?: contentCreateManyStoreInputEnvelope
    connect?: contentWhereUniqueInput | contentWhereUniqueInput[]
  }

  export type favourite_contentCreateNestedManyWithoutStoreInput = {
    create?: XOR<favourite_contentCreateWithoutStoreInput, favourite_contentUncheckedCreateWithoutStoreInput> | favourite_contentCreateWithoutStoreInput[] | favourite_contentUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: favourite_contentCreateOrConnectWithoutStoreInput | favourite_contentCreateOrConnectWithoutStoreInput[]
    createMany?: favourite_contentCreateManyStoreInputEnvelope
    connect?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
  }

  export type orderUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<orderCreateWithoutStoreInput, orderUncheckedCreateWithoutStoreInput> | orderCreateWithoutStoreInput[] | orderUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: orderCreateOrConnectWithoutStoreInput | orderCreateOrConnectWithoutStoreInput[]
    createMany?: orderCreateManyStoreInputEnvelope
    connect?: orderWhereUniqueInput | orderWhereUniqueInput[]
  }

  export type paymentUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<paymentCreateWithoutStoreInput, paymentUncheckedCreateWithoutStoreInput> | paymentCreateWithoutStoreInput[] | paymentUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutStoreInput | paymentCreateOrConnectWithoutStoreInput[]
    createMany?: paymentCreateManyStoreInputEnvelope
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
  }

  export type productUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<productCreateWithoutStoreInput, productUncheckedCreateWithoutStoreInput> | productCreateWithoutStoreInput[] | productUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: productCreateOrConnectWithoutStoreInput | productCreateOrConnectWithoutStoreInput[]
    createMany?: productCreateManyStoreInputEnvelope
    connect?: productWhereUniqueInput | productWhereUniqueInput[]
  }

  export type contentUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<contentCreateWithoutStoreInput, contentUncheckedCreateWithoutStoreInput> | contentCreateWithoutStoreInput[] | contentUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: contentCreateOrConnectWithoutStoreInput | contentCreateOrConnectWithoutStoreInput[]
    createMany?: contentCreateManyStoreInputEnvelope
    connect?: contentWhereUniqueInput | contentWhereUniqueInput[]
  }

  export type favourite_contentUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<favourite_contentCreateWithoutStoreInput, favourite_contentUncheckedCreateWithoutStoreInput> | favourite_contentCreateWithoutStoreInput[] | favourite_contentUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: favourite_contentCreateOrConnectWithoutStoreInput | favourite_contentCreateOrConnectWithoutStoreInput[]
    createMany?: favourite_contentCreateManyStoreInputEnvelope
    connect?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
  }

  export type orderUpdateManyWithoutStoreNestedInput = {
    create?: XOR<orderCreateWithoutStoreInput, orderUncheckedCreateWithoutStoreInput> | orderCreateWithoutStoreInput[] | orderUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: orderCreateOrConnectWithoutStoreInput | orderCreateOrConnectWithoutStoreInput[]
    upsert?: orderUpsertWithWhereUniqueWithoutStoreInput | orderUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: orderCreateManyStoreInputEnvelope
    set?: orderWhereUniqueInput | orderWhereUniqueInput[]
    disconnect?: orderWhereUniqueInput | orderWhereUniqueInput[]
    delete?: orderWhereUniqueInput | orderWhereUniqueInput[]
    connect?: orderWhereUniqueInput | orderWhereUniqueInput[]
    update?: orderUpdateWithWhereUniqueWithoutStoreInput | orderUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: orderUpdateManyWithWhereWithoutStoreInput | orderUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: orderScalarWhereInput | orderScalarWhereInput[]
  }

  export type paymentUpdateManyWithoutStoreNestedInput = {
    create?: XOR<paymentCreateWithoutStoreInput, paymentUncheckedCreateWithoutStoreInput> | paymentCreateWithoutStoreInput[] | paymentUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutStoreInput | paymentCreateOrConnectWithoutStoreInput[]
    upsert?: paymentUpsertWithWhereUniqueWithoutStoreInput | paymentUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: paymentCreateManyStoreInputEnvelope
    set?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    disconnect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    delete?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    update?: paymentUpdateWithWhereUniqueWithoutStoreInput | paymentUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: paymentUpdateManyWithWhereWithoutStoreInput | paymentUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: paymentScalarWhereInput | paymentScalarWhereInput[]
  }

  export type productUpdateManyWithoutStoreNestedInput = {
    create?: XOR<productCreateWithoutStoreInput, productUncheckedCreateWithoutStoreInput> | productCreateWithoutStoreInput[] | productUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: productCreateOrConnectWithoutStoreInput | productCreateOrConnectWithoutStoreInput[]
    upsert?: productUpsertWithWhereUniqueWithoutStoreInput | productUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: productCreateManyStoreInputEnvelope
    set?: productWhereUniqueInput | productWhereUniqueInput[]
    disconnect?: productWhereUniqueInput | productWhereUniqueInput[]
    delete?: productWhereUniqueInput | productWhereUniqueInput[]
    connect?: productWhereUniqueInput | productWhereUniqueInput[]
    update?: productUpdateWithWhereUniqueWithoutStoreInput | productUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: productUpdateManyWithWhereWithoutStoreInput | productUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: productScalarWhereInput | productScalarWhereInput[]
  }

  export type userUpdateOneWithoutStoreNestedInput = {
    create?: XOR<userCreateWithoutStoreInput, userUncheckedCreateWithoutStoreInput>
    connectOrCreate?: userCreateOrConnectWithoutStoreInput
    upsert?: userUpsertWithoutStoreInput
    disconnect?: userWhereInput | boolean
    delete?: userWhereInput | boolean
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutStoreInput, userUpdateWithoutStoreInput>, userUncheckedUpdateWithoutStoreInput>
  }

  export type contentUpdateManyWithoutStoreNestedInput = {
    create?: XOR<contentCreateWithoutStoreInput, contentUncheckedCreateWithoutStoreInput> | contentCreateWithoutStoreInput[] | contentUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: contentCreateOrConnectWithoutStoreInput | contentCreateOrConnectWithoutStoreInput[]
    upsert?: contentUpsertWithWhereUniqueWithoutStoreInput | contentUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: contentCreateManyStoreInputEnvelope
    set?: contentWhereUniqueInput | contentWhereUniqueInput[]
    disconnect?: contentWhereUniqueInput | contentWhereUniqueInput[]
    delete?: contentWhereUniqueInput | contentWhereUniqueInput[]
    connect?: contentWhereUniqueInput | contentWhereUniqueInput[]
    update?: contentUpdateWithWhereUniqueWithoutStoreInput | contentUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: contentUpdateManyWithWhereWithoutStoreInput | contentUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: contentScalarWhereInput | contentScalarWhereInput[]
  }

  export type favourite_contentUpdateManyWithoutStoreNestedInput = {
    create?: XOR<favourite_contentCreateWithoutStoreInput, favourite_contentUncheckedCreateWithoutStoreInput> | favourite_contentCreateWithoutStoreInput[] | favourite_contentUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: favourite_contentCreateOrConnectWithoutStoreInput | favourite_contentCreateOrConnectWithoutStoreInput[]
    upsert?: favourite_contentUpsertWithWhereUniqueWithoutStoreInput | favourite_contentUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: favourite_contentCreateManyStoreInputEnvelope
    set?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    disconnect?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    delete?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    connect?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    update?: favourite_contentUpdateWithWhereUniqueWithoutStoreInput | favourite_contentUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: favourite_contentUpdateManyWithWhereWithoutStoreInput | favourite_contentUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: favourite_contentScalarWhereInput | favourite_contentScalarWhereInput[]
  }

  export type orderUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<orderCreateWithoutStoreInput, orderUncheckedCreateWithoutStoreInput> | orderCreateWithoutStoreInput[] | orderUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: orderCreateOrConnectWithoutStoreInput | orderCreateOrConnectWithoutStoreInput[]
    upsert?: orderUpsertWithWhereUniqueWithoutStoreInput | orderUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: orderCreateManyStoreInputEnvelope
    set?: orderWhereUniqueInput | orderWhereUniqueInput[]
    disconnect?: orderWhereUniqueInput | orderWhereUniqueInput[]
    delete?: orderWhereUniqueInput | orderWhereUniqueInput[]
    connect?: orderWhereUniqueInput | orderWhereUniqueInput[]
    update?: orderUpdateWithWhereUniqueWithoutStoreInput | orderUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: orderUpdateManyWithWhereWithoutStoreInput | orderUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: orderScalarWhereInput | orderScalarWhereInput[]
  }

  export type paymentUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<paymentCreateWithoutStoreInput, paymentUncheckedCreateWithoutStoreInput> | paymentCreateWithoutStoreInput[] | paymentUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutStoreInput | paymentCreateOrConnectWithoutStoreInput[]
    upsert?: paymentUpsertWithWhereUniqueWithoutStoreInput | paymentUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: paymentCreateManyStoreInputEnvelope
    set?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    disconnect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    delete?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    update?: paymentUpdateWithWhereUniqueWithoutStoreInput | paymentUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: paymentUpdateManyWithWhereWithoutStoreInput | paymentUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: paymentScalarWhereInput | paymentScalarWhereInput[]
  }

  export type productUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<productCreateWithoutStoreInput, productUncheckedCreateWithoutStoreInput> | productCreateWithoutStoreInput[] | productUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: productCreateOrConnectWithoutStoreInput | productCreateOrConnectWithoutStoreInput[]
    upsert?: productUpsertWithWhereUniqueWithoutStoreInput | productUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: productCreateManyStoreInputEnvelope
    set?: productWhereUniqueInput | productWhereUniqueInput[]
    disconnect?: productWhereUniqueInput | productWhereUniqueInput[]
    delete?: productWhereUniqueInput | productWhereUniqueInput[]
    connect?: productWhereUniqueInput | productWhereUniqueInput[]
    update?: productUpdateWithWhereUniqueWithoutStoreInput | productUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: productUpdateManyWithWhereWithoutStoreInput | productUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: productScalarWhereInput | productScalarWhereInput[]
  }

  export type contentUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<contentCreateWithoutStoreInput, contentUncheckedCreateWithoutStoreInput> | contentCreateWithoutStoreInput[] | contentUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: contentCreateOrConnectWithoutStoreInput | contentCreateOrConnectWithoutStoreInput[]
    upsert?: contentUpsertWithWhereUniqueWithoutStoreInput | contentUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: contentCreateManyStoreInputEnvelope
    set?: contentWhereUniqueInput | contentWhereUniqueInput[]
    disconnect?: contentWhereUniqueInput | contentWhereUniqueInput[]
    delete?: contentWhereUniqueInput | contentWhereUniqueInput[]
    connect?: contentWhereUniqueInput | contentWhereUniqueInput[]
    update?: contentUpdateWithWhereUniqueWithoutStoreInput | contentUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: contentUpdateManyWithWhereWithoutStoreInput | contentUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: contentScalarWhereInput | contentScalarWhereInput[]
  }

  export type favourite_contentUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<favourite_contentCreateWithoutStoreInput, favourite_contentUncheckedCreateWithoutStoreInput> | favourite_contentCreateWithoutStoreInput[] | favourite_contentUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: favourite_contentCreateOrConnectWithoutStoreInput | favourite_contentCreateOrConnectWithoutStoreInput[]
    upsert?: favourite_contentUpsertWithWhereUniqueWithoutStoreInput | favourite_contentUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: favourite_contentCreateManyStoreInputEnvelope
    set?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    disconnect?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    delete?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    connect?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    update?: favourite_contentUpdateWithWhereUniqueWithoutStoreInput | favourite_contentUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: favourite_contentUpdateManyWithWhereWithoutStoreInput | favourite_contentUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: favourite_contentScalarWhereInput | favourite_contentScalarWhereInput[]
  }

  export type orderProductsCreateNestedManyWithoutProductInput = {
    create?: XOR<orderProductsCreateWithoutProductInput, orderProductsUncheckedCreateWithoutProductInput> | orderProductsCreateWithoutProductInput[] | orderProductsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: orderProductsCreateOrConnectWithoutProductInput | orderProductsCreateOrConnectWithoutProductInput[]
    createMany?: orderProductsCreateManyProductInputEnvelope
    connect?: orderProductsWhereUniqueInput | orderProductsWhereUniqueInput[]
  }

  export type productImageCreateNestedOneWithoutProductInput = {
    create?: XOR<productImageCreateWithoutProductInput, productImageUncheckedCreateWithoutProductInput>
    connectOrCreate?: productImageCreateOrConnectWithoutProductInput
    connect?: productImageWhereUniqueInput
  }

  export type storeCreateNestedOneWithoutProductsInput = {
    create?: XOR<storeCreateWithoutProductsInput, storeUncheckedCreateWithoutProductsInput>
    connectOrCreate?: storeCreateOrConnectWithoutProductsInput
    connect?: storeWhereUniqueInput
  }

  export type ratingCreateNestedManyWithoutProductInput = {
    create?: XOR<ratingCreateWithoutProductInput, ratingUncheckedCreateWithoutProductInput> | ratingCreateWithoutProductInput[] | ratingUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ratingCreateOrConnectWithoutProductInput | ratingCreateOrConnectWithoutProductInput[]
    createMany?: ratingCreateManyProductInputEnvelope
    connect?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
  }

  export type reviewCreateNestedManyWithoutProductInput = {
    create?: XOR<reviewCreateWithoutProductInput, reviewUncheckedCreateWithoutProductInput> | reviewCreateWithoutProductInput[] | reviewUncheckedCreateWithoutProductInput[]
    connectOrCreate?: reviewCreateOrConnectWithoutProductInput | reviewCreateOrConnectWithoutProductInput[]
    createMany?: reviewCreateManyProductInputEnvelope
    connect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
  }

  export type favourite_contentCreateNestedManyWithoutProductInput = {
    create?: XOR<favourite_contentCreateWithoutProductInput, favourite_contentUncheckedCreateWithoutProductInput> | favourite_contentCreateWithoutProductInput[] | favourite_contentUncheckedCreateWithoutProductInput[]
    connectOrCreate?: favourite_contentCreateOrConnectWithoutProductInput | favourite_contentCreateOrConnectWithoutProductInput[]
    createMany?: favourite_contentCreateManyProductInputEnvelope
    connect?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
  }

  export type orderProductsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<orderProductsCreateWithoutProductInput, orderProductsUncheckedCreateWithoutProductInput> | orderProductsCreateWithoutProductInput[] | orderProductsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: orderProductsCreateOrConnectWithoutProductInput | orderProductsCreateOrConnectWithoutProductInput[]
    createMany?: orderProductsCreateManyProductInputEnvelope
    connect?: orderProductsWhereUniqueInput | orderProductsWhereUniqueInput[]
  }

  export type ratingUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ratingCreateWithoutProductInput, ratingUncheckedCreateWithoutProductInput> | ratingCreateWithoutProductInput[] | ratingUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ratingCreateOrConnectWithoutProductInput | ratingCreateOrConnectWithoutProductInput[]
    createMany?: ratingCreateManyProductInputEnvelope
    connect?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
  }

  export type reviewUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<reviewCreateWithoutProductInput, reviewUncheckedCreateWithoutProductInput> | reviewCreateWithoutProductInput[] | reviewUncheckedCreateWithoutProductInput[]
    connectOrCreate?: reviewCreateOrConnectWithoutProductInput | reviewCreateOrConnectWithoutProductInput[]
    createMany?: reviewCreateManyProductInputEnvelope
    connect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
  }

  export type favourite_contentUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<favourite_contentCreateWithoutProductInput, favourite_contentUncheckedCreateWithoutProductInput> | favourite_contentCreateWithoutProductInput[] | favourite_contentUncheckedCreateWithoutProductInput[]
    connectOrCreate?: favourite_contentCreateOrConnectWithoutProductInput | favourite_contentCreateOrConnectWithoutProductInput[]
    createMany?: favourite_contentCreateManyProductInputEnvelope
    connect?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type orderProductsUpdateManyWithoutProductNestedInput = {
    create?: XOR<orderProductsCreateWithoutProductInput, orderProductsUncheckedCreateWithoutProductInput> | orderProductsCreateWithoutProductInput[] | orderProductsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: orderProductsCreateOrConnectWithoutProductInput | orderProductsCreateOrConnectWithoutProductInput[]
    upsert?: orderProductsUpsertWithWhereUniqueWithoutProductInput | orderProductsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: orderProductsCreateManyProductInputEnvelope
    set?: orderProductsWhereUniqueInput | orderProductsWhereUniqueInput[]
    disconnect?: orderProductsWhereUniqueInput | orderProductsWhereUniqueInput[]
    delete?: orderProductsWhereUniqueInput | orderProductsWhereUniqueInput[]
    connect?: orderProductsWhereUniqueInput | orderProductsWhereUniqueInput[]
    update?: orderProductsUpdateWithWhereUniqueWithoutProductInput | orderProductsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: orderProductsUpdateManyWithWhereWithoutProductInput | orderProductsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: orderProductsScalarWhereInput | orderProductsScalarWhereInput[]
  }

  export type productImageUpdateOneWithoutProductNestedInput = {
    create?: XOR<productImageCreateWithoutProductInput, productImageUncheckedCreateWithoutProductInput>
    connectOrCreate?: productImageCreateOrConnectWithoutProductInput
    upsert?: productImageUpsertWithoutProductInput
    disconnect?: productImageWhereInput | boolean
    delete?: productImageWhereInput | boolean
    connect?: productImageWhereUniqueInput
    update?: XOR<XOR<productImageUpdateToOneWithWhereWithoutProductInput, productImageUpdateWithoutProductInput>, productImageUncheckedUpdateWithoutProductInput>
  }

  export type storeUpdateOneWithoutProductsNestedInput = {
    create?: XOR<storeCreateWithoutProductsInput, storeUncheckedCreateWithoutProductsInput>
    connectOrCreate?: storeCreateOrConnectWithoutProductsInput
    upsert?: storeUpsertWithoutProductsInput
    disconnect?: storeWhereInput | boolean
    delete?: storeWhereInput | boolean
    connect?: storeWhereUniqueInput
    update?: XOR<XOR<storeUpdateToOneWithWhereWithoutProductsInput, storeUpdateWithoutProductsInput>, storeUncheckedUpdateWithoutProductsInput>
  }

  export type ratingUpdateManyWithoutProductNestedInput = {
    create?: XOR<ratingCreateWithoutProductInput, ratingUncheckedCreateWithoutProductInput> | ratingCreateWithoutProductInput[] | ratingUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ratingCreateOrConnectWithoutProductInput | ratingCreateOrConnectWithoutProductInput[]
    upsert?: ratingUpsertWithWhereUniqueWithoutProductInput | ratingUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ratingCreateManyProductInputEnvelope
    set?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    disconnect?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    delete?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    connect?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    update?: ratingUpdateWithWhereUniqueWithoutProductInput | ratingUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ratingUpdateManyWithWhereWithoutProductInput | ratingUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ratingScalarWhereInput | ratingScalarWhereInput[]
  }

  export type reviewUpdateManyWithoutProductNestedInput = {
    create?: XOR<reviewCreateWithoutProductInput, reviewUncheckedCreateWithoutProductInput> | reviewCreateWithoutProductInput[] | reviewUncheckedCreateWithoutProductInput[]
    connectOrCreate?: reviewCreateOrConnectWithoutProductInput | reviewCreateOrConnectWithoutProductInput[]
    upsert?: reviewUpsertWithWhereUniqueWithoutProductInput | reviewUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: reviewCreateManyProductInputEnvelope
    set?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    disconnect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    delete?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    connect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    update?: reviewUpdateWithWhereUniqueWithoutProductInput | reviewUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: reviewUpdateManyWithWhereWithoutProductInput | reviewUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: reviewScalarWhereInput | reviewScalarWhereInput[]
  }

  export type favourite_contentUpdateManyWithoutProductNestedInput = {
    create?: XOR<favourite_contentCreateWithoutProductInput, favourite_contentUncheckedCreateWithoutProductInput> | favourite_contentCreateWithoutProductInput[] | favourite_contentUncheckedCreateWithoutProductInput[]
    connectOrCreate?: favourite_contentCreateOrConnectWithoutProductInput | favourite_contentCreateOrConnectWithoutProductInput[]
    upsert?: favourite_contentUpsertWithWhereUniqueWithoutProductInput | favourite_contentUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: favourite_contentCreateManyProductInputEnvelope
    set?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    disconnect?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    delete?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    connect?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    update?: favourite_contentUpdateWithWhereUniqueWithoutProductInput | favourite_contentUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: favourite_contentUpdateManyWithWhereWithoutProductInput | favourite_contentUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: favourite_contentScalarWhereInput | favourite_contentScalarWhereInput[]
  }

  export type orderProductsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<orderProductsCreateWithoutProductInput, orderProductsUncheckedCreateWithoutProductInput> | orderProductsCreateWithoutProductInput[] | orderProductsUncheckedCreateWithoutProductInput[]
    connectOrCreate?: orderProductsCreateOrConnectWithoutProductInput | orderProductsCreateOrConnectWithoutProductInput[]
    upsert?: orderProductsUpsertWithWhereUniqueWithoutProductInput | orderProductsUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: orderProductsCreateManyProductInputEnvelope
    set?: orderProductsWhereUniqueInput | orderProductsWhereUniqueInput[]
    disconnect?: orderProductsWhereUniqueInput | orderProductsWhereUniqueInput[]
    delete?: orderProductsWhereUniqueInput | orderProductsWhereUniqueInput[]
    connect?: orderProductsWhereUniqueInput | orderProductsWhereUniqueInput[]
    update?: orderProductsUpdateWithWhereUniqueWithoutProductInput | orderProductsUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: orderProductsUpdateManyWithWhereWithoutProductInput | orderProductsUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: orderProductsScalarWhereInput | orderProductsScalarWhereInput[]
  }

  export type ratingUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ratingCreateWithoutProductInput, ratingUncheckedCreateWithoutProductInput> | ratingCreateWithoutProductInput[] | ratingUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ratingCreateOrConnectWithoutProductInput | ratingCreateOrConnectWithoutProductInput[]
    upsert?: ratingUpsertWithWhereUniqueWithoutProductInput | ratingUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ratingCreateManyProductInputEnvelope
    set?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    disconnect?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    delete?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    connect?: ratingWhereUniqueInput | ratingWhereUniqueInput[]
    update?: ratingUpdateWithWhereUniqueWithoutProductInput | ratingUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ratingUpdateManyWithWhereWithoutProductInput | ratingUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ratingScalarWhereInput | ratingScalarWhereInput[]
  }

  export type reviewUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<reviewCreateWithoutProductInput, reviewUncheckedCreateWithoutProductInput> | reviewCreateWithoutProductInput[] | reviewUncheckedCreateWithoutProductInput[]
    connectOrCreate?: reviewCreateOrConnectWithoutProductInput | reviewCreateOrConnectWithoutProductInput[]
    upsert?: reviewUpsertWithWhereUniqueWithoutProductInput | reviewUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: reviewCreateManyProductInputEnvelope
    set?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    disconnect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    delete?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    connect?: reviewWhereUniqueInput | reviewWhereUniqueInput[]
    update?: reviewUpdateWithWhereUniqueWithoutProductInput | reviewUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: reviewUpdateManyWithWhereWithoutProductInput | reviewUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: reviewScalarWhereInput | reviewScalarWhereInput[]
  }

  export type favourite_contentUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<favourite_contentCreateWithoutProductInput, favourite_contentUncheckedCreateWithoutProductInput> | favourite_contentCreateWithoutProductInput[] | favourite_contentUncheckedCreateWithoutProductInput[]
    connectOrCreate?: favourite_contentCreateOrConnectWithoutProductInput | favourite_contentCreateOrConnectWithoutProductInput[]
    upsert?: favourite_contentUpsertWithWhereUniqueWithoutProductInput | favourite_contentUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: favourite_contentCreateManyProductInputEnvelope
    set?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    disconnect?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    delete?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    connect?: favourite_contentWhereUniqueInput | favourite_contentWhereUniqueInput[]
    update?: favourite_contentUpdateWithWhereUniqueWithoutProductInput | favourite_contentUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: favourite_contentUpdateManyWithWhereWithoutProductInput | favourite_contentUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: favourite_contentScalarWhereInput | favourite_contentScalarWhereInput[]
  }

  export type productCreateNestedOneWithoutReviewsInput = {
    create?: XOR<productCreateWithoutReviewsInput, productUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: productCreateOrConnectWithoutReviewsInput
    connect?: productWhereUniqueInput
  }

  export type userCreateNestedOneWithoutReviewInput = {
    create?: XOR<userCreateWithoutReviewInput, userUncheckedCreateWithoutReviewInput>
    connectOrCreate?: userCreateOrConnectWithoutReviewInput
    connect?: userWhereUniqueInput
  }

  export type productUpdateOneWithoutReviewsNestedInput = {
    create?: XOR<productCreateWithoutReviewsInput, productUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: productCreateOrConnectWithoutReviewsInput
    upsert?: productUpsertWithoutReviewsInput
    disconnect?: productWhereInput | boolean
    delete?: productWhereInput | boolean
    connect?: productWhereUniqueInput
    update?: XOR<XOR<productUpdateToOneWithWhereWithoutReviewsInput, productUpdateWithoutReviewsInput>, productUncheckedUpdateWithoutReviewsInput>
  }

  export type userUpdateOneWithoutReviewNestedInput = {
    create?: XOR<userCreateWithoutReviewInput, userUncheckedCreateWithoutReviewInput>
    connectOrCreate?: userCreateOrConnectWithoutReviewInput
    upsert?: userUpsertWithoutReviewInput
    disconnect?: userWhereInput | boolean
    delete?: userWhereInput | boolean
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutReviewInput, userUpdateWithoutReviewInput>, userUncheckedUpdateWithoutReviewInput>
  }

  export type productCreateNestedOneWithoutRatingsInput = {
    create?: XOR<productCreateWithoutRatingsInput, productUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: productCreateOrConnectWithoutRatingsInput
    connect?: productWhereUniqueInput
  }

  export type userCreateNestedOneWithoutRatingInput = {
    create?: XOR<userCreateWithoutRatingInput, userUncheckedCreateWithoutRatingInput>
    connectOrCreate?: userCreateOrConnectWithoutRatingInput
    connect?: userWhereUniqueInput
  }

  export type productUpdateOneWithoutRatingsNestedInput = {
    create?: XOR<productCreateWithoutRatingsInput, productUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: productCreateOrConnectWithoutRatingsInput
    upsert?: productUpsertWithoutRatingsInput
    disconnect?: productWhereInput | boolean
    delete?: productWhereInput | boolean
    connect?: productWhereUniqueInput
    update?: XOR<XOR<productUpdateToOneWithWhereWithoutRatingsInput, productUpdateWithoutRatingsInput>, productUncheckedUpdateWithoutRatingsInput>
  }

  export type userUpdateOneWithoutRatingNestedInput = {
    create?: XOR<userCreateWithoutRatingInput, userUncheckedCreateWithoutRatingInput>
    connectOrCreate?: userCreateOrConnectWithoutRatingInput
    upsert?: userUpsertWithoutRatingInput
    disconnect?: userWhereInput | boolean
    delete?: userWhereInput | boolean
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutRatingInput, userUpdateWithoutRatingInput>, userUncheckedUpdateWithoutRatingInput>
  }

  export type productCreateNestedManyWithoutProductImageInput = {
    create?: XOR<productCreateWithoutProductImageInput, productUncheckedCreateWithoutProductImageInput> | productCreateWithoutProductImageInput[] | productUncheckedCreateWithoutProductImageInput[]
    connectOrCreate?: productCreateOrConnectWithoutProductImageInput | productCreateOrConnectWithoutProductImageInput[]
    createMany?: productCreateManyProductImageInputEnvelope
    connect?: productWhereUniqueInput | productWhereUniqueInput[]
  }

  export type productUncheckedCreateNestedManyWithoutProductImageInput = {
    create?: XOR<productCreateWithoutProductImageInput, productUncheckedCreateWithoutProductImageInput> | productCreateWithoutProductImageInput[] | productUncheckedCreateWithoutProductImageInput[]
    connectOrCreate?: productCreateOrConnectWithoutProductImageInput | productCreateOrConnectWithoutProductImageInput[]
    createMany?: productCreateManyProductImageInputEnvelope
    connect?: productWhereUniqueInput | productWhereUniqueInput[]
  }

  export type productUpdateManyWithoutProductImageNestedInput = {
    create?: XOR<productCreateWithoutProductImageInput, productUncheckedCreateWithoutProductImageInput> | productCreateWithoutProductImageInput[] | productUncheckedCreateWithoutProductImageInput[]
    connectOrCreate?: productCreateOrConnectWithoutProductImageInput | productCreateOrConnectWithoutProductImageInput[]
    upsert?: productUpsertWithWhereUniqueWithoutProductImageInput | productUpsertWithWhereUniqueWithoutProductImageInput[]
    createMany?: productCreateManyProductImageInputEnvelope
    set?: productWhereUniqueInput | productWhereUniqueInput[]
    disconnect?: productWhereUniqueInput | productWhereUniqueInput[]
    delete?: productWhereUniqueInput | productWhereUniqueInput[]
    connect?: productWhereUniqueInput | productWhereUniqueInput[]
    update?: productUpdateWithWhereUniqueWithoutProductImageInput | productUpdateWithWhereUniqueWithoutProductImageInput[]
    updateMany?: productUpdateManyWithWhereWithoutProductImageInput | productUpdateManyWithWhereWithoutProductImageInput[]
    deleteMany?: productScalarWhereInput | productScalarWhereInput[]
  }

  export type productUncheckedUpdateManyWithoutProductImageNestedInput = {
    create?: XOR<productCreateWithoutProductImageInput, productUncheckedCreateWithoutProductImageInput> | productCreateWithoutProductImageInput[] | productUncheckedCreateWithoutProductImageInput[]
    connectOrCreate?: productCreateOrConnectWithoutProductImageInput | productCreateOrConnectWithoutProductImageInput[]
    upsert?: productUpsertWithWhereUniqueWithoutProductImageInput | productUpsertWithWhereUniqueWithoutProductImageInput[]
    createMany?: productCreateManyProductImageInputEnvelope
    set?: productWhereUniqueInput | productWhereUniqueInput[]
    disconnect?: productWhereUniqueInput | productWhereUniqueInput[]
    delete?: productWhereUniqueInput | productWhereUniqueInput[]
    connect?: productWhereUniqueInput | productWhereUniqueInput[]
    update?: productUpdateWithWhereUniqueWithoutProductImageInput | productUpdateWithWhereUniqueWithoutProductImageInput[]
    updateMany?: productUpdateManyWithWhereWithoutProductImageInput | productUpdateManyWithWhereWithoutProductImageInput[]
    deleteMany?: productScalarWhereInput | productScalarWhereInput[]
  }

  export type orderCreateNestedOneWithoutPaymentInput = {
    create?: XOR<orderCreateWithoutPaymentInput, orderUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: orderCreateOrConnectWithoutPaymentInput
    connect?: orderWhereUniqueInput
  }

  export type storeCreateNestedOneWithoutPaymentInput = {
    create?: XOR<storeCreateWithoutPaymentInput, storeUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: storeCreateOrConnectWithoutPaymentInput
    connect?: storeWhereUniqueInput
  }

  export type userCreateNestedOneWithoutPaymentInput = {
    create?: XOR<userCreateWithoutPaymentInput, userUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: userCreateOrConnectWithoutPaymentInput
    connect?: userWhereUniqueInput
  }

  export type subscriptionCreateNestedManyWithoutPaymentInput = {
    create?: XOR<subscriptionCreateWithoutPaymentInput, subscriptionUncheckedCreateWithoutPaymentInput> | subscriptionCreateWithoutPaymentInput[] | subscriptionUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: subscriptionCreateOrConnectWithoutPaymentInput | subscriptionCreateOrConnectWithoutPaymentInput[]
    createMany?: subscriptionCreateManyPaymentInputEnvelope
    connect?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
  }

  export type subscriptionUncheckedCreateNestedManyWithoutPaymentInput = {
    create?: XOR<subscriptionCreateWithoutPaymentInput, subscriptionUncheckedCreateWithoutPaymentInput> | subscriptionCreateWithoutPaymentInput[] | subscriptionUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: subscriptionCreateOrConnectWithoutPaymentInput | subscriptionCreateOrConnectWithoutPaymentInput[]
    createMany?: subscriptionCreateManyPaymentInputEnvelope
    connect?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type orderUpdateOneWithoutPaymentNestedInput = {
    create?: XOR<orderCreateWithoutPaymentInput, orderUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: orderCreateOrConnectWithoutPaymentInput
    upsert?: orderUpsertWithoutPaymentInput
    disconnect?: orderWhereInput | boolean
    delete?: orderWhereInput | boolean
    connect?: orderWhereUniqueInput
    update?: XOR<XOR<orderUpdateToOneWithWhereWithoutPaymentInput, orderUpdateWithoutPaymentInput>, orderUncheckedUpdateWithoutPaymentInput>
  }

  export type storeUpdateOneWithoutPaymentNestedInput = {
    create?: XOR<storeCreateWithoutPaymentInput, storeUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: storeCreateOrConnectWithoutPaymentInput
    upsert?: storeUpsertWithoutPaymentInput
    disconnect?: storeWhereInput | boolean
    delete?: storeWhereInput | boolean
    connect?: storeWhereUniqueInput
    update?: XOR<XOR<storeUpdateToOneWithWhereWithoutPaymentInput, storeUpdateWithoutPaymentInput>, storeUncheckedUpdateWithoutPaymentInput>
  }

  export type userUpdateOneWithoutPaymentNestedInput = {
    create?: XOR<userCreateWithoutPaymentInput, userUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: userCreateOrConnectWithoutPaymentInput
    upsert?: userUpsertWithoutPaymentInput
    disconnect?: userWhereInput | boolean
    delete?: userWhereInput | boolean
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutPaymentInput, userUpdateWithoutPaymentInput>, userUncheckedUpdateWithoutPaymentInput>
  }

  export type subscriptionUpdateManyWithoutPaymentNestedInput = {
    create?: XOR<subscriptionCreateWithoutPaymentInput, subscriptionUncheckedCreateWithoutPaymentInput> | subscriptionCreateWithoutPaymentInput[] | subscriptionUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: subscriptionCreateOrConnectWithoutPaymentInput | subscriptionCreateOrConnectWithoutPaymentInput[]
    upsert?: subscriptionUpsertWithWhereUniqueWithoutPaymentInput | subscriptionUpsertWithWhereUniqueWithoutPaymentInput[]
    createMany?: subscriptionCreateManyPaymentInputEnvelope
    set?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
    disconnect?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
    delete?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
    connect?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
    update?: subscriptionUpdateWithWhereUniqueWithoutPaymentInput | subscriptionUpdateWithWhereUniqueWithoutPaymentInput[]
    updateMany?: subscriptionUpdateManyWithWhereWithoutPaymentInput | subscriptionUpdateManyWithWhereWithoutPaymentInput[]
    deleteMany?: subscriptionScalarWhereInput | subscriptionScalarWhereInput[]
  }

  export type subscriptionUncheckedUpdateManyWithoutPaymentNestedInput = {
    create?: XOR<subscriptionCreateWithoutPaymentInput, subscriptionUncheckedCreateWithoutPaymentInput> | subscriptionCreateWithoutPaymentInput[] | subscriptionUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: subscriptionCreateOrConnectWithoutPaymentInput | subscriptionCreateOrConnectWithoutPaymentInput[]
    upsert?: subscriptionUpsertWithWhereUniqueWithoutPaymentInput | subscriptionUpsertWithWhereUniqueWithoutPaymentInput[]
    createMany?: subscriptionCreateManyPaymentInputEnvelope
    set?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
    disconnect?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
    delete?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
    connect?: subscriptionWhereUniqueInput | subscriptionWhereUniqueInput[]
    update?: subscriptionUpdateWithWhereUniqueWithoutPaymentInput | subscriptionUpdateWithWhereUniqueWithoutPaymentInput[]
    updateMany?: subscriptionUpdateManyWithWhereWithoutPaymentInput | subscriptionUpdateManyWithWhereWithoutPaymentInput[]
    deleteMany?: subscriptionScalarWhereInput | subscriptionScalarWhereInput[]
  }

  export type storeCreateNestedOneWithoutOrderInput = {
    create?: XOR<storeCreateWithoutOrderInput, storeUncheckedCreateWithoutOrderInput>
    connectOrCreate?: storeCreateOrConnectWithoutOrderInput
    connect?: storeWhereUniqueInput
  }

  export type userCreateNestedOneWithoutOrderInput = {
    create?: XOR<userCreateWithoutOrderInput, userUncheckedCreateWithoutOrderInput>
    connectOrCreate?: userCreateOrConnectWithoutOrderInput
    connect?: userWhereUniqueInput
  }

  export type orderProductsCreateNestedManyWithoutOrderInput = {
    create?: XOR<orderProductsCreateWithoutOrderInput, orderProductsUncheckedCreateWithoutOrderInput> | orderProductsCreateWithoutOrderInput[] | orderProductsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: orderProductsCreateOrConnectWithoutOrderInput | orderProductsCreateOrConnectWithoutOrderInput[]
    createMany?: orderProductsCreateManyOrderInputEnvelope
    connect?: orderProductsWhereUniqueInput | orderProductsWhereUniqueInput[]
  }

  export type paymentCreateNestedManyWithoutOrderInput = {
    create?: XOR<paymentCreateWithoutOrderInput, paymentUncheckedCreateWithoutOrderInput> | paymentCreateWithoutOrderInput[] | paymentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutOrderInput | paymentCreateOrConnectWithoutOrderInput[]
    createMany?: paymentCreateManyOrderInputEnvelope
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
  }

  export type orderProductsUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<orderProductsCreateWithoutOrderInput, orderProductsUncheckedCreateWithoutOrderInput> | orderProductsCreateWithoutOrderInput[] | orderProductsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: orderProductsCreateOrConnectWithoutOrderInput | orderProductsCreateOrConnectWithoutOrderInput[]
    createMany?: orderProductsCreateManyOrderInputEnvelope
    connect?: orderProductsWhereUniqueInput | orderProductsWhereUniqueInput[]
  }

  export type paymentUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<paymentCreateWithoutOrderInput, paymentUncheckedCreateWithoutOrderInput> | paymentCreateWithoutOrderInput[] | paymentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutOrderInput | paymentCreateOrConnectWithoutOrderInput[]
    createMany?: paymentCreateManyOrderInputEnvelope
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
  }

  export type storeUpdateOneWithoutOrderNestedInput = {
    create?: XOR<storeCreateWithoutOrderInput, storeUncheckedCreateWithoutOrderInput>
    connectOrCreate?: storeCreateOrConnectWithoutOrderInput
    upsert?: storeUpsertWithoutOrderInput
    disconnect?: storeWhereInput | boolean
    delete?: storeWhereInput | boolean
    connect?: storeWhereUniqueInput
    update?: XOR<XOR<storeUpdateToOneWithWhereWithoutOrderInput, storeUpdateWithoutOrderInput>, storeUncheckedUpdateWithoutOrderInput>
  }

  export type userUpdateOneWithoutOrderNestedInput = {
    create?: XOR<userCreateWithoutOrderInput, userUncheckedCreateWithoutOrderInput>
    connectOrCreate?: userCreateOrConnectWithoutOrderInput
    upsert?: userUpsertWithoutOrderInput
    disconnect?: userWhereInput | boolean
    delete?: userWhereInput | boolean
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutOrderInput, userUpdateWithoutOrderInput>, userUncheckedUpdateWithoutOrderInput>
  }

  export type orderProductsUpdateManyWithoutOrderNestedInput = {
    create?: XOR<orderProductsCreateWithoutOrderInput, orderProductsUncheckedCreateWithoutOrderInput> | orderProductsCreateWithoutOrderInput[] | orderProductsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: orderProductsCreateOrConnectWithoutOrderInput | orderProductsCreateOrConnectWithoutOrderInput[]
    upsert?: orderProductsUpsertWithWhereUniqueWithoutOrderInput | orderProductsUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: orderProductsCreateManyOrderInputEnvelope
    set?: orderProductsWhereUniqueInput | orderProductsWhereUniqueInput[]
    disconnect?: orderProductsWhereUniqueInput | orderProductsWhereUniqueInput[]
    delete?: orderProductsWhereUniqueInput | orderProductsWhereUniqueInput[]
    connect?: orderProductsWhereUniqueInput | orderProductsWhereUniqueInput[]
    update?: orderProductsUpdateWithWhereUniqueWithoutOrderInput | orderProductsUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: orderProductsUpdateManyWithWhereWithoutOrderInput | orderProductsUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: orderProductsScalarWhereInput | orderProductsScalarWhereInput[]
  }

  export type paymentUpdateManyWithoutOrderNestedInput = {
    create?: XOR<paymentCreateWithoutOrderInput, paymentUncheckedCreateWithoutOrderInput> | paymentCreateWithoutOrderInput[] | paymentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutOrderInput | paymentCreateOrConnectWithoutOrderInput[]
    upsert?: paymentUpsertWithWhereUniqueWithoutOrderInput | paymentUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: paymentCreateManyOrderInputEnvelope
    set?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    disconnect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    delete?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    update?: paymentUpdateWithWhereUniqueWithoutOrderInput | paymentUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: paymentUpdateManyWithWhereWithoutOrderInput | paymentUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: paymentScalarWhereInput | paymentScalarWhereInput[]
  }

  export type orderProductsUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<orderProductsCreateWithoutOrderInput, orderProductsUncheckedCreateWithoutOrderInput> | orderProductsCreateWithoutOrderInput[] | orderProductsUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: orderProductsCreateOrConnectWithoutOrderInput | orderProductsCreateOrConnectWithoutOrderInput[]
    upsert?: orderProductsUpsertWithWhereUniqueWithoutOrderInput | orderProductsUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: orderProductsCreateManyOrderInputEnvelope
    set?: orderProductsWhereUniqueInput | orderProductsWhereUniqueInput[]
    disconnect?: orderProductsWhereUniqueInput | orderProductsWhereUniqueInput[]
    delete?: orderProductsWhereUniqueInput | orderProductsWhereUniqueInput[]
    connect?: orderProductsWhereUniqueInput | orderProductsWhereUniqueInput[]
    update?: orderProductsUpdateWithWhereUniqueWithoutOrderInput | orderProductsUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: orderProductsUpdateManyWithWhereWithoutOrderInput | orderProductsUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: orderProductsScalarWhereInput | orderProductsScalarWhereInput[]
  }

  export type paymentUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<paymentCreateWithoutOrderInput, paymentUncheckedCreateWithoutOrderInput> | paymentCreateWithoutOrderInput[] | paymentUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutOrderInput | paymentCreateOrConnectWithoutOrderInput[]
    upsert?: paymentUpsertWithWhereUniqueWithoutOrderInput | paymentUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: paymentCreateManyOrderInputEnvelope
    set?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    disconnect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    delete?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    update?: paymentUpdateWithWhereUniqueWithoutOrderInput | paymentUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: paymentUpdateManyWithWhereWithoutOrderInput | paymentUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: paymentScalarWhereInput | paymentScalarWhereInput[]
  }

  export type orderCreateNestedOneWithoutOrderProductsInput = {
    create?: XOR<orderCreateWithoutOrderProductsInput, orderUncheckedCreateWithoutOrderProductsInput>
    connectOrCreate?: orderCreateOrConnectWithoutOrderProductsInput
    connect?: orderWhereUniqueInput
  }

  export type productCreateNestedOneWithoutOrderProductsInput = {
    create?: XOR<productCreateWithoutOrderProductsInput, productUncheckedCreateWithoutOrderProductsInput>
    connectOrCreate?: productCreateOrConnectWithoutOrderProductsInput
    connect?: productWhereUniqueInput
  }

  export type orderUpdateOneWithoutOrderProductsNestedInput = {
    create?: XOR<orderCreateWithoutOrderProductsInput, orderUncheckedCreateWithoutOrderProductsInput>
    connectOrCreate?: orderCreateOrConnectWithoutOrderProductsInput
    upsert?: orderUpsertWithoutOrderProductsInput
    disconnect?: orderWhereInput | boolean
    delete?: orderWhereInput | boolean
    connect?: orderWhereUniqueInput
    update?: XOR<XOR<orderUpdateToOneWithWhereWithoutOrderProductsInput, orderUpdateWithoutOrderProductsInput>, orderUncheckedUpdateWithoutOrderProductsInput>
  }

  export type productUpdateOneWithoutOrderProductsNestedInput = {
    create?: XOR<productCreateWithoutOrderProductsInput, productUncheckedCreateWithoutOrderProductsInput>
    connectOrCreate?: productCreateOrConnectWithoutOrderProductsInput
    upsert?: productUpsertWithoutOrderProductsInput
    disconnect?: productWhereInput | boolean
    delete?: productWhereInput | boolean
    connect?: productWhereUniqueInput
    update?: XOR<XOR<productUpdateToOneWithWhereWithoutOrderProductsInput, productUpdateWithoutOrderProductsInput>, productUncheckedUpdateWithoutOrderProductsInput>
  }

  export type userCreateNestedOneWithoutSubscriptionInput = {
    create?: XOR<userCreateWithoutSubscriptionInput, userUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: userCreateOrConnectWithoutSubscriptionInput
    connect?: userWhereUniqueInput
  }

  export type contentCreateNestedOneWithoutSubscriptionInput = {
    create?: XOR<contentCreateWithoutSubscriptionInput, contentUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: contentCreateOrConnectWithoutSubscriptionInput
    connect?: contentWhereUniqueInput
  }

  export type paymentCreateNestedOneWithoutSubscriptionInput = {
    create?: XOR<paymentCreateWithoutSubscriptionInput, paymentUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: paymentCreateOrConnectWithoutSubscriptionInput
    connect?: paymentWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type userUpdateOneRequiredWithoutSubscriptionNestedInput = {
    create?: XOR<userCreateWithoutSubscriptionInput, userUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: userCreateOrConnectWithoutSubscriptionInput
    upsert?: userUpsertWithoutSubscriptionInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutSubscriptionInput, userUpdateWithoutSubscriptionInput>, userUncheckedUpdateWithoutSubscriptionInput>
  }

  export type contentUpdateOneWithoutSubscriptionNestedInput = {
    create?: XOR<contentCreateWithoutSubscriptionInput, contentUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: contentCreateOrConnectWithoutSubscriptionInput
    upsert?: contentUpsertWithoutSubscriptionInput
    disconnect?: contentWhereInput | boolean
    delete?: contentWhereInput | boolean
    connect?: contentWhereUniqueInput
    update?: XOR<XOR<contentUpdateToOneWithWhereWithoutSubscriptionInput, contentUpdateWithoutSubscriptionInput>, contentUncheckedUpdateWithoutSubscriptionInput>
  }

  export type paymentUpdateOneWithoutSubscriptionNestedInput = {
    create?: XOR<paymentCreateWithoutSubscriptionInput, paymentUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: paymentCreateOrConnectWithoutSubscriptionInput
    upsert?: paymentUpsertWithoutSubscriptionInput
    disconnect?: paymentWhereInput | boolean
    delete?: paymentWhereInput | boolean
    connect?: paymentWhereUniqueInput
    update?: XOR<XOR<paymentUpdateToOneWithWhereWithoutSubscriptionInput, paymentUpdateWithoutSubscriptionInput>, paymentUncheckedUpdateWithoutSubscriptionInput>
  }

  export type userCreateNestedOneWithoutFanEngagementInput = {
    create?: XOR<userCreateWithoutFanEngagementInput, userUncheckedCreateWithoutFanEngagementInput>
    connectOrCreate?: userCreateOrConnectWithoutFanEngagementInput
    connect?: userWhereUniqueInput
  }

  export type contentCreateNestedOneWithoutFanEngagementInput = {
    create?: XOR<contentCreateWithoutFanEngagementInput, contentUncheckedCreateWithoutFanEngagementInput>
    connectOrCreate?: contentCreateOrConnectWithoutFanEngagementInput
    connect?: contentWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutFanEngagementNestedInput = {
    create?: XOR<userCreateWithoutFanEngagementInput, userUncheckedCreateWithoutFanEngagementInput>
    connectOrCreate?: userCreateOrConnectWithoutFanEngagementInput
    upsert?: userUpsertWithoutFanEngagementInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutFanEngagementInput, userUpdateWithoutFanEngagementInput>, userUncheckedUpdateWithoutFanEngagementInput>
  }

  export type contentUpdateOneRequiredWithoutFanEngagementNestedInput = {
    create?: XOR<contentCreateWithoutFanEngagementInput, contentUncheckedCreateWithoutFanEngagementInput>
    connectOrCreate?: contentCreateOrConnectWithoutFanEngagementInput
    upsert?: contentUpsertWithoutFanEngagementInput
    connect?: contentWhereUniqueInput
    update?: XOR<XOR<contentUpdateToOneWithWhereWithoutFanEngagementInput, contentUpdateWithoutFanEngagementInput>, contentUncheckedUpdateWithoutFanEngagementInput>
  }

  export type userCreateNestedOneWithoutFavourite_contentInput = {
    create?: XOR<userCreateWithoutFavourite_contentInput, userUncheckedCreateWithoutFavourite_contentInput>
    connectOrCreate?: userCreateOrConnectWithoutFavourite_contentInput
    connect?: userWhereUniqueInput
  }

  export type contentCreateNestedOneWithoutFavourite_contentInput = {
    create?: XOR<contentCreateWithoutFavourite_contentInput, contentUncheckedCreateWithoutFavourite_contentInput>
    connectOrCreate?: contentCreateOrConnectWithoutFavourite_contentInput
    connect?: contentWhereUniqueInput
  }

  export type productCreateNestedOneWithoutFavourite_contentInput = {
    create?: XOR<productCreateWithoutFavourite_contentInput, productUncheckedCreateWithoutFavourite_contentInput>
    connectOrCreate?: productCreateOrConnectWithoutFavourite_contentInput
    connect?: productWhereUniqueInput
  }

  export type storeCreateNestedOneWithoutFavourite_contentInput = {
    create?: XOR<storeCreateWithoutFavourite_contentInput, storeUncheckedCreateWithoutFavourite_contentInput>
    connectOrCreate?: storeCreateOrConnectWithoutFavourite_contentInput
    connect?: storeWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutFavourite_contentNestedInput = {
    create?: XOR<userCreateWithoutFavourite_contentInput, userUncheckedCreateWithoutFavourite_contentInput>
    connectOrCreate?: userCreateOrConnectWithoutFavourite_contentInput
    upsert?: userUpsertWithoutFavourite_contentInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutFavourite_contentInput, userUpdateWithoutFavourite_contentInput>, userUncheckedUpdateWithoutFavourite_contentInput>
  }

  export type contentUpdateOneWithoutFavourite_contentNestedInput = {
    create?: XOR<contentCreateWithoutFavourite_contentInput, contentUncheckedCreateWithoutFavourite_contentInput>
    connectOrCreate?: contentCreateOrConnectWithoutFavourite_contentInput
    upsert?: contentUpsertWithoutFavourite_contentInput
    disconnect?: contentWhereInput | boolean
    delete?: contentWhereInput | boolean
    connect?: contentWhereUniqueInput
    update?: XOR<XOR<contentUpdateToOneWithWhereWithoutFavourite_contentInput, contentUpdateWithoutFavourite_contentInput>, contentUncheckedUpdateWithoutFavourite_contentInput>
  }

  export type productUpdateOneWithoutFavourite_contentNestedInput = {
    create?: XOR<productCreateWithoutFavourite_contentInput, productUncheckedCreateWithoutFavourite_contentInput>
    connectOrCreate?: productCreateOrConnectWithoutFavourite_contentInput
    upsert?: productUpsertWithoutFavourite_contentInput
    disconnect?: productWhereInput | boolean
    delete?: productWhereInput | boolean
    connect?: productWhereUniqueInput
    update?: XOR<XOR<productUpdateToOneWithWhereWithoutFavourite_contentInput, productUpdateWithoutFavourite_contentInput>, productUncheckedUpdateWithoutFavourite_contentInput>
  }

  export type storeUpdateOneWithoutFavourite_contentNestedInput = {
    create?: XOR<storeCreateWithoutFavourite_contentInput, storeUncheckedCreateWithoutFavourite_contentInput>
    connectOrCreate?: storeCreateOrConnectWithoutFavourite_contentInput
    upsert?: storeUpsertWithoutFavourite_contentInput
    disconnect?: storeWhereInput | boolean
    delete?: storeWhereInput | boolean
    connect?: storeWhereUniqueInput
    update?: XOR<XOR<storeUpdateToOneWithWhereWithoutFavourite_contentInput, storeUpdateWithoutFavourite_contentInput>, storeUncheckedUpdateWithoutFavourite_contentInput>
  }

  export type userCreateNestedOneWithoutAcknowledgementsInput = {
    create?: XOR<userCreateWithoutAcknowledgementsInput, userUncheckedCreateWithoutAcknowledgementsInput>
    connectOrCreate?: userCreateOrConnectWithoutAcknowledgementsInput
    connect?: userWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutAcknowledgementsNestedInput = {
    create?: XOR<userCreateWithoutAcknowledgementsInput, userUncheckedCreateWithoutAcknowledgementsInput>
    connectOrCreate?: userCreateOrConnectWithoutAcknowledgementsInput
    upsert?: userUpsertWithoutAcknowledgementsInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutAcknowledgementsInput, userUpdateWithoutAcknowledgementsInput>, userUncheckedUpdateWithoutAcknowledgementsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type acknowledgementCreateWithoutUserInput = {
    id?: string
    type: string
    interval: string
    expiresOn: Date | string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type acknowledgementUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    interval: string
    expiresOn: Date | string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type acknowledgementCreateOrConnectWithoutUserInput = {
    where: acknowledgementWhereUniqueInput
    create: XOR<acknowledgementCreateWithoutUserInput, acknowledgementUncheckedCreateWithoutUserInput>
  }

  export type acknowledgementCreateManyUserInputEnvelope = {
    data: acknowledgementCreateManyUserInput | acknowledgementCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type orderCreateWithoutUserInput = {
    id?: string
    shippingAddress?: string | null
    amount: Decimal | DecimalJsLike | number | string
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    store?: storeCreateNestedOneWithoutOrderInput
    orderProducts?: orderProductsCreateNestedManyWithoutOrderInput
    payment?: paymentCreateNestedManyWithoutOrderInput
  }

  export type orderUncheckedCreateWithoutUserInput = {
    id?: string
    storeID?: string | null
    shippingAddress?: string | null
    amount: Decimal | DecimalJsLike | number | string
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderProducts?: orderProductsUncheckedCreateNestedManyWithoutOrderInput
    payment?: paymentUncheckedCreateNestedManyWithoutOrderInput
  }

  export type orderCreateOrConnectWithoutUserInput = {
    where: orderWhereUniqueInput
    create: XOR<orderCreateWithoutUserInput, orderUncheckedCreateWithoutUserInput>
  }

  export type orderCreateManyUserInputEnvelope = {
    data: orderCreateManyUserInput | orderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type paymentCreateWithoutUserInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod?: string | null
    paymentStatus?: string | null
    type?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentRef?: string | null
    order?: orderCreateNestedOneWithoutPaymentInput
    store?: storeCreateNestedOneWithoutPaymentInput
    subscription?: subscriptionCreateNestedManyWithoutPaymentInput
  }

  export type paymentUncheckedCreateWithoutUserInput = {
    id?: string
    storeID?: string | null
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod?: string | null
    paymentStatus?: string | null
    type?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderId?: string | null
    paymentRef?: string | null
    subscription?: subscriptionUncheckedCreateNestedManyWithoutPaymentInput
  }

  export type paymentCreateOrConnectWithoutUserInput = {
    where: paymentWhereUniqueInput
    create: XOR<paymentCreateWithoutUserInput, paymentUncheckedCreateWithoutUserInput>
  }

  export type paymentCreateManyUserInputEnvelope = {
    data: paymentCreateManyUserInput | paymentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type contentCreateWithoutArtistInput = {
    id?: string
    title: string
    description?: string | null
    mediaUrl: string
    thumbnailUrl?: string | null
    isPublished?: boolean
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    store: storeCreateNestedOneWithoutContentInput
    subscription?: subscriptionCreateNestedManyWithoutContentInput
    FanEngagement?: FanEngagementCreateNestedManyWithoutContentInput
    favourite_content?: favourite_contentCreateNestedManyWithoutContentInput
  }

  export type contentUncheckedCreateWithoutArtistInput = {
    id?: string
    title: string
    description?: string | null
    mediaUrl: string
    thumbnailUrl?: string | null
    isPublished?: boolean
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    storeId: string
    subscription?: subscriptionUncheckedCreateNestedManyWithoutContentInput
    FanEngagement?: FanEngagementUncheckedCreateNestedManyWithoutContentInput
    favourite_content?: favourite_contentUncheckedCreateNestedManyWithoutContentInput
  }

  export type contentCreateOrConnectWithoutArtistInput = {
    where: contentWhereUniqueInput
    create: XOR<contentCreateWithoutArtistInput, contentUncheckedCreateWithoutArtistInput>
  }

  export type contentCreateManyArtistInputEnvelope = {
    data: contentCreateManyArtistInput | contentCreateManyArtistInput[]
    skipDuplicates?: boolean
  }

  export type storeCreateWithoutStoreOwnerInput = {
    id?: string
    storeName?: string | null
    storeLogo?: string | null
    imagePublicID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    order?: orderCreateNestedManyWithoutStoreInput
    payment?: paymentCreateNestedManyWithoutStoreInput
    products?: productCreateNestedManyWithoutStoreInput
    content?: contentCreateNestedManyWithoutStoreInput
    favourite_content?: favourite_contentCreateNestedManyWithoutStoreInput
  }

  export type storeUncheckedCreateWithoutStoreOwnerInput = {
    id?: string
    storeName?: string | null
    storeLogo?: string | null
    imagePublicID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    order?: orderUncheckedCreateNestedManyWithoutStoreInput
    payment?: paymentUncheckedCreateNestedManyWithoutStoreInput
    products?: productUncheckedCreateNestedManyWithoutStoreInput
    content?: contentUncheckedCreateNestedManyWithoutStoreInput
    favourite_content?: favourite_contentUncheckedCreateNestedManyWithoutStoreInput
  }

  export type storeCreateOrConnectWithoutStoreOwnerInput = {
    where: storeWhereUniqueInput
    create: XOR<storeCreateWithoutStoreOwnerInput, storeUncheckedCreateWithoutStoreOwnerInput>
  }

  export type storeCreateManyStoreOwnerInputEnvelope = {
    data: storeCreateManyStoreOwnerInput | storeCreateManyStoreOwnerInput[]
    skipDuplicates?: boolean
  }

  export type reviewCreateWithoutUserInput = {
    id?: string
    review?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product?: productCreateNestedOneWithoutReviewsInput
  }

  export type reviewUncheckedCreateWithoutUserInput = {
    id?: string
    productID?: string | null
    review?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type reviewCreateOrConnectWithoutUserInput = {
    where: reviewWhereUniqueInput
    create: XOR<reviewCreateWithoutUserInput, reviewUncheckedCreateWithoutUserInput>
  }

  export type reviewCreateManyUserInputEnvelope = {
    data: reviewCreateManyUserInput | reviewCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ratingCreateWithoutUserInput = {
    id?: string
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product?: productCreateNestedOneWithoutRatingsInput
  }

  export type ratingUncheckedCreateWithoutUserInput = {
    id?: string
    productID?: string | null
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ratingCreateOrConnectWithoutUserInput = {
    where: ratingWhereUniqueInput
    create: XOR<ratingCreateWithoutUserInput, ratingUncheckedCreateWithoutUserInput>
  }

  export type ratingCreateManyUserInputEnvelope = {
    data: ratingCreateManyUserInput | ratingCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type subscriptionCreateWithoutUserInput = {
    id?: string
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    content?: contentCreateNestedOneWithoutSubscriptionInput
    payment?: paymentCreateNestedOneWithoutSubscriptionInput
  }

  export type subscriptionUncheckedCreateWithoutUserInput = {
    id?: string
    contentId?: string | null
    paymentId?: string | null
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type subscriptionCreateOrConnectWithoutUserInput = {
    where: subscriptionWhereUniqueInput
    create: XOR<subscriptionCreateWithoutUserInput, subscriptionUncheckedCreateWithoutUserInput>
  }

  export type subscriptionCreateManyUserInputEnvelope = {
    data: subscriptionCreateManyUserInput | subscriptionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FanEngagementCreateWithoutUserInput = {
    id?: string
    action?: string | null
    value?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    content: contentCreateNestedOneWithoutFanEngagementInput
  }

  export type FanEngagementUncheckedCreateWithoutUserInput = {
    id?: string
    contentId: string
    action?: string | null
    value?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FanEngagementCreateOrConnectWithoutUserInput = {
    where: FanEngagementWhereUniqueInput
    create: XOR<FanEngagementCreateWithoutUserInput, FanEngagementUncheckedCreateWithoutUserInput>
  }

  export type FanEngagementCreateManyUserInputEnvelope = {
    data: FanEngagementCreateManyUserInput | FanEngagementCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type favourite_contentCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content?: contentCreateNestedOneWithoutFavourite_contentInput
    product?: productCreateNestedOneWithoutFavourite_contentInput
    store?: storeCreateNestedOneWithoutFavourite_contentInput
  }

  export type favourite_contentUncheckedCreateWithoutUserInput = {
    id?: string
    contentId?: string | null
    productId?: string | null
    storeId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type favourite_contentCreateOrConnectWithoutUserInput = {
    where: favourite_contentWhereUniqueInput
    create: XOR<favourite_contentCreateWithoutUserInput, favourite_contentUncheckedCreateWithoutUserInput>
  }

  export type favourite_contentCreateManyUserInputEnvelope = {
    data: favourite_contentCreateManyUserInput | favourite_contentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type acknowledgementUpsertWithWhereUniqueWithoutUserInput = {
    where: acknowledgementWhereUniqueInput
    update: XOR<acknowledgementUpdateWithoutUserInput, acknowledgementUncheckedUpdateWithoutUserInput>
    create: XOR<acknowledgementCreateWithoutUserInput, acknowledgementUncheckedCreateWithoutUserInput>
  }

  export type acknowledgementUpdateWithWhereUniqueWithoutUserInput = {
    where: acknowledgementWhereUniqueInput
    data: XOR<acknowledgementUpdateWithoutUserInput, acknowledgementUncheckedUpdateWithoutUserInput>
  }

  export type acknowledgementUpdateManyWithWhereWithoutUserInput = {
    where: acknowledgementScalarWhereInput
    data: XOR<acknowledgementUpdateManyMutationInput, acknowledgementUncheckedUpdateManyWithoutUserInput>
  }

  export type acknowledgementScalarWhereInput = {
    AND?: acknowledgementScalarWhereInput | acknowledgementScalarWhereInput[]
    OR?: acknowledgementScalarWhereInput[]
    NOT?: acknowledgementScalarWhereInput | acknowledgementScalarWhereInput[]
    id?: StringFilter<"acknowledgement"> | string
    type?: StringFilter<"acknowledgement"> | string
    interval?: StringFilter<"acknowledgement"> | string
    userId?: StringFilter<"acknowledgement"> | string
    expiresOn?: DateTimeFilter<"acknowledgement"> | Date | string
    createdAt?: DateTimeFilter<"acknowledgement"> | Date | string
    updateAt?: DateTimeFilter<"acknowledgement"> | Date | string
  }

  export type orderUpsertWithWhereUniqueWithoutUserInput = {
    where: orderWhereUniqueInput
    update: XOR<orderUpdateWithoutUserInput, orderUncheckedUpdateWithoutUserInput>
    create: XOR<orderCreateWithoutUserInput, orderUncheckedCreateWithoutUserInput>
  }

  export type orderUpdateWithWhereUniqueWithoutUserInput = {
    where: orderWhereUniqueInput
    data: XOR<orderUpdateWithoutUserInput, orderUncheckedUpdateWithoutUserInput>
  }

  export type orderUpdateManyWithWhereWithoutUserInput = {
    where: orderScalarWhereInput
    data: XOR<orderUpdateManyMutationInput, orderUncheckedUpdateManyWithoutUserInput>
  }

  export type orderScalarWhereInput = {
    AND?: orderScalarWhereInput | orderScalarWhereInput[]
    OR?: orderScalarWhereInput[]
    NOT?: orderScalarWhereInput | orderScalarWhereInput[]
    id?: StringFilter<"order"> | string
    userID?: StringNullableFilter<"order"> | string | null
    storeID?: StringNullableFilter<"order"> | string | null
    shippingAddress?: StringNullableFilter<"order"> | string | null
    amount?: DecimalFilter<"order"> | Decimal | DecimalJsLike | number | string
    status?: StringNullableFilter<"order"> | string | null
    createdAt?: DateTimeFilter<"order"> | Date | string
    updatedAt?: DateTimeFilter<"order"> | Date | string
  }

  export type paymentUpsertWithWhereUniqueWithoutUserInput = {
    where: paymentWhereUniqueInput
    update: XOR<paymentUpdateWithoutUserInput, paymentUncheckedUpdateWithoutUserInput>
    create: XOR<paymentCreateWithoutUserInput, paymentUncheckedCreateWithoutUserInput>
  }

  export type paymentUpdateWithWhereUniqueWithoutUserInput = {
    where: paymentWhereUniqueInput
    data: XOR<paymentUpdateWithoutUserInput, paymentUncheckedUpdateWithoutUserInput>
  }

  export type paymentUpdateManyWithWhereWithoutUserInput = {
    where: paymentScalarWhereInput
    data: XOR<paymentUpdateManyMutationInput, paymentUncheckedUpdateManyWithoutUserInput>
  }

  export type paymentScalarWhereInput = {
    AND?: paymentScalarWhereInput | paymentScalarWhereInput[]
    OR?: paymentScalarWhereInput[]
    NOT?: paymentScalarWhereInput | paymentScalarWhereInput[]
    id?: StringFilter<"payment"> | string
    userID?: StringNullableFilter<"payment"> | string | null
    storeID?: StringNullableFilter<"payment"> | string | null
    amount?: DecimalFilter<"payment"> | Decimal | DecimalJsLike | number | string
    paymentMethod?: StringNullableFilter<"payment"> | string | null
    paymentStatus?: StringNullableFilter<"payment"> | string | null
    type?: StringNullableFilter<"payment"> | string | null
    createdAt?: DateTimeFilter<"payment"> | Date | string
    updatedAt?: DateTimeFilter<"payment"> | Date | string
    orderId?: StringNullableFilter<"payment"> | string | null
    paymentRef?: StringNullableFilter<"payment"> | string | null
  }

  export type contentUpsertWithWhereUniqueWithoutArtistInput = {
    where: contentWhereUniqueInput
    update: XOR<contentUpdateWithoutArtistInput, contentUncheckedUpdateWithoutArtistInput>
    create: XOR<contentCreateWithoutArtistInput, contentUncheckedCreateWithoutArtistInput>
  }

  export type contentUpdateWithWhereUniqueWithoutArtistInput = {
    where: contentWhereUniqueInput
    data: XOR<contentUpdateWithoutArtistInput, contentUncheckedUpdateWithoutArtistInput>
  }

  export type contentUpdateManyWithWhereWithoutArtistInput = {
    where: contentScalarWhereInput
    data: XOR<contentUpdateManyMutationInput, contentUncheckedUpdateManyWithoutArtistInput>
  }

  export type contentScalarWhereInput = {
    AND?: contentScalarWhereInput | contentScalarWhereInput[]
    OR?: contentScalarWhereInput[]
    NOT?: contentScalarWhereInput | contentScalarWhereInput[]
    id?: StringFilter<"content"> | string
    title?: StringFilter<"content"> | string
    description?: StringNullableFilter<"content"> | string | null
    mediaUrl?: StringFilter<"content"> | string
    thumbnailUrl?: StringNullableFilter<"content"> | string | null
    isPublished?: BoolFilter<"content"> | boolean
    category?: StringNullableFilter<"content"> | string | null
    createdAt?: DateTimeFilter<"content"> | Date | string
    updatedAt?: DateTimeFilter<"content"> | Date | string
    storeId?: StringFilter<"content"> | string
    artistId?: StringFilter<"content"> | string
  }

  export type storeUpsertWithWhereUniqueWithoutStoreOwnerInput = {
    where: storeWhereUniqueInput
    update: XOR<storeUpdateWithoutStoreOwnerInput, storeUncheckedUpdateWithoutStoreOwnerInput>
    create: XOR<storeCreateWithoutStoreOwnerInput, storeUncheckedCreateWithoutStoreOwnerInput>
  }

  export type storeUpdateWithWhereUniqueWithoutStoreOwnerInput = {
    where: storeWhereUniqueInput
    data: XOR<storeUpdateWithoutStoreOwnerInput, storeUncheckedUpdateWithoutStoreOwnerInput>
  }

  export type storeUpdateManyWithWhereWithoutStoreOwnerInput = {
    where: storeScalarWhereInput
    data: XOR<storeUpdateManyMutationInput, storeUncheckedUpdateManyWithoutStoreOwnerInput>
  }

  export type storeScalarWhereInput = {
    AND?: storeScalarWhereInput | storeScalarWhereInput[]
    OR?: storeScalarWhereInput[]
    NOT?: storeScalarWhereInput | storeScalarWhereInput[]
    id?: StringFilter<"store"> | string
    storeName?: StringNullableFilter<"store"> | string | null
    storeLogo?: StringNullableFilter<"store"> | string | null
    imagePublicID?: StringNullableFilter<"store"> | string | null
    storeOwnerID?: StringNullableFilter<"store"> | string | null
    createdAt?: DateTimeFilter<"store"> | Date | string
    updatedAt?: DateTimeFilter<"store"> | Date | string
    userId?: StringNullableFilter<"store"> | string | null
  }

  export type reviewUpsertWithWhereUniqueWithoutUserInput = {
    where: reviewWhereUniqueInput
    update: XOR<reviewUpdateWithoutUserInput, reviewUncheckedUpdateWithoutUserInput>
    create: XOR<reviewCreateWithoutUserInput, reviewUncheckedCreateWithoutUserInput>
  }

  export type reviewUpdateWithWhereUniqueWithoutUserInput = {
    where: reviewWhereUniqueInput
    data: XOR<reviewUpdateWithoutUserInput, reviewUncheckedUpdateWithoutUserInput>
  }

  export type reviewUpdateManyWithWhereWithoutUserInput = {
    where: reviewScalarWhereInput
    data: XOR<reviewUpdateManyMutationInput, reviewUncheckedUpdateManyWithoutUserInput>
  }

  export type reviewScalarWhereInput = {
    AND?: reviewScalarWhereInput | reviewScalarWhereInput[]
    OR?: reviewScalarWhereInput[]
    NOT?: reviewScalarWhereInput | reviewScalarWhereInput[]
    id?: StringFilter<"review"> | string
    userID?: StringNullableFilter<"review"> | string | null
    productID?: StringNullableFilter<"review"> | string | null
    review?: StringNullableFilter<"review"> | string | null
    createdAt?: DateTimeFilter<"review"> | Date | string
    updatedAt?: DateTimeFilter<"review"> | Date | string
  }

  export type ratingUpsertWithWhereUniqueWithoutUserInput = {
    where: ratingWhereUniqueInput
    update: XOR<ratingUpdateWithoutUserInput, ratingUncheckedUpdateWithoutUserInput>
    create: XOR<ratingCreateWithoutUserInput, ratingUncheckedCreateWithoutUserInput>
  }

  export type ratingUpdateWithWhereUniqueWithoutUserInput = {
    where: ratingWhereUniqueInput
    data: XOR<ratingUpdateWithoutUserInput, ratingUncheckedUpdateWithoutUserInput>
  }

  export type ratingUpdateManyWithWhereWithoutUserInput = {
    where: ratingScalarWhereInput
    data: XOR<ratingUpdateManyMutationInput, ratingUncheckedUpdateManyWithoutUserInput>
  }

  export type ratingScalarWhereInput = {
    AND?: ratingScalarWhereInput | ratingScalarWhereInput[]
    OR?: ratingScalarWhereInput[]
    NOT?: ratingScalarWhereInput | ratingScalarWhereInput[]
    id?: StringFilter<"rating"> | string
    userID?: StringNullableFilter<"rating"> | string | null
    productID?: StringNullableFilter<"rating"> | string | null
    rating?: IntNullableFilter<"rating"> | number | null
    createdAt?: DateTimeFilter<"rating"> | Date | string
    updatedAt?: DateTimeFilter<"rating"> | Date | string
  }

  export type subscriptionUpsertWithWhereUniqueWithoutUserInput = {
    where: subscriptionWhereUniqueInput
    update: XOR<subscriptionUpdateWithoutUserInput, subscriptionUncheckedUpdateWithoutUserInput>
    create: XOR<subscriptionCreateWithoutUserInput, subscriptionUncheckedCreateWithoutUserInput>
  }

  export type subscriptionUpdateWithWhereUniqueWithoutUserInput = {
    where: subscriptionWhereUniqueInput
    data: XOR<subscriptionUpdateWithoutUserInput, subscriptionUncheckedUpdateWithoutUserInput>
  }

  export type subscriptionUpdateManyWithWhereWithoutUserInput = {
    where: subscriptionScalarWhereInput
    data: XOR<subscriptionUpdateManyMutationInput, subscriptionUncheckedUpdateManyWithoutUserInput>
  }

  export type subscriptionScalarWhereInput = {
    AND?: subscriptionScalarWhereInput | subscriptionScalarWhereInput[]
    OR?: subscriptionScalarWhereInput[]
    NOT?: subscriptionScalarWhereInput | subscriptionScalarWhereInput[]
    id?: StringFilter<"subscription"> | string
    userId?: StringFilter<"subscription"> | string
    contentId?: StringNullableFilter<"subscription"> | string | null
    paymentId?: StringNullableFilter<"subscription"> | string | null
    startDate?: DateTimeFilter<"subscription"> | Date | string
    endDate?: DateTimeNullableFilter<"subscription"> | Date | string | null
    isActive?: BoolFilter<"subscription"> | boolean
    createdAt?: DateTimeFilter<"subscription"> | Date | string
    updatedAt?: DateTimeFilter<"subscription"> | Date | string
  }

  export type FanEngagementUpsertWithWhereUniqueWithoutUserInput = {
    where: FanEngagementWhereUniqueInput
    update: XOR<FanEngagementUpdateWithoutUserInput, FanEngagementUncheckedUpdateWithoutUserInput>
    create: XOR<FanEngagementCreateWithoutUserInput, FanEngagementUncheckedCreateWithoutUserInput>
  }

  export type FanEngagementUpdateWithWhereUniqueWithoutUserInput = {
    where: FanEngagementWhereUniqueInput
    data: XOR<FanEngagementUpdateWithoutUserInput, FanEngagementUncheckedUpdateWithoutUserInput>
  }

  export type FanEngagementUpdateManyWithWhereWithoutUserInput = {
    where: FanEngagementScalarWhereInput
    data: XOR<FanEngagementUpdateManyMutationInput, FanEngagementUncheckedUpdateManyWithoutUserInput>
  }

  export type FanEngagementScalarWhereInput = {
    AND?: FanEngagementScalarWhereInput | FanEngagementScalarWhereInput[]
    OR?: FanEngagementScalarWhereInput[]
    NOT?: FanEngagementScalarWhereInput | FanEngagementScalarWhereInput[]
    id?: StringFilter<"FanEngagement"> | string
    userId?: StringFilter<"FanEngagement"> | string
    contentId?: StringFilter<"FanEngagement"> | string
    action?: StringNullableFilter<"FanEngagement"> | string | null
    value?: StringNullableFilter<"FanEngagement"> | string | null
    createdAt?: DateTimeFilter<"FanEngagement"> | Date | string
    updatedAt?: DateTimeFilter<"FanEngagement"> | Date | string
  }

  export type favourite_contentUpsertWithWhereUniqueWithoutUserInput = {
    where: favourite_contentWhereUniqueInput
    update: XOR<favourite_contentUpdateWithoutUserInput, favourite_contentUncheckedUpdateWithoutUserInput>
    create: XOR<favourite_contentCreateWithoutUserInput, favourite_contentUncheckedCreateWithoutUserInput>
  }

  export type favourite_contentUpdateWithWhereUniqueWithoutUserInput = {
    where: favourite_contentWhereUniqueInput
    data: XOR<favourite_contentUpdateWithoutUserInput, favourite_contentUncheckedUpdateWithoutUserInput>
  }

  export type favourite_contentUpdateManyWithWhereWithoutUserInput = {
    where: favourite_contentScalarWhereInput
    data: XOR<favourite_contentUpdateManyMutationInput, favourite_contentUncheckedUpdateManyWithoutUserInput>
  }

  export type favourite_contentScalarWhereInput = {
    AND?: favourite_contentScalarWhereInput | favourite_contentScalarWhereInput[]
    OR?: favourite_contentScalarWhereInput[]
    NOT?: favourite_contentScalarWhereInput | favourite_contentScalarWhereInput[]
    id?: StringFilter<"favourite_content"> | string
    userId?: StringFilter<"favourite_content"> | string
    contentId?: StringNullableFilter<"favourite_content"> | string | null
    productId?: StringNullableFilter<"favourite_content"> | string | null
    storeId?: StringNullableFilter<"favourite_content"> | string | null
    createdAt?: DateTimeFilter<"favourite_content"> | Date | string
    updatedAt?: DateTimeFilter<"favourite_content"> | Date | string
  }

  export type userCreateWithoutContentInput = {
    id?: string
    fullname: string
    email: string
    password?: string | null
    profile_image_url?: string | null
    uploadedProfileImage?: string | null
    category?: string | null
    imagePublicID?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    acknowledgements?: acknowledgementCreateNestedManyWithoutUserInput
    order?: orderCreateNestedManyWithoutUserInput
    payment?: paymentCreateNestedManyWithoutUserInput
    store?: storeCreateNestedManyWithoutStoreOwnerInput
    review?: reviewCreateNestedManyWithoutUserInput
    rating?: ratingCreateNestedManyWithoutUserInput
    subscription?: subscriptionCreateNestedManyWithoutUserInput
    FanEngagement?: FanEngagementCreateNestedManyWithoutUserInput
    favourite_content?: favourite_contentCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutContentInput = {
    id?: string
    fullname: string
    email: string
    password?: string | null
    profile_image_url?: string | null
    uploadedProfileImage?: string | null
    category?: string | null
    imagePublicID?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    acknowledgements?: acknowledgementUncheckedCreateNestedManyWithoutUserInput
    order?: orderUncheckedCreateNestedManyWithoutUserInput
    payment?: paymentUncheckedCreateNestedManyWithoutUserInput
    store?: storeUncheckedCreateNestedManyWithoutStoreOwnerInput
    review?: reviewUncheckedCreateNestedManyWithoutUserInput
    rating?: ratingUncheckedCreateNestedManyWithoutUserInput
    subscription?: subscriptionUncheckedCreateNestedManyWithoutUserInput
    FanEngagement?: FanEngagementUncheckedCreateNestedManyWithoutUserInput
    favourite_content?: favourite_contentUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutContentInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutContentInput, userUncheckedCreateWithoutContentInput>
  }

  export type storeCreateWithoutContentInput = {
    id?: string
    storeName?: string | null
    storeLogo?: string | null
    imagePublicID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    order?: orderCreateNestedManyWithoutStoreInput
    payment?: paymentCreateNestedManyWithoutStoreInput
    products?: productCreateNestedManyWithoutStoreInput
    storeOwner?: userCreateNestedOneWithoutStoreInput
    favourite_content?: favourite_contentCreateNestedManyWithoutStoreInput
  }

  export type storeUncheckedCreateWithoutContentInput = {
    id?: string
    storeName?: string | null
    storeLogo?: string | null
    imagePublicID?: string | null
    storeOwnerID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    order?: orderUncheckedCreateNestedManyWithoutStoreInput
    payment?: paymentUncheckedCreateNestedManyWithoutStoreInput
    products?: productUncheckedCreateNestedManyWithoutStoreInput
    favourite_content?: favourite_contentUncheckedCreateNestedManyWithoutStoreInput
  }

  export type storeCreateOrConnectWithoutContentInput = {
    where: storeWhereUniqueInput
    create: XOR<storeCreateWithoutContentInput, storeUncheckedCreateWithoutContentInput>
  }

  export type subscriptionCreateWithoutContentInput = {
    id?: string
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: userCreateNestedOneWithoutSubscriptionInput
    payment?: paymentCreateNestedOneWithoutSubscriptionInput
  }

  export type subscriptionUncheckedCreateWithoutContentInput = {
    id?: string
    userId: string
    paymentId?: string | null
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type subscriptionCreateOrConnectWithoutContentInput = {
    where: subscriptionWhereUniqueInput
    create: XOR<subscriptionCreateWithoutContentInput, subscriptionUncheckedCreateWithoutContentInput>
  }

  export type subscriptionCreateManyContentInputEnvelope = {
    data: subscriptionCreateManyContentInput | subscriptionCreateManyContentInput[]
    skipDuplicates?: boolean
  }

  export type FanEngagementCreateWithoutContentInput = {
    id?: string
    action?: string | null
    value?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: userCreateNestedOneWithoutFanEngagementInput
  }

  export type FanEngagementUncheckedCreateWithoutContentInput = {
    id?: string
    userId: string
    action?: string | null
    value?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FanEngagementCreateOrConnectWithoutContentInput = {
    where: FanEngagementWhereUniqueInput
    create: XOR<FanEngagementCreateWithoutContentInput, FanEngagementUncheckedCreateWithoutContentInput>
  }

  export type FanEngagementCreateManyContentInputEnvelope = {
    data: FanEngagementCreateManyContentInput | FanEngagementCreateManyContentInput[]
    skipDuplicates?: boolean
  }

  export type favourite_contentCreateWithoutContentInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: userCreateNestedOneWithoutFavourite_contentInput
    product?: productCreateNestedOneWithoutFavourite_contentInput
    store?: storeCreateNestedOneWithoutFavourite_contentInput
  }

  export type favourite_contentUncheckedCreateWithoutContentInput = {
    id?: string
    userId: string
    productId?: string | null
    storeId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type favourite_contentCreateOrConnectWithoutContentInput = {
    where: favourite_contentWhereUniqueInput
    create: XOR<favourite_contentCreateWithoutContentInput, favourite_contentUncheckedCreateWithoutContentInput>
  }

  export type favourite_contentCreateManyContentInputEnvelope = {
    data: favourite_contentCreateManyContentInput | favourite_contentCreateManyContentInput[]
    skipDuplicates?: boolean
  }

  export type userUpsertWithoutContentInput = {
    update: XOR<userUpdateWithoutContentInput, userUncheckedUpdateWithoutContentInput>
    create: XOR<userCreateWithoutContentInput, userUncheckedCreateWithoutContentInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutContentInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutContentInput, userUncheckedUpdateWithoutContentInput>
  }

  export type userUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedProfileImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    acknowledgements?: acknowledgementUpdateManyWithoutUserNestedInput
    order?: orderUpdateManyWithoutUserNestedInput
    payment?: paymentUpdateManyWithoutUserNestedInput
    store?: storeUpdateManyWithoutStoreOwnerNestedInput
    review?: reviewUpdateManyWithoutUserNestedInput
    rating?: ratingUpdateManyWithoutUserNestedInput
    subscription?: subscriptionUpdateManyWithoutUserNestedInput
    FanEngagement?: FanEngagementUpdateManyWithoutUserNestedInput
    favourite_content?: favourite_contentUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedProfileImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    acknowledgements?: acknowledgementUncheckedUpdateManyWithoutUserNestedInput
    order?: orderUncheckedUpdateManyWithoutUserNestedInput
    payment?: paymentUncheckedUpdateManyWithoutUserNestedInput
    store?: storeUncheckedUpdateManyWithoutStoreOwnerNestedInput
    review?: reviewUncheckedUpdateManyWithoutUserNestedInput
    rating?: ratingUncheckedUpdateManyWithoutUserNestedInput
    subscription?: subscriptionUncheckedUpdateManyWithoutUserNestedInput
    FanEngagement?: FanEngagementUncheckedUpdateManyWithoutUserNestedInput
    favourite_content?: favourite_contentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type storeUpsertWithoutContentInput = {
    update: XOR<storeUpdateWithoutContentInput, storeUncheckedUpdateWithoutContentInput>
    create: XOR<storeCreateWithoutContentInput, storeUncheckedCreateWithoutContentInput>
    where?: storeWhereInput
  }

  export type storeUpdateToOneWithWhereWithoutContentInput = {
    where?: storeWhereInput
    data: XOR<storeUpdateWithoutContentInput, storeUncheckedUpdateWithoutContentInput>
  }

  export type storeUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    storeLogo?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    order?: orderUpdateManyWithoutStoreNestedInput
    payment?: paymentUpdateManyWithoutStoreNestedInput
    products?: productUpdateManyWithoutStoreNestedInput
    storeOwner?: userUpdateOneWithoutStoreNestedInput
    favourite_content?: favourite_contentUpdateManyWithoutStoreNestedInput
  }

  export type storeUncheckedUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    storeLogo?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    storeOwnerID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    order?: orderUncheckedUpdateManyWithoutStoreNestedInput
    payment?: paymentUncheckedUpdateManyWithoutStoreNestedInput
    products?: productUncheckedUpdateManyWithoutStoreNestedInput
    favourite_content?: favourite_contentUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type subscriptionUpsertWithWhereUniqueWithoutContentInput = {
    where: subscriptionWhereUniqueInput
    update: XOR<subscriptionUpdateWithoutContentInput, subscriptionUncheckedUpdateWithoutContentInput>
    create: XOR<subscriptionCreateWithoutContentInput, subscriptionUncheckedCreateWithoutContentInput>
  }

  export type subscriptionUpdateWithWhereUniqueWithoutContentInput = {
    where: subscriptionWhereUniqueInput
    data: XOR<subscriptionUpdateWithoutContentInput, subscriptionUncheckedUpdateWithoutContentInput>
  }

  export type subscriptionUpdateManyWithWhereWithoutContentInput = {
    where: subscriptionScalarWhereInput
    data: XOR<subscriptionUpdateManyMutationInput, subscriptionUncheckedUpdateManyWithoutContentInput>
  }

  export type FanEngagementUpsertWithWhereUniqueWithoutContentInput = {
    where: FanEngagementWhereUniqueInput
    update: XOR<FanEngagementUpdateWithoutContentInput, FanEngagementUncheckedUpdateWithoutContentInput>
    create: XOR<FanEngagementCreateWithoutContentInput, FanEngagementUncheckedCreateWithoutContentInput>
  }

  export type FanEngagementUpdateWithWhereUniqueWithoutContentInput = {
    where: FanEngagementWhereUniqueInput
    data: XOR<FanEngagementUpdateWithoutContentInput, FanEngagementUncheckedUpdateWithoutContentInput>
  }

  export type FanEngagementUpdateManyWithWhereWithoutContentInput = {
    where: FanEngagementScalarWhereInput
    data: XOR<FanEngagementUpdateManyMutationInput, FanEngagementUncheckedUpdateManyWithoutContentInput>
  }

  export type favourite_contentUpsertWithWhereUniqueWithoutContentInput = {
    where: favourite_contentWhereUniqueInput
    update: XOR<favourite_contentUpdateWithoutContentInput, favourite_contentUncheckedUpdateWithoutContentInput>
    create: XOR<favourite_contentCreateWithoutContentInput, favourite_contentUncheckedCreateWithoutContentInput>
  }

  export type favourite_contentUpdateWithWhereUniqueWithoutContentInput = {
    where: favourite_contentWhereUniqueInput
    data: XOR<favourite_contentUpdateWithoutContentInput, favourite_contentUncheckedUpdateWithoutContentInput>
  }

  export type favourite_contentUpdateManyWithWhereWithoutContentInput = {
    where: favourite_contentScalarWhereInput
    data: XOR<favourite_contentUpdateManyMutationInput, favourite_contentUncheckedUpdateManyWithoutContentInput>
  }

  export type orderCreateWithoutStoreInput = {
    id?: string
    shippingAddress?: string | null
    amount: Decimal | DecimalJsLike | number | string
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: userCreateNestedOneWithoutOrderInput
    orderProducts?: orderProductsCreateNestedManyWithoutOrderInput
    payment?: paymentCreateNestedManyWithoutOrderInput
  }

  export type orderUncheckedCreateWithoutStoreInput = {
    id?: string
    userID?: string | null
    shippingAddress?: string | null
    amount: Decimal | DecimalJsLike | number | string
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderProducts?: orderProductsUncheckedCreateNestedManyWithoutOrderInput
    payment?: paymentUncheckedCreateNestedManyWithoutOrderInput
  }

  export type orderCreateOrConnectWithoutStoreInput = {
    where: orderWhereUniqueInput
    create: XOR<orderCreateWithoutStoreInput, orderUncheckedCreateWithoutStoreInput>
  }

  export type orderCreateManyStoreInputEnvelope = {
    data: orderCreateManyStoreInput | orderCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type paymentCreateWithoutStoreInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod?: string | null
    paymentStatus?: string | null
    type?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentRef?: string | null
    order?: orderCreateNestedOneWithoutPaymentInput
    user?: userCreateNestedOneWithoutPaymentInput
    subscription?: subscriptionCreateNestedManyWithoutPaymentInput
  }

  export type paymentUncheckedCreateWithoutStoreInput = {
    id?: string
    userID?: string | null
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod?: string | null
    paymentStatus?: string | null
    type?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderId?: string | null
    paymentRef?: string | null
    subscription?: subscriptionUncheckedCreateNestedManyWithoutPaymentInput
  }

  export type paymentCreateOrConnectWithoutStoreInput = {
    where: paymentWhereUniqueInput
    create: XOR<paymentCreateWithoutStoreInput, paymentUncheckedCreateWithoutStoreInput>
  }

  export type paymentCreateManyStoreInputEnvelope = {
    data: paymentCreateManyStoreInput | paymentCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type productCreateWithoutStoreInput = {
    id?: string
    productName: string
    description: string
    quantity?: number | null
    price: string
    rating?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderProducts?: orderProductsCreateNestedManyWithoutProductInput
    productImage?: productImageCreateNestedOneWithoutProductInput
    ratings?: ratingCreateNestedManyWithoutProductInput
    reviews?: reviewCreateNestedManyWithoutProductInput
    favourite_content?: favourite_contentCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutStoreInput = {
    id?: string
    productName: string
    description: string
    productImageID?: string | null
    quantity?: number | null
    price: string
    rating?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderProducts?: orderProductsUncheckedCreateNestedManyWithoutProductInput
    ratings?: ratingUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewUncheckedCreateNestedManyWithoutProductInput
    favourite_content?: favourite_contentUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutStoreInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutStoreInput, productUncheckedCreateWithoutStoreInput>
  }

  export type productCreateManyStoreInputEnvelope = {
    data: productCreateManyStoreInput | productCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type userCreateWithoutStoreInput = {
    id?: string
    fullname: string
    email: string
    password?: string | null
    profile_image_url?: string | null
    uploadedProfileImage?: string | null
    category?: string | null
    imagePublicID?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    acknowledgements?: acknowledgementCreateNestedManyWithoutUserInput
    order?: orderCreateNestedManyWithoutUserInput
    payment?: paymentCreateNestedManyWithoutUserInput
    content?: contentCreateNestedManyWithoutArtistInput
    review?: reviewCreateNestedManyWithoutUserInput
    rating?: ratingCreateNestedManyWithoutUserInput
    subscription?: subscriptionCreateNestedManyWithoutUserInput
    FanEngagement?: FanEngagementCreateNestedManyWithoutUserInput
    favourite_content?: favourite_contentCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutStoreInput = {
    id?: string
    fullname: string
    email: string
    password?: string | null
    profile_image_url?: string | null
    uploadedProfileImage?: string | null
    category?: string | null
    imagePublicID?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    acknowledgements?: acknowledgementUncheckedCreateNestedManyWithoutUserInput
    order?: orderUncheckedCreateNestedManyWithoutUserInput
    payment?: paymentUncheckedCreateNestedManyWithoutUserInput
    content?: contentUncheckedCreateNestedManyWithoutArtistInput
    review?: reviewUncheckedCreateNestedManyWithoutUserInput
    rating?: ratingUncheckedCreateNestedManyWithoutUserInput
    subscription?: subscriptionUncheckedCreateNestedManyWithoutUserInput
    FanEngagement?: FanEngagementUncheckedCreateNestedManyWithoutUserInput
    favourite_content?: favourite_contentUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutStoreInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutStoreInput, userUncheckedCreateWithoutStoreInput>
  }

  export type contentCreateWithoutStoreInput = {
    id?: string
    title: string
    description?: string | null
    mediaUrl: string
    thumbnailUrl?: string | null
    isPublished?: boolean
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artist: userCreateNestedOneWithoutContentInput
    subscription?: subscriptionCreateNestedManyWithoutContentInput
    FanEngagement?: FanEngagementCreateNestedManyWithoutContentInput
    favourite_content?: favourite_contentCreateNestedManyWithoutContentInput
  }

  export type contentUncheckedCreateWithoutStoreInput = {
    id?: string
    title: string
    description?: string | null
    mediaUrl: string
    thumbnailUrl?: string | null
    isPublished?: boolean
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artistId: string
    subscription?: subscriptionUncheckedCreateNestedManyWithoutContentInput
    FanEngagement?: FanEngagementUncheckedCreateNestedManyWithoutContentInput
    favourite_content?: favourite_contentUncheckedCreateNestedManyWithoutContentInput
  }

  export type contentCreateOrConnectWithoutStoreInput = {
    where: contentWhereUniqueInput
    create: XOR<contentCreateWithoutStoreInput, contentUncheckedCreateWithoutStoreInput>
  }

  export type contentCreateManyStoreInputEnvelope = {
    data: contentCreateManyStoreInput | contentCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type favourite_contentCreateWithoutStoreInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: userCreateNestedOneWithoutFavourite_contentInput
    content?: contentCreateNestedOneWithoutFavourite_contentInput
    product?: productCreateNestedOneWithoutFavourite_contentInput
  }

  export type favourite_contentUncheckedCreateWithoutStoreInput = {
    id?: string
    userId: string
    contentId?: string | null
    productId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type favourite_contentCreateOrConnectWithoutStoreInput = {
    where: favourite_contentWhereUniqueInput
    create: XOR<favourite_contentCreateWithoutStoreInput, favourite_contentUncheckedCreateWithoutStoreInput>
  }

  export type favourite_contentCreateManyStoreInputEnvelope = {
    data: favourite_contentCreateManyStoreInput | favourite_contentCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type orderUpsertWithWhereUniqueWithoutStoreInput = {
    where: orderWhereUniqueInput
    update: XOR<orderUpdateWithoutStoreInput, orderUncheckedUpdateWithoutStoreInput>
    create: XOR<orderCreateWithoutStoreInput, orderUncheckedCreateWithoutStoreInput>
  }

  export type orderUpdateWithWhereUniqueWithoutStoreInput = {
    where: orderWhereUniqueInput
    data: XOR<orderUpdateWithoutStoreInput, orderUncheckedUpdateWithoutStoreInput>
  }

  export type orderUpdateManyWithWhereWithoutStoreInput = {
    where: orderScalarWhereInput
    data: XOR<orderUpdateManyMutationInput, orderUncheckedUpdateManyWithoutStoreInput>
  }

  export type paymentUpsertWithWhereUniqueWithoutStoreInput = {
    where: paymentWhereUniqueInput
    update: XOR<paymentUpdateWithoutStoreInput, paymentUncheckedUpdateWithoutStoreInput>
    create: XOR<paymentCreateWithoutStoreInput, paymentUncheckedCreateWithoutStoreInput>
  }

  export type paymentUpdateWithWhereUniqueWithoutStoreInput = {
    where: paymentWhereUniqueInput
    data: XOR<paymentUpdateWithoutStoreInput, paymentUncheckedUpdateWithoutStoreInput>
  }

  export type paymentUpdateManyWithWhereWithoutStoreInput = {
    where: paymentScalarWhereInput
    data: XOR<paymentUpdateManyMutationInput, paymentUncheckedUpdateManyWithoutStoreInput>
  }

  export type productUpsertWithWhereUniqueWithoutStoreInput = {
    where: productWhereUniqueInput
    update: XOR<productUpdateWithoutStoreInput, productUncheckedUpdateWithoutStoreInput>
    create: XOR<productCreateWithoutStoreInput, productUncheckedCreateWithoutStoreInput>
  }

  export type productUpdateWithWhereUniqueWithoutStoreInput = {
    where: productWhereUniqueInput
    data: XOR<productUpdateWithoutStoreInput, productUncheckedUpdateWithoutStoreInput>
  }

  export type productUpdateManyWithWhereWithoutStoreInput = {
    where: productScalarWhereInput
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyWithoutStoreInput>
  }

  export type productScalarWhereInput = {
    AND?: productScalarWhereInput | productScalarWhereInput[]
    OR?: productScalarWhereInput[]
    NOT?: productScalarWhereInput | productScalarWhereInput[]
    id?: StringFilter<"product"> | string
    productName?: StringFilter<"product"> | string
    description?: StringFilter<"product"> | string
    productImageID?: StringNullableFilter<"product"> | string | null
    quantity?: IntNullableFilter<"product"> | number | null
    price?: StringFilter<"product"> | string
    rating?: DecimalNullableFilter<"product"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"product"> | Date | string
    updatedAt?: DateTimeFilter<"product"> | Date | string
    storeId?: StringNullableFilter<"product"> | string | null
  }

  export type userUpsertWithoutStoreInput = {
    update: XOR<userUpdateWithoutStoreInput, userUncheckedUpdateWithoutStoreInput>
    create: XOR<userCreateWithoutStoreInput, userUncheckedCreateWithoutStoreInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutStoreInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutStoreInput, userUncheckedUpdateWithoutStoreInput>
  }

  export type userUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedProfileImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    acknowledgements?: acknowledgementUpdateManyWithoutUserNestedInput
    order?: orderUpdateManyWithoutUserNestedInput
    payment?: paymentUpdateManyWithoutUserNestedInput
    content?: contentUpdateManyWithoutArtistNestedInput
    review?: reviewUpdateManyWithoutUserNestedInput
    rating?: ratingUpdateManyWithoutUserNestedInput
    subscription?: subscriptionUpdateManyWithoutUserNestedInput
    FanEngagement?: FanEngagementUpdateManyWithoutUserNestedInput
    favourite_content?: favourite_contentUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedProfileImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    acknowledgements?: acknowledgementUncheckedUpdateManyWithoutUserNestedInput
    order?: orderUncheckedUpdateManyWithoutUserNestedInput
    payment?: paymentUncheckedUpdateManyWithoutUserNestedInput
    content?: contentUncheckedUpdateManyWithoutArtistNestedInput
    review?: reviewUncheckedUpdateManyWithoutUserNestedInput
    rating?: ratingUncheckedUpdateManyWithoutUserNestedInput
    subscription?: subscriptionUncheckedUpdateManyWithoutUserNestedInput
    FanEngagement?: FanEngagementUncheckedUpdateManyWithoutUserNestedInput
    favourite_content?: favourite_contentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type contentUpsertWithWhereUniqueWithoutStoreInput = {
    where: contentWhereUniqueInput
    update: XOR<contentUpdateWithoutStoreInput, contentUncheckedUpdateWithoutStoreInput>
    create: XOR<contentCreateWithoutStoreInput, contentUncheckedCreateWithoutStoreInput>
  }

  export type contentUpdateWithWhereUniqueWithoutStoreInput = {
    where: contentWhereUniqueInput
    data: XOR<contentUpdateWithoutStoreInput, contentUncheckedUpdateWithoutStoreInput>
  }

  export type contentUpdateManyWithWhereWithoutStoreInput = {
    where: contentScalarWhereInput
    data: XOR<contentUpdateManyMutationInput, contentUncheckedUpdateManyWithoutStoreInput>
  }

  export type favourite_contentUpsertWithWhereUniqueWithoutStoreInput = {
    where: favourite_contentWhereUniqueInput
    update: XOR<favourite_contentUpdateWithoutStoreInput, favourite_contentUncheckedUpdateWithoutStoreInput>
    create: XOR<favourite_contentCreateWithoutStoreInput, favourite_contentUncheckedCreateWithoutStoreInput>
  }

  export type favourite_contentUpdateWithWhereUniqueWithoutStoreInput = {
    where: favourite_contentWhereUniqueInput
    data: XOR<favourite_contentUpdateWithoutStoreInput, favourite_contentUncheckedUpdateWithoutStoreInput>
  }

  export type favourite_contentUpdateManyWithWhereWithoutStoreInput = {
    where: favourite_contentScalarWhereInput
    data: XOR<favourite_contentUpdateManyMutationInput, favourite_contentUncheckedUpdateManyWithoutStoreInput>
  }

  export type orderProductsCreateWithoutProductInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    order?: orderCreateNestedOneWithoutOrderProductsInput
  }

  export type orderProductsUncheckedCreateWithoutProductInput = {
    id?: string
    orderID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type orderProductsCreateOrConnectWithoutProductInput = {
    where: orderProductsWhereUniqueInput
    create: XOR<orderProductsCreateWithoutProductInput, orderProductsUncheckedCreateWithoutProductInput>
  }

  export type orderProductsCreateManyProductInputEnvelope = {
    data: orderProductsCreateManyProductInput | orderProductsCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type productImageCreateWithoutProductInput = {
    id?: string
    productImage?: string | null
    imagePublicID?: string | null
    productImageID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type productImageUncheckedCreateWithoutProductInput = {
    id?: string
    productImage?: string | null
    imagePublicID?: string | null
    productImageID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type productImageCreateOrConnectWithoutProductInput = {
    where: productImageWhereUniqueInput
    create: XOR<productImageCreateWithoutProductInput, productImageUncheckedCreateWithoutProductInput>
  }

  export type storeCreateWithoutProductsInput = {
    id?: string
    storeName?: string | null
    storeLogo?: string | null
    imagePublicID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    order?: orderCreateNestedManyWithoutStoreInput
    payment?: paymentCreateNestedManyWithoutStoreInput
    storeOwner?: userCreateNestedOneWithoutStoreInput
    content?: contentCreateNestedManyWithoutStoreInput
    favourite_content?: favourite_contentCreateNestedManyWithoutStoreInput
  }

  export type storeUncheckedCreateWithoutProductsInput = {
    id?: string
    storeName?: string | null
    storeLogo?: string | null
    imagePublicID?: string | null
    storeOwnerID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    order?: orderUncheckedCreateNestedManyWithoutStoreInput
    payment?: paymentUncheckedCreateNestedManyWithoutStoreInput
    content?: contentUncheckedCreateNestedManyWithoutStoreInput
    favourite_content?: favourite_contentUncheckedCreateNestedManyWithoutStoreInput
  }

  export type storeCreateOrConnectWithoutProductsInput = {
    where: storeWhereUniqueInput
    create: XOR<storeCreateWithoutProductsInput, storeUncheckedCreateWithoutProductsInput>
  }

  export type ratingCreateWithoutProductInput = {
    id?: string
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: userCreateNestedOneWithoutRatingInput
  }

  export type ratingUncheckedCreateWithoutProductInput = {
    id?: string
    userID?: string | null
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ratingCreateOrConnectWithoutProductInput = {
    where: ratingWhereUniqueInput
    create: XOR<ratingCreateWithoutProductInput, ratingUncheckedCreateWithoutProductInput>
  }

  export type ratingCreateManyProductInputEnvelope = {
    data: ratingCreateManyProductInput | ratingCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type reviewCreateWithoutProductInput = {
    id?: string
    review?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: userCreateNestedOneWithoutReviewInput
  }

  export type reviewUncheckedCreateWithoutProductInput = {
    id?: string
    userID?: string | null
    review?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type reviewCreateOrConnectWithoutProductInput = {
    where: reviewWhereUniqueInput
    create: XOR<reviewCreateWithoutProductInput, reviewUncheckedCreateWithoutProductInput>
  }

  export type reviewCreateManyProductInputEnvelope = {
    data: reviewCreateManyProductInput | reviewCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type favourite_contentCreateWithoutProductInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: userCreateNestedOneWithoutFavourite_contentInput
    content?: contentCreateNestedOneWithoutFavourite_contentInput
    store?: storeCreateNestedOneWithoutFavourite_contentInput
  }

  export type favourite_contentUncheckedCreateWithoutProductInput = {
    id?: string
    userId: string
    contentId?: string | null
    storeId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type favourite_contentCreateOrConnectWithoutProductInput = {
    where: favourite_contentWhereUniqueInput
    create: XOR<favourite_contentCreateWithoutProductInput, favourite_contentUncheckedCreateWithoutProductInput>
  }

  export type favourite_contentCreateManyProductInputEnvelope = {
    data: favourite_contentCreateManyProductInput | favourite_contentCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type orderProductsUpsertWithWhereUniqueWithoutProductInput = {
    where: orderProductsWhereUniqueInput
    update: XOR<orderProductsUpdateWithoutProductInput, orderProductsUncheckedUpdateWithoutProductInput>
    create: XOR<orderProductsCreateWithoutProductInput, orderProductsUncheckedCreateWithoutProductInput>
  }

  export type orderProductsUpdateWithWhereUniqueWithoutProductInput = {
    where: orderProductsWhereUniqueInput
    data: XOR<orderProductsUpdateWithoutProductInput, orderProductsUncheckedUpdateWithoutProductInput>
  }

  export type orderProductsUpdateManyWithWhereWithoutProductInput = {
    where: orderProductsScalarWhereInput
    data: XOR<orderProductsUpdateManyMutationInput, orderProductsUncheckedUpdateManyWithoutProductInput>
  }

  export type orderProductsScalarWhereInput = {
    AND?: orderProductsScalarWhereInput | orderProductsScalarWhereInput[]
    OR?: orderProductsScalarWhereInput[]
    NOT?: orderProductsScalarWhereInput | orderProductsScalarWhereInput[]
    id?: StringFilter<"orderProducts"> | string
    orderID?: StringNullableFilter<"orderProducts"> | string | null
    productID?: StringNullableFilter<"orderProducts"> | string | null
    createdAt?: DateTimeFilter<"orderProducts"> | Date | string
    updatedAt?: DateTimeFilter<"orderProducts"> | Date | string
  }

  export type productImageUpsertWithoutProductInput = {
    update: XOR<productImageUpdateWithoutProductInput, productImageUncheckedUpdateWithoutProductInput>
    create: XOR<productImageCreateWithoutProductInput, productImageUncheckedCreateWithoutProductInput>
    where?: productImageWhereInput
  }

  export type productImageUpdateToOneWithWhereWithoutProductInput = {
    where?: productImageWhereInput
    data: XOR<productImageUpdateWithoutProductInput, productImageUncheckedUpdateWithoutProductInput>
  }

  export type productImageUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    productImage?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    productImageID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productImageUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    productImage?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    productImageID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type storeUpsertWithoutProductsInput = {
    update: XOR<storeUpdateWithoutProductsInput, storeUncheckedUpdateWithoutProductsInput>
    create: XOR<storeCreateWithoutProductsInput, storeUncheckedCreateWithoutProductsInput>
    where?: storeWhereInput
  }

  export type storeUpdateToOneWithWhereWithoutProductsInput = {
    where?: storeWhereInput
    data: XOR<storeUpdateWithoutProductsInput, storeUncheckedUpdateWithoutProductsInput>
  }

  export type storeUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    storeLogo?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    order?: orderUpdateManyWithoutStoreNestedInput
    payment?: paymentUpdateManyWithoutStoreNestedInput
    storeOwner?: userUpdateOneWithoutStoreNestedInput
    content?: contentUpdateManyWithoutStoreNestedInput
    favourite_content?: favourite_contentUpdateManyWithoutStoreNestedInput
  }

  export type storeUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    storeLogo?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    storeOwnerID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    order?: orderUncheckedUpdateManyWithoutStoreNestedInput
    payment?: paymentUncheckedUpdateManyWithoutStoreNestedInput
    content?: contentUncheckedUpdateManyWithoutStoreNestedInput
    favourite_content?: favourite_contentUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type ratingUpsertWithWhereUniqueWithoutProductInput = {
    where: ratingWhereUniqueInput
    update: XOR<ratingUpdateWithoutProductInput, ratingUncheckedUpdateWithoutProductInput>
    create: XOR<ratingCreateWithoutProductInput, ratingUncheckedCreateWithoutProductInput>
  }

  export type ratingUpdateWithWhereUniqueWithoutProductInput = {
    where: ratingWhereUniqueInput
    data: XOR<ratingUpdateWithoutProductInput, ratingUncheckedUpdateWithoutProductInput>
  }

  export type ratingUpdateManyWithWhereWithoutProductInput = {
    where: ratingScalarWhereInput
    data: XOR<ratingUpdateManyMutationInput, ratingUncheckedUpdateManyWithoutProductInput>
  }

  export type reviewUpsertWithWhereUniqueWithoutProductInput = {
    where: reviewWhereUniqueInput
    update: XOR<reviewUpdateWithoutProductInput, reviewUncheckedUpdateWithoutProductInput>
    create: XOR<reviewCreateWithoutProductInput, reviewUncheckedCreateWithoutProductInput>
  }

  export type reviewUpdateWithWhereUniqueWithoutProductInput = {
    where: reviewWhereUniqueInput
    data: XOR<reviewUpdateWithoutProductInput, reviewUncheckedUpdateWithoutProductInput>
  }

  export type reviewUpdateManyWithWhereWithoutProductInput = {
    where: reviewScalarWhereInput
    data: XOR<reviewUpdateManyMutationInput, reviewUncheckedUpdateManyWithoutProductInput>
  }

  export type favourite_contentUpsertWithWhereUniqueWithoutProductInput = {
    where: favourite_contentWhereUniqueInput
    update: XOR<favourite_contentUpdateWithoutProductInput, favourite_contentUncheckedUpdateWithoutProductInput>
    create: XOR<favourite_contentCreateWithoutProductInput, favourite_contentUncheckedCreateWithoutProductInput>
  }

  export type favourite_contentUpdateWithWhereUniqueWithoutProductInput = {
    where: favourite_contentWhereUniqueInput
    data: XOR<favourite_contentUpdateWithoutProductInput, favourite_contentUncheckedUpdateWithoutProductInput>
  }

  export type favourite_contentUpdateManyWithWhereWithoutProductInput = {
    where: favourite_contentScalarWhereInput
    data: XOR<favourite_contentUpdateManyMutationInput, favourite_contentUncheckedUpdateManyWithoutProductInput>
  }

  export type productCreateWithoutReviewsInput = {
    id?: string
    productName: string
    description: string
    quantity?: number | null
    price: string
    rating?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderProducts?: orderProductsCreateNestedManyWithoutProductInput
    productImage?: productImageCreateNestedOneWithoutProductInput
    store?: storeCreateNestedOneWithoutProductsInput
    ratings?: ratingCreateNestedManyWithoutProductInput
    favourite_content?: favourite_contentCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutReviewsInput = {
    id?: string
    productName: string
    description: string
    productImageID?: string | null
    quantity?: number | null
    price: string
    rating?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    storeId?: string | null
    orderProducts?: orderProductsUncheckedCreateNestedManyWithoutProductInput
    ratings?: ratingUncheckedCreateNestedManyWithoutProductInput
    favourite_content?: favourite_contentUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutReviewsInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutReviewsInput, productUncheckedCreateWithoutReviewsInput>
  }

  export type userCreateWithoutReviewInput = {
    id?: string
    fullname: string
    email: string
    password?: string | null
    profile_image_url?: string | null
    uploadedProfileImage?: string | null
    category?: string | null
    imagePublicID?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    acknowledgements?: acknowledgementCreateNestedManyWithoutUserInput
    order?: orderCreateNestedManyWithoutUserInput
    payment?: paymentCreateNestedManyWithoutUserInput
    content?: contentCreateNestedManyWithoutArtistInput
    store?: storeCreateNestedManyWithoutStoreOwnerInput
    rating?: ratingCreateNestedManyWithoutUserInput
    subscription?: subscriptionCreateNestedManyWithoutUserInput
    FanEngagement?: FanEngagementCreateNestedManyWithoutUserInput
    favourite_content?: favourite_contentCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutReviewInput = {
    id?: string
    fullname: string
    email: string
    password?: string | null
    profile_image_url?: string | null
    uploadedProfileImage?: string | null
    category?: string | null
    imagePublicID?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    acknowledgements?: acknowledgementUncheckedCreateNestedManyWithoutUserInput
    order?: orderUncheckedCreateNestedManyWithoutUserInput
    payment?: paymentUncheckedCreateNestedManyWithoutUserInput
    content?: contentUncheckedCreateNestedManyWithoutArtistInput
    store?: storeUncheckedCreateNestedManyWithoutStoreOwnerInput
    rating?: ratingUncheckedCreateNestedManyWithoutUserInput
    subscription?: subscriptionUncheckedCreateNestedManyWithoutUserInput
    FanEngagement?: FanEngagementUncheckedCreateNestedManyWithoutUserInput
    favourite_content?: favourite_contentUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutReviewInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutReviewInput, userUncheckedCreateWithoutReviewInput>
  }

  export type productUpsertWithoutReviewsInput = {
    update: XOR<productUpdateWithoutReviewsInput, productUncheckedUpdateWithoutReviewsInput>
    create: XOR<productCreateWithoutReviewsInput, productUncheckedCreateWithoutReviewsInput>
    where?: productWhereInput
  }

  export type productUpdateToOneWithWhereWithoutReviewsInput = {
    where?: productWhereInput
    data: XOR<productUpdateWithoutReviewsInput, productUncheckedUpdateWithoutReviewsInput>
  }

  export type productUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderProducts?: orderProductsUpdateManyWithoutProductNestedInput
    productImage?: productImageUpdateOneWithoutProductNestedInput
    store?: storeUpdateOneWithoutProductsNestedInput
    ratings?: ratingUpdateManyWithoutProductNestedInput
    favourite_content?: favourite_contentUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    productImageID?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    orderProducts?: orderProductsUncheckedUpdateManyWithoutProductNestedInput
    ratings?: ratingUncheckedUpdateManyWithoutProductNestedInput
    favourite_content?: favourite_contentUncheckedUpdateManyWithoutProductNestedInput
  }

  export type userUpsertWithoutReviewInput = {
    update: XOR<userUpdateWithoutReviewInput, userUncheckedUpdateWithoutReviewInput>
    create: XOR<userCreateWithoutReviewInput, userUncheckedCreateWithoutReviewInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutReviewInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutReviewInput, userUncheckedUpdateWithoutReviewInput>
  }

  export type userUpdateWithoutReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedProfileImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    acknowledgements?: acknowledgementUpdateManyWithoutUserNestedInput
    order?: orderUpdateManyWithoutUserNestedInput
    payment?: paymentUpdateManyWithoutUserNestedInput
    content?: contentUpdateManyWithoutArtistNestedInput
    store?: storeUpdateManyWithoutStoreOwnerNestedInput
    rating?: ratingUpdateManyWithoutUserNestedInput
    subscription?: subscriptionUpdateManyWithoutUserNestedInput
    FanEngagement?: FanEngagementUpdateManyWithoutUserNestedInput
    favourite_content?: favourite_contentUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutReviewInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedProfileImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    acknowledgements?: acknowledgementUncheckedUpdateManyWithoutUserNestedInput
    order?: orderUncheckedUpdateManyWithoutUserNestedInput
    payment?: paymentUncheckedUpdateManyWithoutUserNestedInput
    content?: contentUncheckedUpdateManyWithoutArtistNestedInput
    store?: storeUncheckedUpdateManyWithoutStoreOwnerNestedInput
    rating?: ratingUncheckedUpdateManyWithoutUserNestedInput
    subscription?: subscriptionUncheckedUpdateManyWithoutUserNestedInput
    FanEngagement?: FanEngagementUncheckedUpdateManyWithoutUserNestedInput
    favourite_content?: favourite_contentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type productCreateWithoutRatingsInput = {
    id?: string
    productName: string
    description: string
    quantity?: number | null
    price: string
    rating?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderProducts?: orderProductsCreateNestedManyWithoutProductInput
    productImage?: productImageCreateNestedOneWithoutProductInput
    store?: storeCreateNestedOneWithoutProductsInput
    reviews?: reviewCreateNestedManyWithoutProductInput
    favourite_content?: favourite_contentCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutRatingsInput = {
    id?: string
    productName: string
    description: string
    productImageID?: string | null
    quantity?: number | null
    price: string
    rating?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    storeId?: string | null
    orderProducts?: orderProductsUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewUncheckedCreateNestedManyWithoutProductInput
    favourite_content?: favourite_contentUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutRatingsInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutRatingsInput, productUncheckedCreateWithoutRatingsInput>
  }

  export type userCreateWithoutRatingInput = {
    id?: string
    fullname: string
    email: string
    password?: string | null
    profile_image_url?: string | null
    uploadedProfileImage?: string | null
    category?: string | null
    imagePublicID?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    acknowledgements?: acknowledgementCreateNestedManyWithoutUserInput
    order?: orderCreateNestedManyWithoutUserInput
    payment?: paymentCreateNestedManyWithoutUserInput
    content?: contentCreateNestedManyWithoutArtistInput
    store?: storeCreateNestedManyWithoutStoreOwnerInput
    review?: reviewCreateNestedManyWithoutUserInput
    subscription?: subscriptionCreateNestedManyWithoutUserInput
    FanEngagement?: FanEngagementCreateNestedManyWithoutUserInput
    favourite_content?: favourite_contentCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutRatingInput = {
    id?: string
    fullname: string
    email: string
    password?: string | null
    profile_image_url?: string | null
    uploadedProfileImage?: string | null
    category?: string | null
    imagePublicID?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    acknowledgements?: acknowledgementUncheckedCreateNestedManyWithoutUserInput
    order?: orderUncheckedCreateNestedManyWithoutUserInput
    payment?: paymentUncheckedCreateNestedManyWithoutUserInput
    content?: contentUncheckedCreateNestedManyWithoutArtistInput
    store?: storeUncheckedCreateNestedManyWithoutStoreOwnerInput
    review?: reviewUncheckedCreateNestedManyWithoutUserInput
    subscription?: subscriptionUncheckedCreateNestedManyWithoutUserInput
    FanEngagement?: FanEngagementUncheckedCreateNestedManyWithoutUserInput
    favourite_content?: favourite_contentUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutRatingInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutRatingInput, userUncheckedCreateWithoutRatingInput>
  }

  export type productUpsertWithoutRatingsInput = {
    update: XOR<productUpdateWithoutRatingsInput, productUncheckedUpdateWithoutRatingsInput>
    create: XOR<productCreateWithoutRatingsInput, productUncheckedCreateWithoutRatingsInput>
    where?: productWhereInput
  }

  export type productUpdateToOneWithWhereWithoutRatingsInput = {
    where?: productWhereInput
    data: XOR<productUpdateWithoutRatingsInput, productUncheckedUpdateWithoutRatingsInput>
  }

  export type productUpdateWithoutRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderProducts?: orderProductsUpdateManyWithoutProductNestedInput
    productImage?: productImageUpdateOneWithoutProductNestedInput
    store?: storeUpdateOneWithoutProductsNestedInput
    reviews?: reviewUpdateManyWithoutProductNestedInput
    favourite_content?: favourite_contentUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    productImageID?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    orderProducts?: orderProductsUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewUncheckedUpdateManyWithoutProductNestedInput
    favourite_content?: favourite_contentUncheckedUpdateManyWithoutProductNestedInput
  }

  export type userUpsertWithoutRatingInput = {
    update: XOR<userUpdateWithoutRatingInput, userUncheckedUpdateWithoutRatingInput>
    create: XOR<userCreateWithoutRatingInput, userUncheckedCreateWithoutRatingInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutRatingInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutRatingInput, userUncheckedUpdateWithoutRatingInput>
  }

  export type userUpdateWithoutRatingInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedProfileImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    acknowledgements?: acknowledgementUpdateManyWithoutUserNestedInput
    order?: orderUpdateManyWithoutUserNestedInput
    payment?: paymentUpdateManyWithoutUserNestedInput
    content?: contentUpdateManyWithoutArtistNestedInput
    store?: storeUpdateManyWithoutStoreOwnerNestedInput
    review?: reviewUpdateManyWithoutUserNestedInput
    subscription?: subscriptionUpdateManyWithoutUserNestedInput
    FanEngagement?: FanEngagementUpdateManyWithoutUserNestedInput
    favourite_content?: favourite_contentUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutRatingInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedProfileImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    acknowledgements?: acknowledgementUncheckedUpdateManyWithoutUserNestedInput
    order?: orderUncheckedUpdateManyWithoutUserNestedInput
    payment?: paymentUncheckedUpdateManyWithoutUserNestedInput
    content?: contentUncheckedUpdateManyWithoutArtistNestedInput
    store?: storeUncheckedUpdateManyWithoutStoreOwnerNestedInput
    review?: reviewUncheckedUpdateManyWithoutUserNestedInput
    subscription?: subscriptionUncheckedUpdateManyWithoutUserNestedInput
    FanEngagement?: FanEngagementUncheckedUpdateManyWithoutUserNestedInput
    favourite_content?: favourite_contentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type productCreateWithoutProductImageInput = {
    id?: string
    productName: string
    description: string
    quantity?: number | null
    price: string
    rating?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderProducts?: orderProductsCreateNestedManyWithoutProductInput
    store?: storeCreateNestedOneWithoutProductsInput
    ratings?: ratingCreateNestedManyWithoutProductInput
    reviews?: reviewCreateNestedManyWithoutProductInput
    favourite_content?: favourite_contentCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutProductImageInput = {
    id?: string
    productName: string
    description: string
    quantity?: number | null
    price: string
    rating?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    storeId?: string | null
    orderProducts?: orderProductsUncheckedCreateNestedManyWithoutProductInput
    ratings?: ratingUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewUncheckedCreateNestedManyWithoutProductInput
    favourite_content?: favourite_contentUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutProductImageInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutProductImageInput, productUncheckedCreateWithoutProductImageInput>
  }

  export type productCreateManyProductImageInputEnvelope = {
    data: productCreateManyProductImageInput | productCreateManyProductImageInput[]
    skipDuplicates?: boolean
  }

  export type productUpsertWithWhereUniqueWithoutProductImageInput = {
    where: productWhereUniqueInput
    update: XOR<productUpdateWithoutProductImageInput, productUncheckedUpdateWithoutProductImageInput>
    create: XOR<productCreateWithoutProductImageInput, productUncheckedCreateWithoutProductImageInput>
  }

  export type productUpdateWithWhereUniqueWithoutProductImageInput = {
    where: productWhereUniqueInput
    data: XOR<productUpdateWithoutProductImageInput, productUncheckedUpdateWithoutProductImageInput>
  }

  export type productUpdateManyWithWhereWithoutProductImageInput = {
    where: productScalarWhereInput
    data: XOR<productUpdateManyMutationInput, productUncheckedUpdateManyWithoutProductImageInput>
  }

  export type orderCreateWithoutPaymentInput = {
    id?: string
    shippingAddress?: string | null
    amount: Decimal | DecimalJsLike | number | string
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    store?: storeCreateNestedOneWithoutOrderInput
    user?: userCreateNestedOneWithoutOrderInput
    orderProducts?: orderProductsCreateNestedManyWithoutOrderInput
  }

  export type orderUncheckedCreateWithoutPaymentInput = {
    id?: string
    userID?: string | null
    storeID?: string | null
    shippingAddress?: string | null
    amount: Decimal | DecimalJsLike | number | string
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderProducts?: orderProductsUncheckedCreateNestedManyWithoutOrderInput
  }

  export type orderCreateOrConnectWithoutPaymentInput = {
    where: orderWhereUniqueInput
    create: XOR<orderCreateWithoutPaymentInput, orderUncheckedCreateWithoutPaymentInput>
  }

  export type storeCreateWithoutPaymentInput = {
    id?: string
    storeName?: string | null
    storeLogo?: string | null
    imagePublicID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    order?: orderCreateNestedManyWithoutStoreInput
    products?: productCreateNestedManyWithoutStoreInput
    storeOwner?: userCreateNestedOneWithoutStoreInput
    content?: contentCreateNestedManyWithoutStoreInput
    favourite_content?: favourite_contentCreateNestedManyWithoutStoreInput
  }

  export type storeUncheckedCreateWithoutPaymentInput = {
    id?: string
    storeName?: string | null
    storeLogo?: string | null
    imagePublicID?: string | null
    storeOwnerID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    order?: orderUncheckedCreateNestedManyWithoutStoreInput
    products?: productUncheckedCreateNestedManyWithoutStoreInput
    content?: contentUncheckedCreateNestedManyWithoutStoreInput
    favourite_content?: favourite_contentUncheckedCreateNestedManyWithoutStoreInput
  }

  export type storeCreateOrConnectWithoutPaymentInput = {
    where: storeWhereUniqueInput
    create: XOR<storeCreateWithoutPaymentInput, storeUncheckedCreateWithoutPaymentInput>
  }

  export type userCreateWithoutPaymentInput = {
    id?: string
    fullname: string
    email: string
    password?: string | null
    profile_image_url?: string | null
    uploadedProfileImage?: string | null
    category?: string | null
    imagePublicID?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    acknowledgements?: acknowledgementCreateNestedManyWithoutUserInput
    order?: orderCreateNestedManyWithoutUserInput
    content?: contentCreateNestedManyWithoutArtistInput
    store?: storeCreateNestedManyWithoutStoreOwnerInput
    review?: reviewCreateNestedManyWithoutUserInput
    rating?: ratingCreateNestedManyWithoutUserInput
    subscription?: subscriptionCreateNestedManyWithoutUserInput
    FanEngagement?: FanEngagementCreateNestedManyWithoutUserInput
    favourite_content?: favourite_contentCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutPaymentInput = {
    id?: string
    fullname: string
    email: string
    password?: string | null
    profile_image_url?: string | null
    uploadedProfileImage?: string | null
    category?: string | null
    imagePublicID?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    acknowledgements?: acknowledgementUncheckedCreateNestedManyWithoutUserInput
    order?: orderUncheckedCreateNestedManyWithoutUserInput
    content?: contentUncheckedCreateNestedManyWithoutArtistInput
    store?: storeUncheckedCreateNestedManyWithoutStoreOwnerInput
    review?: reviewUncheckedCreateNestedManyWithoutUserInput
    rating?: ratingUncheckedCreateNestedManyWithoutUserInput
    subscription?: subscriptionUncheckedCreateNestedManyWithoutUserInput
    FanEngagement?: FanEngagementUncheckedCreateNestedManyWithoutUserInput
    favourite_content?: favourite_contentUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutPaymentInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutPaymentInput, userUncheckedCreateWithoutPaymentInput>
  }

  export type subscriptionCreateWithoutPaymentInput = {
    id?: string
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: userCreateNestedOneWithoutSubscriptionInput
    content?: contentCreateNestedOneWithoutSubscriptionInput
  }

  export type subscriptionUncheckedCreateWithoutPaymentInput = {
    id?: string
    userId: string
    contentId?: string | null
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type subscriptionCreateOrConnectWithoutPaymentInput = {
    where: subscriptionWhereUniqueInput
    create: XOR<subscriptionCreateWithoutPaymentInput, subscriptionUncheckedCreateWithoutPaymentInput>
  }

  export type subscriptionCreateManyPaymentInputEnvelope = {
    data: subscriptionCreateManyPaymentInput | subscriptionCreateManyPaymentInput[]
    skipDuplicates?: boolean
  }

  export type orderUpsertWithoutPaymentInput = {
    update: XOR<orderUpdateWithoutPaymentInput, orderUncheckedUpdateWithoutPaymentInput>
    create: XOR<orderCreateWithoutPaymentInput, orderUncheckedCreateWithoutPaymentInput>
    where?: orderWhereInput
  }

  export type orderUpdateToOneWithWhereWithoutPaymentInput = {
    where?: orderWhereInput
    data: XOR<orderUpdateWithoutPaymentInput, orderUncheckedUpdateWithoutPaymentInput>
  }

  export type orderUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    store?: storeUpdateOneWithoutOrderNestedInput
    user?: userUpdateOneWithoutOrderNestedInput
    orderProducts?: orderProductsUpdateManyWithoutOrderNestedInput
  }

  export type orderUncheckedUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
    storeID?: NullableStringFieldUpdateOperationsInput | string | null
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderProducts?: orderProductsUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type storeUpsertWithoutPaymentInput = {
    update: XOR<storeUpdateWithoutPaymentInput, storeUncheckedUpdateWithoutPaymentInput>
    create: XOR<storeCreateWithoutPaymentInput, storeUncheckedCreateWithoutPaymentInput>
    where?: storeWhereInput
  }

  export type storeUpdateToOneWithWhereWithoutPaymentInput = {
    where?: storeWhereInput
    data: XOR<storeUpdateWithoutPaymentInput, storeUncheckedUpdateWithoutPaymentInput>
  }

  export type storeUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    storeLogo?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    order?: orderUpdateManyWithoutStoreNestedInput
    products?: productUpdateManyWithoutStoreNestedInput
    storeOwner?: userUpdateOneWithoutStoreNestedInput
    content?: contentUpdateManyWithoutStoreNestedInput
    favourite_content?: favourite_contentUpdateManyWithoutStoreNestedInput
  }

  export type storeUncheckedUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    storeLogo?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    storeOwnerID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    order?: orderUncheckedUpdateManyWithoutStoreNestedInput
    products?: productUncheckedUpdateManyWithoutStoreNestedInput
    content?: contentUncheckedUpdateManyWithoutStoreNestedInput
    favourite_content?: favourite_contentUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type userUpsertWithoutPaymentInput = {
    update: XOR<userUpdateWithoutPaymentInput, userUncheckedUpdateWithoutPaymentInput>
    create: XOR<userCreateWithoutPaymentInput, userUncheckedCreateWithoutPaymentInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutPaymentInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutPaymentInput, userUncheckedUpdateWithoutPaymentInput>
  }

  export type userUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedProfileImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    acknowledgements?: acknowledgementUpdateManyWithoutUserNestedInput
    order?: orderUpdateManyWithoutUserNestedInput
    content?: contentUpdateManyWithoutArtistNestedInput
    store?: storeUpdateManyWithoutStoreOwnerNestedInput
    review?: reviewUpdateManyWithoutUserNestedInput
    rating?: ratingUpdateManyWithoutUserNestedInput
    subscription?: subscriptionUpdateManyWithoutUserNestedInput
    FanEngagement?: FanEngagementUpdateManyWithoutUserNestedInput
    favourite_content?: favourite_contentUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedProfileImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    acknowledgements?: acknowledgementUncheckedUpdateManyWithoutUserNestedInput
    order?: orderUncheckedUpdateManyWithoutUserNestedInput
    content?: contentUncheckedUpdateManyWithoutArtistNestedInput
    store?: storeUncheckedUpdateManyWithoutStoreOwnerNestedInput
    review?: reviewUncheckedUpdateManyWithoutUserNestedInput
    rating?: ratingUncheckedUpdateManyWithoutUserNestedInput
    subscription?: subscriptionUncheckedUpdateManyWithoutUserNestedInput
    FanEngagement?: FanEngagementUncheckedUpdateManyWithoutUserNestedInput
    favourite_content?: favourite_contentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type subscriptionUpsertWithWhereUniqueWithoutPaymentInput = {
    where: subscriptionWhereUniqueInput
    update: XOR<subscriptionUpdateWithoutPaymentInput, subscriptionUncheckedUpdateWithoutPaymentInput>
    create: XOR<subscriptionCreateWithoutPaymentInput, subscriptionUncheckedCreateWithoutPaymentInput>
  }

  export type subscriptionUpdateWithWhereUniqueWithoutPaymentInput = {
    where: subscriptionWhereUniqueInput
    data: XOR<subscriptionUpdateWithoutPaymentInput, subscriptionUncheckedUpdateWithoutPaymentInput>
  }

  export type subscriptionUpdateManyWithWhereWithoutPaymentInput = {
    where: subscriptionScalarWhereInput
    data: XOR<subscriptionUpdateManyMutationInput, subscriptionUncheckedUpdateManyWithoutPaymentInput>
  }

  export type storeCreateWithoutOrderInput = {
    id?: string
    storeName?: string | null
    storeLogo?: string | null
    imagePublicID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    payment?: paymentCreateNestedManyWithoutStoreInput
    products?: productCreateNestedManyWithoutStoreInput
    storeOwner?: userCreateNestedOneWithoutStoreInput
    content?: contentCreateNestedManyWithoutStoreInput
    favourite_content?: favourite_contentCreateNestedManyWithoutStoreInput
  }

  export type storeUncheckedCreateWithoutOrderInput = {
    id?: string
    storeName?: string | null
    storeLogo?: string | null
    imagePublicID?: string | null
    storeOwnerID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    payment?: paymentUncheckedCreateNestedManyWithoutStoreInput
    products?: productUncheckedCreateNestedManyWithoutStoreInput
    content?: contentUncheckedCreateNestedManyWithoutStoreInput
    favourite_content?: favourite_contentUncheckedCreateNestedManyWithoutStoreInput
  }

  export type storeCreateOrConnectWithoutOrderInput = {
    where: storeWhereUniqueInput
    create: XOR<storeCreateWithoutOrderInput, storeUncheckedCreateWithoutOrderInput>
  }

  export type userCreateWithoutOrderInput = {
    id?: string
    fullname: string
    email: string
    password?: string | null
    profile_image_url?: string | null
    uploadedProfileImage?: string | null
    category?: string | null
    imagePublicID?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    acknowledgements?: acknowledgementCreateNestedManyWithoutUserInput
    payment?: paymentCreateNestedManyWithoutUserInput
    content?: contentCreateNestedManyWithoutArtistInput
    store?: storeCreateNestedManyWithoutStoreOwnerInput
    review?: reviewCreateNestedManyWithoutUserInput
    rating?: ratingCreateNestedManyWithoutUserInput
    subscription?: subscriptionCreateNestedManyWithoutUserInput
    FanEngagement?: FanEngagementCreateNestedManyWithoutUserInput
    favourite_content?: favourite_contentCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutOrderInput = {
    id?: string
    fullname: string
    email: string
    password?: string | null
    profile_image_url?: string | null
    uploadedProfileImage?: string | null
    category?: string | null
    imagePublicID?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    acknowledgements?: acknowledgementUncheckedCreateNestedManyWithoutUserInput
    payment?: paymentUncheckedCreateNestedManyWithoutUserInput
    content?: contentUncheckedCreateNestedManyWithoutArtistInput
    store?: storeUncheckedCreateNestedManyWithoutStoreOwnerInput
    review?: reviewUncheckedCreateNestedManyWithoutUserInput
    rating?: ratingUncheckedCreateNestedManyWithoutUserInput
    subscription?: subscriptionUncheckedCreateNestedManyWithoutUserInput
    FanEngagement?: FanEngagementUncheckedCreateNestedManyWithoutUserInput
    favourite_content?: favourite_contentUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutOrderInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutOrderInput, userUncheckedCreateWithoutOrderInput>
  }

  export type orderProductsCreateWithoutOrderInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    product?: productCreateNestedOneWithoutOrderProductsInput
  }

  export type orderProductsUncheckedCreateWithoutOrderInput = {
    id?: string
    productID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type orderProductsCreateOrConnectWithoutOrderInput = {
    where: orderProductsWhereUniqueInput
    create: XOR<orderProductsCreateWithoutOrderInput, orderProductsUncheckedCreateWithoutOrderInput>
  }

  export type orderProductsCreateManyOrderInputEnvelope = {
    data: orderProductsCreateManyOrderInput | orderProductsCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type paymentCreateWithoutOrderInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod?: string | null
    paymentStatus?: string | null
    type?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentRef?: string | null
    store?: storeCreateNestedOneWithoutPaymentInput
    user?: userCreateNestedOneWithoutPaymentInput
    subscription?: subscriptionCreateNestedManyWithoutPaymentInput
  }

  export type paymentUncheckedCreateWithoutOrderInput = {
    id?: string
    userID?: string | null
    storeID?: string | null
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod?: string | null
    paymentStatus?: string | null
    type?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentRef?: string | null
    subscription?: subscriptionUncheckedCreateNestedManyWithoutPaymentInput
  }

  export type paymentCreateOrConnectWithoutOrderInput = {
    where: paymentWhereUniqueInput
    create: XOR<paymentCreateWithoutOrderInput, paymentUncheckedCreateWithoutOrderInput>
  }

  export type paymentCreateManyOrderInputEnvelope = {
    data: paymentCreateManyOrderInput | paymentCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type storeUpsertWithoutOrderInput = {
    update: XOR<storeUpdateWithoutOrderInput, storeUncheckedUpdateWithoutOrderInput>
    create: XOR<storeCreateWithoutOrderInput, storeUncheckedCreateWithoutOrderInput>
    where?: storeWhereInput
  }

  export type storeUpdateToOneWithWhereWithoutOrderInput = {
    where?: storeWhereInput
    data: XOR<storeUpdateWithoutOrderInput, storeUncheckedUpdateWithoutOrderInput>
  }

  export type storeUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    storeLogo?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    payment?: paymentUpdateManyWithoutStoreNestedInput
    products?: productUpdateManyWithoutStoreNestedInput
    storeOwner?: userUpdateOneWithoutStoreNestedInput
    content?: contentUpdateManyWithoutStoreNestedInput
    favourite_content?: favourite_contentUpdateManyWithoutStoreNestedInput
  }

  export type storeUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    storeLogo?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    storeOwnerID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    payment?: paymentUncheckedUpdateManyWithoutStoreNestedInput
    products?: productUncheckedUpdateManyWithoutStoreNestedInput
    content?: contentUncheckedUpdateManyWithoutStoreNestedInput
    favourite_content?: favourite_contentUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type userUpsertWithoutOrderInput = {
    update: XOR<userUpdateWithoutOrderInput, userUncheckedUpdateWithoutOrderInput>
    create: XOR<userCreateWithoutOrderInput, userUncheckedCreateWithoutOrderInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutOrderInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutOrderInput, userUncheckedUpdateWithoutOrderInput>
  }

  export type userUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedProfileImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    acknowledgements?: acknowledgementUpdateManyWithoutUserNestedInput
    payment?: paymentUpdateManyWithoutUserNestedInput
    content?: contentUpdateManyWithoutArtistNestedInput
    store?: storeUpdateManyWithoutStoreOwnerNestedInput
    review?: reviewUpdateManyWithoutUserNestedInput
    rating?: ratingUpdateManyWithoutUserNestedInput
    subscription?: subscriptionUpdateManyWithoutUserNestedInput
    FanEngagement?: FanEngagementUpdateManyWithoutUserNestedInput
    favourite_content?: favourite_contentUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedProfileImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    acknowledgements?: acknowledgementUncheckedUpdateManyWithoutUserNestedInput
    payment?: paymentUncheckedUpdateManyWithoutUserNestedInput
    content?: contentUncheckedUpdateManyWithoutArtistNestedInput
    store?: storeUncheckedUpdateManyWithoutStoreOwnerNestedInput
    review?: reviewUncheckedUpdateManyWithoutUserNestedInput
    rating?: ratingUncheckedUpdateManyWithoutUserNestedInput
    subscription?: subscriptionUncheckedUpdateManyWithoutUserNestedInput
    FanEngagement?: FanEngagementUncheckedUpdateManyWithoutUserNestedInput
    favourite_content?: favourite_contentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type orderProductsUpsertWithWhereUniqueWithoutOrderInput = {
    where: orderProductsWhereUniqueInput
    update: XOR<orderProductsUpdateWithoutOrderInput, orderProductsUncheckedUpdateWithoutOrderInput>
    create: XOR<orderProductsCreateWithoutOrderInput, orderProductsUncheckedCreateWithoutOrderInput>
  }

  export type orderProductsUpdateWithWhereUniqueWithoutOrderInput = {
    where: orderProductsWhereUniqueInput
    data: XOR<orderProductsUpdateWithoutOrderInput, orderProductsUncheckedUpdateWithoutOrderInput>
  }

  export type orderProductsUpdateManyWithWhereWithoutOrderInput = {
    where: orderProductsScalarWhereInput
    data: XOR<orderProductsUpdateManyMutationInput, orderProductsUncheckedUpdateManyWithoutOrderInput>
  }

  export type paymentUpsertWithWhereUniqueWithoutOrderInput = {
    where: paymentWhereUniqueInput
    update: XOR<paymentUpdateWithoutOrderInput, paymentUncheckedUpdateWithoutOrderInput>
    create: XOR<paymentCreateWithoutOrderInput, paymentUncheckedCreateWithoutOrderInput>
  }

  export type paymentUpdateWithWhereUniqueWithoutOrderInput = {
    where: paymentWhereUniqueInput
    data: XOR<paymentUpdateWithoutOrderInput, paymentUncheckedUpdateWithoutOrderInput>
  }

  export type paymentUpdateManyWithWhereWithoutOrderInput = {
    where: paymentScalarWhereInput
    data: XOR<paymentUpdateManyMutationInput, paymentUncheckedUpdateManyWithoutOrderInput>
  }

  export type orderCreateWithoutOrderProductsInput = {
    id?: string
    shippingAddress?: string | null
    amount: Decimal | DecimalJsLike | number | string
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    store?: storeCreateNestedOneWithoutOrderInput
    user?: userCreateNestedOneWithoutOrderInput
    payment?: paymentCreateNestedManyWithoutOrderInput
  }

  export type orderUncheckedCreateWithoutOrderProductsInput = {
    id?: string
    userID?: string | null
    storeID?: string | null
    shippingAddress?: string | null
    amount: Decimal | DecimalJsLike | number | string
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    payment?: paymentUncheckedCreateNestedManyWithoutOrderInput
  }

  export type orderCreateOrConnectWithoutOrderProductsInput = {
    where: orderWhereUniqueInput
    create: XOR<orderCreateWithoutOrderProductsInput, orderUncheckedCreateWithoutOrderProductsInput>
  }

  export type productCreateWithoutOrderProductsInput = {
    id?: string
    productName: string
    description: string
    quantity?: number | null
    price: string
    rating?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    productImage?: productImageCreateNestedOneWithoutProductInput
    store?: storeCreateNestedOneWithoutProductsInput
    ratings?: ratingCreateNestedManyWithoutProductInput
    reviews?: reviewCreateNestedManyWithoutProductInput
    favourite_content?: favourite_contentCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutOrderProductsInput = {
    id?: string
    productName: string
    description: string
    productImageID?: string | null
    quantity?: number | null
    price: string
    rating?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    storeId?: string | null
    ratings?: ratingUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewUncheckedCreateNestedManyWithoutProductInput
    favourite_content?: favourite_contentUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutOrderProductsInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutOrderProductsInput, productUncheckedCreateWithoutOrderProductsInput>
  }

  export type orderUpsertWithoutOrderProductsInput = {
    update: XOR<orderUpdateWithoutOrderProductsInput, orderUncheckedUpdateWithoutOrderProductsInput>
    create: XOR<orderCreateWithoutOrderProductsInput, orderUncheckedCreateWithoutOrderProductsInput>
    where?: orderWhereInput
  }

  export type orderUpdateToOneWithWhereWithoutOrderProductsInput = {
    where?: orderWhereInput
    data: XOR<orderUpdateWithoutOrderProductsInput, orderUncheckedUpdateWithoutOrderProductsInput>
  }

  export type orderUpdateWithoutOrderProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    store?: storeUpdateOneWithoutOrderNestedInput
    user?: userUpdateOneWithoutOrderNestedInput
    payment?: paymentUpdateManyWithoutOrderNestedInput
  }

  export type orderUncheckedUpdateWithoutOrderProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
    storeID?: NullableStringFieldUpdateOperationsInput | string | null
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment?: paymentUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type productUpsertWithoutOrderProductsInput = {
    update: XOR<productUpdateWithoutOrderProductsInput, productUncheckedUpdateWithoutOrderProductsInput>
    create: XOR<productCreateWithoutOrderProductsInput, productUncheckedCreateWithoutOrderProductsInput>
    where?: productWhereInput
  }

  export type productUpdateToOneWithWhereWithoutOrderProductsInput = {
    where?: productWhereInput
    data: XOR<productUpdateWithoutOrderProductsInput, productUncheckedUpdateWithoutOrderProductsInput>
  }

  export type productUpdateWithoutOrderProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productImage?: productImageUpdateOneWithoutProductNestedInput
    store?: storeUpdateOneWithoutProductsNestedInput
    ratings?: ratingUpdateManyWithoutProductNestedInput
    reviews?: reviewUpdateManyWithoutProductNestedInput
    favourite_content?: favourite_contentUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutOrderProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    productImageID?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    ratings?: ratingUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewUncheckedUpdateManyWithoutProductNestedInput
    favourite_content?: favourite_contentUncheckedUpdateManyWithoutProductNestedInput
  }

  export type userCreateWithoutSubscriptionInput = {
    id?: string
    fullname: string
    email: string
    password?: string | null
    profile_image_url?: string | null
    uploadedProfileImage?: string | null
    category?: string | null
    imagePublicID?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    acknowledgements?: acknowledgementCreateNestedManyWithoutUserInput
    order?: orderCreateNestedManyWithoutUserInput
    payment?: paymentCreateNestedManyWithoutUserInput
    content?: contentCreateNestedManyWithoutArtistInput
    store?: storeCreateNestedManyWithoutStoreOwnerInput
    review?: reviewCreateNestedManyWithoutUserInput
    rating?: ratingCreateNestedManyWithoutUserInput
    FanEngagement?: FanEngagementCreateNestedManyWithoutUserInput
    favourite_content?: favourite_contentCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutSubscriptionInput = {
    id?: string
    fullname: string
    email: string
    password?: string | null
    profile_image_url?: string | null
    uploadedProfileImage?: string | null
    category?: string | null
    imagePublicID?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    acknowledgements?: acknowledgementUncheckedCreateNestedManyWithoutUserInput
    order?: orderUncheckedCreateNestedManyWithoutUserInput
    payment?: paymentUncheckedCreateNestedManyWithoutUserInput
    content?: contentUncheckedCreateNestedManyWithoutArtistInput
    store?: storeUncheckedCreateNestedManyWithoutStoreOwnerInput
    review?: reviewUncheckedCreateNestedManyWithoutUserInput
    rating?: ratingUncheckedCreateNestedManyWithoutUserInput
    FanEngagement?: FanEngagementUncheckedCreateNestedManyWithoutUserInput
    favourite_content?: favourite_contentUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutSubscriptionInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutSubscriptionInput, userUncheckedCreateWithoutSubscriptionInput>
  }

  export type contentCreateWithoutSubscriptionInput = {
    id?: string
    title: string
    description?: string | null
    mediaUrl: string
    thumbnailUrl?: string | null
    isPublished?: boolean
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artist: userCreateNestedOneWithoutContentInput
    store: storeCreateNestedOneWithoutContentInput
    FanEngagement?: FanEngagementCreateNestedManyWithoutContentInput
    favourite_content?: favourite_contentCreateNestedManyWithoutContentInput
  }

  export type contentUncheckedCreateWithoutSubscriptionInput = {
    id?: string
    title: string
    description?: string | null
    mediaUrl: string
    thumbnailUrl?: string | null
    isPublished?: boolean
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    storeId: string
    artistId: string
    FanEngagement?: FanEngagementUncheckedCreateNestedManyWithoutContentInput
    favourite_content?: favourite_contentUncheckedCreateNestedManyWithoutContentInput
  }

  export type contentCreateOrConnectWithoutSubscriptionInput = {
    where: contentWhereUniqueInput
    create: XOR<contentCreateWithoutSubscriptionInput, contentUncheckedCreateWithoutSubscriptionInput>
  }

  export type paymentCreateWithoutSubscriptionInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod?: string | null
    paymentStatus?: string | null
    type?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentRef?: string | null
    order?: orderCreateNestedOneWithoutPaymentInput
    store?: storeCreateNestedOneWithoutPaymentInput
    user?: userCreateNestedOneWithoutPaymentInput
  }

  export type paymentUncheckedCreateWithoutSubscriptionInput = {
    id?: string
    userID?: string | null
    storeID?: string | null
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod?: string | null
    paymentStatus?: string | null
    type?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderId?: string | null
    paymentRef?: string | null
  }

  export type paymentCreateOrConnectWithoutSubscriptionInput = {
    where: paymentWhereUniqueInput
    create: XOR<paymentCreateWithoutSubscriptionInput, paymentUncheckedCreateWithoutSubscriptionInput>
  }

  export type userUpsertWithoutSubscriptionInput = {
    update: XOR<userUpdateWithoutSubscriptionInput, userUncheckedUpdateWithoutSubscriptionInput>
    create: XOR<userCreateWithoutSubscriptionInput, userUncheckedCreateWithoutSubscriptionInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutSubscriptionInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutSubscriptionInput, userUncheckedUpdateWithoutSubscriptionInput>
  }

  export type userUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedProfileImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    acknowledgements?: acknowledgementUpdateManyWithoutUserNestedInput
    order?: orderUpdateManyWithoutUserNestedInput
    payment?: paymentUpdateManyWithoutUserNestedInput
    content?: contentUpdateManyWithoutArtistNestedInput
    store?: storeUpdateManyWithoutStoreOwnerNestedInput
    review?: reviewUpdateManyWithoutUserNestedInput
    rating?: ratingUpdateManyWithoutUserNestedInput
    FanEngagement?: FanEngagementUpdateManyWithoutUserNestedInput
    favourite_content?: favourite_contentUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedProfileImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    acknowledgements?: acknowledgementUncheckedUpdateManyWithoutUserNestedInput
    order?: orderUncheckedUpdateManyWithoutUserNestedInput
    payment?: paymentUncheckedUpdateManyWithoutUserNestedInput
    content?: contentUncheckedUpdateManyWithoutArtistNestedInput
    store?: storeUncheckedUpdateManyWithoutStoreOwnerNestedInput
    review?: reviewUncheckedUpdateManyWithoutUserNestedInput
    rating?: ratingUncheckedUpdateManyWithoutUserNestedInput
    FanEngagement?: FanEngagementUncheckedUpdateManyWithoutUserNestedInput
    favourite_content?: favourite_contentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type contentUpsertWithoutSubscriptionInput = {
    update: XOR<contentUpdateWithoutSubscriptionInput, contentUncheckedUpdateWithoutSubscriptionInput>
    create: XOR<contentCreateWithoutSubscriptionInput, contentUncheckedCreateWithoutSubscriptionInput>
    where?: contentWhereInput
  }

  export type contentUpdateToOneWithWhereWithoutSubscriptionInput = {
    where?: contentWhereInput
    data: XOR<contentUpdateWithoutSubscriptionInput, contentUncheckedUpdateWithoutSubscriptionInput>
  }

  export type contentUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: StringFieldUpdateOperationsInput | string
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: userUpdateOneRequiredWithoutContentNestedInput
    store?: storeUpdateOneRequiredWithoutContentNestedInput
    FanEngagement?: FanEngagementUpdateManyWithoutContentNestedInput
    favourite_content?: favourite_contentUpdateManyWithoutContentNestedInput
  }

  export type contentUncheckedUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: StringFieldUpdateOperationsInput | string
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storeId?: StringFieldUpdateOperationsInput | string
    artistId?: StringFieldUpdateOperationsInput | string
    FanEngagement?: FanEngagementUncheckedUpdateManyWithoutContentNestedInput
    favourite_content?: favourite_contentUncheckedUpdateManyWithoutContentNestedInput
  }

  export type paymentUpsertWithoutSubscriptionInput = {
    update: XOR<paymentUpdateWithoutSubscriptionInput, paymentUncheckedUpdateWithoutSubscriptionInput>
    create: XOR<paymentCreateWithoutSubscriptionInput, paymentUncheckedCreateWithoutSubscriptionInput>
    where?: paymentWhereInput
  }

  export type paymentUpdateToOneWithWhereWithoutSubscriptionInput = {
    where?: paymentWhereInput
    data: XOR<paymentUpdateWithoutSubscriptionInput, paymentUncheckedUpdateWithoutSubscriptionInput>
  }

  export type paymentUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentRef?: NullableStringFieldUpdateOperationsInput | string | null
    order?: orderUpdateOneWithoutPaymentNestedInput
    store?: storeUpdateOneWithoutPaymentNestedInput
    user?: userUpdateOneWithoutPaymentNestedInput
  }

  export type paymentUncheckedUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
    storeID?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentRef?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userCreateWithoutFanEngagementInput = {
    id?: string
    fullname: string
    email: string
    password?: string | null
    profile_image_url?: string | null
    uploadedProfileImage?: string | null
    category?: string | null
    imagePublicID?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    acknowledgements?: acknowledgementCreateNestedManyWithoutUserInput
    order?: orderCreateNestedManyWithoutUserInput
    payment?: paymentCreateNestedManyWithoutUserInput
    content?: contentCreateNestedManyWithoutArtistInput
    store?: storeCreateNestedManyWithoutStoreOwnerInput
    review?: reviewCreateNestedManyWithoutUserInput
    rating?: ratingCreateNestedManyWithoutUserInput
    subscription?: subscriptionCreateNestedManyWithoutUserInput
    favourite_content?: favourite_contentCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutFanEngagementInput = {
    id?: string
    fullname: string
    email: string
    password?: string | null
    profile_image_url?: string | null
    uploadedProfileImage?: string | null
    category?: string | null
    imagePublicID?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    acknowledgements?: acknowledgementUncheckedCreateNestedManyWithoutUserInput
    order?: orderUncheckedCreateNestedManyWithoutUserInput
    payment?: paymentUncheckedCreateNestedManyWithoutUserInput
    content?: contentUncheckedCreateNestedManyWithoutArtistInput
    store?: storeUncheckedCreateNestedManyWithoutStoreOwnerInput
    review?: reviewUncheckedCreateNestedManyWithoutUserInput
    rating?: ratingUncheckedCreateNestedManyWithoutUserInput
    subscription?: subscriptionUncheckedCreateNestedManyWithoutUserInput
    favourite_content?: favourite_contentUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutFanEngagementInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutFanEngagementInput, userUncheckedCreateWithoutFanEngagementInput>
  }

  export type contentCreateWithoutFanEngagementInput = {
    id?: string
    title: string
    description?: string | null
    mediaUrl: string
    thumbnailUrl?: string | null
    isPublished?: boolean
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artist: userCreateNestedOneWithoutContentInput
    store: storeCreateNestedOneWithoutContentInput
    subscription?: subscriptionCreateNestedManyWithoutContentInput
    favourite_content?: favourite_contentCreateNestedManyWithoutContentInput
  }

  export type contentUncheckedCreateWithoutFanEngagementInput = {
    id?: string
    title: string
    description?: string | null
    mediaUrl: string
    thumbnailUrl?: string | null
    isPublished?: boolean
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    storeId: string
    artistId: string
    subscription?: subscriptionUncheckedCreateNestedManyWithoutContentInput
    favourite_content?: favourite_contentUncheckedCreateNestedManyWithoutContentInput
  }

  export type contentCreateOrConnectWithoutFanEngagementInput = {
    where: contentWhereUniqueInput
    create: XOR<contentCreateWithoutFanEngagementInput, contentUncheckedCreateWithoutFanEngagementInput>
  }

  export type userUpsertWithoutFanEngagementInput = {
    update: XOR<userUpdateWithoutFanEngagementInput, userUncheckedUpdateWithoutFanEngagementInput>
    create: XOR<userCreateWithoutFanEngagementInput, userUncheckedCreateWithoutFanEngagementInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutFanEngagementInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutFanEngagementInput, userUncheckedUpdateWithoutFanEngagementInput>
  }

  export type userUpdateWithoutFanEngagementInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedProfileImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    acknowledgements?: acknowledgementUpdateManyWithoutUserNestedInput
    order?: orderUpdateManyWithoutUserNestedInput
    payment?: paymentUpdateManyWithoutUserNestedInput
    content?: contentUpdateManyWithoutArtistNestedInput
    store?: storeUpdateManyWithoutStoreOwnerNestedInput
    review?: reviewUpdateManyWithoutUserNestedInput
    rating?: ratingUpdateManyWithoutUserNestedInput
    subscription?: subscriptionUpdateManyWithoutUserNestedInput
    favourite_content?: favourite_contentUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutFanEngagementInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedProfileImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    acknowledgements?: acknowledgementUncheckedUpdateManyWithoutUserNestedInput
    order?: orderUncheckedUpdateManyWithoutUserNestedInput
    payment?: paymentUncheckedUpdateManyWithoutUserNestedInput
    content?: contentUncheckedUpdateManyWithoutArtistNestedInput
    store?: storeUncheckedUpdateManyWithoutStoreOwnerNestedInput
    review?: reviewUncheckedUpdateManyWithoutUserNestedInput
    rating?: ratingUncheckedUpdateManyWithoutUserNestedInput
    subscription?: subscriptionUncheckedUpdateManyWithoutUserNestedInput
    favourite_content?: favourite_contentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type contentUpsertWithoutFanEngagementInput = {
    update: XOR<contentUpdateWithoutFanEngagementInput, contentUncheckedUpdateWithoutFanEngagementInput>
    create: XOR<contentCreateWithoutFanEngagementInput, contentUncheckedCreateWithoutFanEngagementInput>
    where?: contentWhereInput
  }

  export type contentUpdateToOneWithWhereWithoutFanEngagementInput = {
    where?: contentWhereInput
    data: XOR<contentUpdateWithoutFanEngagementInput, contentUncheckedUpdateWithoutFanEngagementInput>
  }

  export type contentUpdateWithoutFanEngagementInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: StringFieldUpdateOperationsInput | string
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: userUpdateOneRequiredWithoutContentNestedInput
    store?: storeUpdateOneRequiredWithoutContentNestedInput
    subscription?: subscriptionUpdateManyWithoutContentNestedInput
    favourite_content?: favourite_contentUpdateManyWithoutContentNestedInput
  }

  export type contentUncheckedUpdateWithoutFanEngagementInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: StringFieldUpdateOperationsInput | string
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storeId?: StringFieldUpdateOperationsInput | string
    artistId?: StringFieldUpdateOperationsInput | string
    subscription?: subscriptionUncheckedUpdateManyWithoutContentNestedInput
    favourite_content?: favourite_contentUncheckedUpdateManyWithoutContentNestedInput
  }

  export type userCreateWithoutFavourite_contentInput = {
    id?: string
    fullname: string
    email: string
    password?: string | null
    profile_image_url?: string | null
    uploadedProfileImage?: string | null
    category?: string | null
    imagePublicID?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    acknowledgements?: acknowledgementCreateNestedManyWithoutUserInput
    order?: orderCreateNestedManyWithoutUserInput
    payment?: paymentCreateNestedManyWithoutUserInput
    content?: contentCreateNestedManyWithoutArtistInput
    store?: storeCreateNestedManyWithoutStoreOwnerInput
    review?: reviewCreateNestedManyWithoutUserInput
    rating?: ratingCreateNestedManyWithoutUserInput
    subscription?: subscriptionCreateNestedManyWithoutUserInput
    FanEngagement?: FanEngagementCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutFavourite_contentInput = {
    id?: string
    fullname: string
    email: string
    password?: string | null
    profile_image_url?: string | null
    uploadedProfileImage?: string | null
    category?: string | null
    imagePublicID?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    acknowledgements?: acknowledgementUncheckedCreateNestedManyWithoutUserInput
    order?: orderUncheckedCreateNestedManyWithoutUserInput
    payment?: paymentUncheckedCreateNestedManyWithoutUserInput
    content?: contentUncheckedCreateNestedManyWithoutArtistInput
    store?: storeUncheckedCreateNestedManyWithoutStoreOwnerInput
    review?: reviewUncheckedCreateNestedManyWithoutUserInput
    rating?: ratingUncheckedCreateNestedManyWithoutUserInput
    subscription?: subscriptionUncheckedCreateNestedManyWithoutUserInput
    FanEngagement?: FanEngagementUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutFavourite_contentInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutFavourite_contentInput, userUncheckedCreateWithoutFavourite_contentInput>
  }

  export type contentCreateWithoutFavourite_contentInput = {
    id?: string
    title: string
    description?: string | null
    mediaUrl: string
    thumbnailUrl?: string | null
    isPublished?: boolean
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artist: userCreateNestedOneWithoutContentInput
    store: storeCreateNestedOneWithoutContentInput
    subscription?: subscriptionCreateNestedManyWithoutContentInput
    FanEngagement?: FanEngagementCreateNestedManyWithoutContentInput
  }

  export type contentUncheckedCreateWithoutFavourite_contentInput = {
    id?: string
    title: string
    description?: string | null
    mediaUrl: string
    thumbnailUrl?: string | null
    isPublished?: boolean
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    storeId: string
    artistId: string
    subscription?: subscriptionUncheckedCreateNestedManyWithoutContentInput
    FanEngagement?: FanEngagementUncheckedCreateNestedManyWithoutContentInput
  }

  export type contentCreateOrConnectWithoutFavourite_contentInput = {
    where: contentWhereUniqueInput
    create: XOR<contentCreateWithoutFavourite_contentInput, contentUncheckedCreateWithoutFavourite_contentInput>
  }

  export type productCreateWithoutFavourite_contentInput = {
    id?: string
    productName: string
    description: string
    quantity?: number | null
    price: string
    rating?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderProducts?: orderProductsCreateNestedManyWithoutProductInput
    productImage?: productImageCreateNestedOneWithoutProductInput
    store?: storeCreateNestedOneWithoutProductsInput
    ratings?: ratingCreateNestedManyWithoutProductInput
    reviews?: reviewCreateNestedManyWithoutProductInput
  }

  export type productUncheckedCreateWithoutFavourite_contentInput = {
    id?: string
    productName: string
    description: string
    productImageID?: string | null
    quantity?: number | null
    price: string
    rating?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    storeId?: string | null
    orderProducts?: orderProductsUncheckedCreateNestedManyWithoutProductInput
    ratings?: ratingUncheckedCreateNestedManyWithoutProductInput
    reviews?: reviewUncheckedCreateNestedManyWithoutProductInput
  }

  export type productCreateOrConnectWithoutFavourite_contentInput = {
    where: productWhereUniqueInput
    create: XOR<productCreateWithoutFavourite_contentInput, productUncheckedCreateWithoutFavourite_contentInput>
  }

  export type storeCreateWithoutFavourite_contentInput = {
    id?: string
    storeName?: string | null
    storeLogo?: string | null
    imagePublicID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    order?: orderCreateNestedManyWithoutStoreInput
    payment?: paymentCreateNestedManyWithoutStoreInput
    products?: productCreateNestedManyWithoutStoreInput
    storeOwner?: userCreateNestedOneWithoutStoreInput
    content?: contentCreateNestedManyWithoutStoreInput
  }

  export type storeUncheckedCreateWithoutFavourite_contentInput = {
    id?: string
    storeName?: string | null
    storeLogo?: string | null
    imagePublicID?: string | null
    storeOwnerID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    order?: orderUncheckedCreateNestedManyWithoutStoreInput
    payment?: paymentUncheckedCreateNestedManyWithoutStoreInput
    products?: productUncheckedCreateNestedManyWithoutStoreInput
    content?: contentUncheckedCreateNestedManyWithoutStoreInput
  }

  export type storeCreateOrConnectWithoutFavourite_contentInput = {
    where: storeWhereUniqueInput
    create: XOR<storeCreateWithoutFavourite_contentInput, storeUncheckedCreateWithoutFavourite_contentInput>
  }

  export type userUpsertWithoutFavourite_contentInput = {
    update: XOR<userUpdateWithoutFavourite_contentInput, userUncheckedUpdateWithoutFavourite_contentInput>
    create: XOR<userCreateWithoutFavourite_contentInput, userUncheckedCreateWithoutFavourite_contentInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutFavourite_contentInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutFavourite_contentInput, userUncheckedUpdateWithoutFavourite_contentInput>
  }

  export type userUpdateWithoutFavourite_contentInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedProfileImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    acknowledgements?: acknowledgementUpdateManyWithoutUserNestedInput
    order?: orderUpdateManyWithoutUserNestedInput
    payment?: paymentUpdateManyWithoutUserNestedInput
    content?: contentUpdateManyWithoutArtistNestedInput
    store?: storeUpdateManyWithoutStoreOwnerNestedInput
    review?: reviewUpdateManyWithoutUserNestedInput
    rating?: ratingUpdateManyWithoutUserNestedInput
    subscription?: subscriptionUpdateManyWithoutUserNestedInput
    FanEngagement?: FanEngagementUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutFavourite_contentInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedProfileImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    acknowledgements?: acknowledgementUncheckedUpdateManyWithoutUserNestedInput
    order?: orderUncheckedUpdateManyWithoutUserNestedInput
    payment?: paymentUncheckedUpdateManyWithoutUserNestedInput
    content?: contentUncheckedUpdateManyWithoutArtistNestedInput
    store?: storeUncheckedUpdateManyWithoutStoreOwnerNestedInput
    review?: reviewUncheckedUpdateManyWithoutUserNestedInput
    rating?: ratingUncheckedUpdateManyWithoutUserNestedInput
    subscription?: subscriptionUncheckedUpdateManyWithoutUserNestedInput
    FanEngagement?: FanEngagementUncheckedUpdateManyWithoutUserNestedInput
  }

  export type contentUpsertWithoutFavourite_contentInput = {
    update: XOR<contentUpdateWithoutFavourite_contentInput, contentUncheckedUpdateWithoutFavourite_contentInput>
    create: XOR<contentCreateWithoutFavourite_contentInput, contentUncheckedCreateWithoutFavourite_contentInput>
    where?: contentWhereInput
  }

  export type contentUpdateToOneWithWhereWithoutFavourite_contentInput = {
    where?: contentWhereInput
    data: XOR<contentUpdateWithoutFavourite_contentInput, contentUncheckedUpdateWithoutFavourite_contentInput>
  }

  export type contentUpdateWithoutFavourite_contentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: StringFieldUpdateOperationsInput | string
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: userUpdateOneRequiredWithoutContentNestedInput
    store?: storeUpdateOneRequiredWithoutContentNestedInput
    subscription?: subscriptionUpdateManyWithoutContentNestedInput
    FanEngagement?: FanEngagementUpdateManyWithoutContentNestedInput
  }

  export type contentUncheckedUpdateWithoutFavourite_contentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: StringFieldUpdateOperationsInput | string
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storeId?: StringFieldUpdateOperationsInput | string
    artistId?: StringFieldUpdateOperationsInput | string
    subscription?: subscriptionUncheckedUpdateManyWithoutContentNestedInput
    FanEngagement?: FanEngagementUncheckedUpdateManyWithoutContentNestedInput
  }

  export type productUpsertWithoutFavourite_contentInput = {
    update: XOR<productUpdateWithoutFavourite_contentInput, productUncheckedUpdateWithoutFavourite_contentInput>
    create: XOR<productCreateWithoutFavourite_contentInput, productUncheckedCreateWithoutFavourite_contentInput>
    where?: productWhereInput
  }

  export type productUpdateToOneWithWhereWithoutFavourite_contentInput = {
    where?: productWhereInput
    data: XOR<productUpdateWithoutFavourite_contentInput, productUncheckedUpdateWithoutFavourite_contentInput>
  }

  export type productUpdateWithoutFavourite_contentInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderProducts?: orderProductsUpdateManyWithoutProductNestedInput
    productImage?: productImageUpdateOneWithoutProductNestedInput
    store?: storeUpdateOneWithoutProductsNestedInput
    ratings?: ratingUpdateManyWithoutProductNestedInput
    reviews?: reviewUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutFavourite_contentInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    productImageID?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    orderProducts?: orderProductsUncheckedUpdateManyWithoutProductNestedInput
    ratings?: ratingUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewUncheckedUpdateManyWithoutProductNestedInput
  }

  export type storeUpsertWithoutFavourite_contentInput = {
    update: XOR<storeUpdateWithoutFavourite_contentInput, storeUncheckedUpdateWithoutFavourite_contentInput>
    create: XOR<storeCreateWithoutFavourite_contentInput, storeUncheckedCreateWithoutFavourite_contentInput>
    where?: storeWhereInput
  }

  export type storeUpdateToOneWithWhereWithoutFavourite_contentInput = {
    where?: storeWhereInput
    data: XOR<storeUpdateWithoutFavourite_contentInput, storeUncheckedUpdateWithoutFavourite_contentInput>
  }

  export type storeUpdateWithoutFavourite_contentInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    storeLogo?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    order?: orderUpdateManyWithoutStoreNestedInput
    payment?: paymentUpdateManyWithoutStoreNestedInput
    products?: productUpdateManyWithoutStoreNestedInput
    storeOwner?: userUpdateOneWithoutStoreNestedInput
    content?: contentUpdateManyWithoutStoreNestedInput
  }

  export type storeUncheckedUpdateWithoutFavourite_contentInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    storeLogo?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    storeOwnerID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    order?: orderUncheckedUpdateManyWithoutStoreNestedInput
    payment?: paymentUncheckedUpdateManyWithoutStoreNestedInput
    products?: productUncheckedUpdateManyWithoutStoreNestedInput
    content?: contentUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type userCreateWithoutAcknowledgementsInput = {
    id?: string
    fullname: string
    email: string
    password?: string | null
    profile_image_url?: string | null
    uploadedProfileImage?: string | null
    category?: string | null
    imagePublicID?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    order?: orderCreateNestedManyWithoutUserInput
    payment?: paymentCreateNestedManyWithoutUserInput
    content?: contentCreateNestedManyWithoutArtistInput
    store?: storeCreateNestedManyWithoutStoreOwnerInput
    review?: reviewCreateNestedManyWithoutUserInput
    rating?: ratingCreateNestedManyWithoutUserInput
    subscription?: subscriptionCreateNestedManyWithoutUserInput
    FanEngagement?: FanEngagementCreateNestedManyWithoutUserInput
    favourite_content?: favourite_contentCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutAcknowledgementsInput = {
    id?: string
    fullname: string
    email: string
    password?: string | null
    profile_image_url?: string | null
    uploadedProfileImage?: string | null
    category?: string | null
    imagePublicID?: string | null
    role?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    username: string
    order?: orderUncheckedCreateNestedManyWithoutUserInput
    payment?: paymentUncheckedCreateNestedManyWithoutUserInput
    content?: contentUncheckedCreateNestedManyWithoutArtistInput
    store?: storeUncheckedCreateNestedManyWithoutStoreOwnerInput
    review?: reviewUncheckedCreateNestedManyWithoutUserInput
    rating?: ratingUncheckedCreateNestedManyWithoutUserInput
    subscription?: subscriptionUncheckedCreateNestedManyWithoutUserInput
    FanEngagement?: FanEngagementUncheckedCreateNestedManyWithoutUserInput
    favourite_content?: favourite_contentUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutAcknowledgementsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutAcknowledgementsInput, userUncheckedCreateWithoutAcknowledgementsInput>
  }

  export type userUpsertWithoutAcknowledgementsInput = {
    update: XOR<userUpdateWithoutAcknowledgementsInput, userUncheckedUpdateWithoutAcknowledgementsInput>
    create: XOR<userCreateWithoutAcknowledgementsInput, userUncheckedCreateWithoutAcknowledgementsInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutAcknowledgementsInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutAcknowledgementsInput, userUncheckedUpdateWithoutAcknowledgementsInput>
  }

  export type userUpdateWithoutAcknowledgementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedProfileImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    order?: orderUpdateManyWithoutUserNestedInput
    payment?: paymentUpdateManyWithoutUserNestedInput
    content?: contentUpdateManyWithoutArtistNestedInput
    store?: storeUpdateManyWithoutStoreOwnerNestedInput
    review?: reviewUpdateManyWithoutUserNestedInput
    rating?: ratingUpdateManyWithoutUserNestedInput
    subscription?: subscriptionUpdateManyWithoutUserNestedInput
    FanEngagement?: FanEngagementUpdateManyWithoutUserNestedInput
    favourite_content?: favourite_contentUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutAcknowledgementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedProfileImage?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    username?: StringFieldUpdateOperationsInput | string
    order?: orderUncheckedUpdateManyWithoutUserNestedInput
    payment?: paymentUncheckedUpdateManyWithoutUserNestedInput
    content?: contentUncheckedUpdateManyWithoutArtistNestedInput
    store?: storeUncheckedUpdateManyWithoutStoreOwnerNestedInput
    review?: reviewUncheckedUpdateManyWithoutUserNestedInput
    rating?: ratingUncheckedUpdateManyWithoutUserNestedInput
    subscription?: subscriptionUncheckedUpdateManyWithoutUserNestedInput
    FanEngagement?: FanEngagementUncheckedUpdateManyWithoutUserNestedInput
    favourite_content?: favourite_contentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type acknowledgementCreateManyUserInput = {
    id?: string
    type: string
    interval: string
    expiresOn: Date | string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type orderCreateManyUserInput = {
    id?: string
    storeID?: string | null
    shippingAddress?: string | null
    amount: Decimal | DecimalJsLike | number | string
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type paymentCreateManyUserInput = {
    id?: string
    storeID?: string | null
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod?: string | null
    paymentStatus?: string | null
    type?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderId?: string | null
    paymentRef?: string | null
  }

  export type contentCreateManyArtistInput = {
    id?: string
    title: string
    description?: string | null
    mediaUrl: string
    thumbnailUrl?: string | null
    isPublished?: boolean
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    storeId: string
  }

  export type storeCreateManyStoreOwnerInput = {
    id?: string
    storeName?: string | null
    storeLogo?: string | null
    imagePublicID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
  }

  export type reviewCreateManyUserInput = {
    id?: string
    productID?: string | null
    review?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ratingCreateManyUserInput = {
    id?: string
    productID?: string | null
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type subscriptionCreateManyUserInput = {
    id?: string
    contentId?: string | null
    paymentId?: string | null
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FanEngagementCreateManyUserInput = {
    id?: string
    contentId: string
    action?: string | null
    value?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type favourite_contentCreateManyUserInput = {
    id?: string
    contentId?: string | null
    productId?: string | null
    storeId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type acknowledgementUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    interval?: StringFieldUpdateOperationsInput | string
    expiresOn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type acknowledgementUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    interval?: StringFieldUpdateOperationsInput | string
    expiresOn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type acknowledgementUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    interval?: StringFieldUpdateOperationsInput | string
    expiresOn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    store?: storeUpdateOneWithoutOrderNestedInput
    orderProducts?: orderProductsUpdateManyWithoutOrderNestedInput
    payment?: paymentUpdateManyWithoutOrderNestedInput
  }

  export type orderUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeID?: NullableStringFieldUpdateOperationsInput | string | null
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderProducts?: orderProductsUncheckedUpdateManyWithoutOrderNestedInput
    payment?: paymentUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type orderUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeID?: NullableStringFieldUpdateOperationsInput | string | null
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type paymentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentRef?: NullableStringFieldUpdateOperationsInput | string | null
    order?: orderUpdateOneWithoutPaymentNestedInput
    store?: storeUpdateOneWithoutPaymentNestedInput
    subscription?: subscriptionUpdateManyWithoutPaymentNestedInput
  }

  export type paymentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeID?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentRef?: NullableStringFieldUpdateOperationsInput | string | null
    subscription?: subscriptionUncheckedUpdateManyWithoutPaymentNestedInput
  }

  export type paymentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeID?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentRef?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type contentUpdateWithoutArtistInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: StringFieldUpdateOperationsInput | string
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    store?: storeUpdateOneRequiredWithoutContentNestedInput
    subscription?: subscriptionUpdateManyWithoutContentNestedInput
    FanEngagement?: FanEngagementUpdateManyWithoutContentNestedInput
    favourite_content?: favourite_contentUpdateManyWithoutContentNestedInput
  }

  export type contentUncheckedUpdateWithoutArtistInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: StringFieldUpdateOperationsInput | string
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storeId?: StringFieldUpdateOperationsInput | string
    subscription?: subscriptionUncheckedUpdateManyWithoutContentNestedInput
    FanEngagement?: FanEngagementUncheckedUpdateManyWithoutContentNestedInput
    favourite_content?: favourite_contentUncheckedUpdateManyWithoutContentNestedInput
  }

  export type contentUncheckedUpdateManyWithoutArtistInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: StringFieldUpdateOperationsInput | string
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storeId?: StringFieldUpdateOperationsInput | string
  }

  export type storeUpdateWithoutStoreOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    storeLogo?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    order?: orderUpdateManyWithoutStoreNestedInput
    payment?: paymentUpdateManyWithoutStoreNestedInput
    products?: productUpdateManyWithoutStoreNestedInput
    content?: contentUpdateManyWithoutStoreNestedInput
    favourite_content?: favourite_contentUpdateManyWithoutStoreNestedInput
  }

  export type storeUncheckedUpdateWithoutStoreOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    storeLogo?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    order?: orderUncheckedUpdateManyWithoutStoreNestedInput
    payment?: paymentUncheckedUpdateManyWithoutStoreNestedInput
    products?: productUncheckedUpdateManyWithoutStoreNestedInput
    content?: contentUncheckedUpdateManyWithoutStoreNestedInput
    favourite_content?: favourite_contentUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type storeUncheckedUpdateManyWithoutStoreOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    storeName?: NullableStringFieldUpdateOperationsInput | string | null
    storeLogo?: NullableStringFieldUpdateOperationsInput | string | null
    imagePublicID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type reviewUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    review?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: productUpdateOneWithoutReviewsNestedInput
  }

  export type reviewUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    productID?: NullableStringFieldUpdateOperationsInput | string | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reviewUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    productID?: NullableStringFieldUpdateOperationsInput | string | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ratingUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: productUpdateOneWithoutRatingsNestedInput
  }

  export type ratingUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    productID?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ratingUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    productID?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type subscriptionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: contentUpdateOneWithoutSubscriptionNestedInput
    payment?: paymentUpdateOneWithoutSubscriptionNestedInput
  }

  export type subscriptionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    contentId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type subscriptionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    contentId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FanEngagementUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: NullableStringFieldUpdateOperationsInput | string | null
    value?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: contentUpdateOneRequiredWithoutFanEngagementNestedInput
  }

  export type FanEngagementUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    action?: NullableStringFieldUpdateOperationsInput | string | null
    value?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FanEngagementUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    action?: NullableStringFieldUpdateOperationsInput | string | null
    value?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type favourite_contentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: contentUpdateOneWithoutFavourite_contentNestedInput
    product?: productUpdateOneWithoutFavourite_contentNestedInput
    store?: storeUpdateOneWithoutFavourite_contentNestedInput
  }

  export type favourite_contentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    contentId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type favourite_contentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    contentId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type subscriptionCreateManyContentInput = {
    id?: string
    userId: string
    paymentId?: string | null
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FanEngagementCreateManyContentInput = {
    id?: string
    userId: string
    action?: string | null
    value?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type favourite_contentCreateManyContentInput = {
    id?: string
    userId: string
    productId?: string | null
    storeId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type subscriptionUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutSubscriptionNestedInput
    payment?: paymentUpdateOneWithoutSubscriptionNestedInput
  }

  export type subscriptionUncheckedUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type subscriptionUncheckedUpdateManyWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FanEngagementUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: NullableStringFieldUpdateOperationsInput | string | null
    value?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutFanEngagementNestedInput
  }

  export type FanEngagementUncheckedUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: NullableStringFieldUpdateOperationsInput | string | null
    value?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FanEngagementUncheckedUpdateManyWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: NullableStringFieldUpdateOperationsInput | string | null
    value?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type favourite_contentUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutFavourite_contentNestedInput
    product?: productUpdateOneWithoutFavourite_contentNestedInput
    store?: storeUpdateOneWithoutFavourite_contentNestedInput
  }

  export type favourite_contentUncheckedUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type favourite_contentUncheckedUpdateManyWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderCreateManyStoreInput = {
    id?: string
    userID?: string | null
    shippingAddress?: string | null
    amount: Decimal | DecimalJsLike | number | string
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type paymentCreateManyStoreInput = {
    id?: string
    userID?: string | null
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod?: string | null
    paymentStatus?: string | null
    type?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    orderId?: string | null
    paymentRef?: string | null
  }

  export type productCreateManyStoreInput = {
    id?: string
    productName: string
    description: string
    productImageID?: string | null
    quantity?: number | null
    price: string
    rating?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type contentCreateManyStoreInput = {
    id?: string
    title: string
    description?: string | null
    mediaUrl: string
    thumbnailUrl?: string | null
    isPublished?: boolean
    category?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    artistId: string
  }

  export type favourite_contentCreateManyStoreInput = {
    id?: string
    userId: string
    contentId?: string | null
    productId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type orderUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneWithoutOrderNestedInput
    orderProducts?: orderProductsUpdateManyWithoutOrderNestedInput
    payment?: paymentUpdateManyWithoutOrderNestedInput
  }

  export type orderUncheckedUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderProducts?: orderProductsUncheckedUpdateManyWithoutOrderNestedInput
    payment?: paymentUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type orderUncheckedUpdateManyWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
    shippingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type paymentUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentRef?: NullableStringFieldUpdateOperationsInput | string | null
    order?: orderUpdateOneWithoutPaymentNestedInput
    user?: userUpdateOneWithoutPaymentNestedInput
    subscription?: subscriptionUpdateManyWithoutPaymentNestedInput
  }

  export type paymentUncheckedUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentRef?: NullableStringFieldUpdateOperationsInput | string | null
    subscription?: subscriptionUncheckedUpdateManyWithoutPaymentNestedInput
  }

  export type paymentUncheckedUpdateManyWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentRef?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type productUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderProducts?: orderProductsUpdateManyWithoutProductNestedInput
    productImage?: productImageUpdateOneWithoutProductNestedInput
    ratings?: ratingUpdateManyWithoutProductNestedInput
    reviews?: reviewUpdateManyWithoutProductNestedInput
    favourite_content?: favourite_contentUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    productImageID?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderProducts?: orderProductsUncheckedUpdateManyWithoutProductNestedInput
    ratings?: ratingUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewUncheckedUpdateManyWithoutProductNestedInput
    favourite_content?: favourite_contentUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateManyWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    productImageID?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type contentUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: StringFieldUpdateOperationsInput | string
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artist?: userUpdateOneRequiredWithoutContentNestedInput
    subscription?: subscriptionUpdateManyWithoutContentNestedInput
    FanEngagement?: FanEngagementUpdateManyWithoutContentNestedInput
    favourite_content?: favourite_contentUpdateManyWithoutContentNestedInput
  }

  export type contentUncheckedUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: StringFieldUpdateOperationsInput | string
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artistId?: StringFieldUpdateOperationsInput | string
    subscription?: subscriptionUncheckedUpdateManyWithoutContentNestedInput
    FanEngagement?: FanEngagementUncheckedUpdateManyWithoutContentNestedInput
    favourite_content?: favourite_contentUncheckedUpdateManyWithoutContentNestedInput
  }

  export type contentUncheckedUpdateManyWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: StringFieldUpdateOperationsInput | string
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    artistId?: StringFieldUpdateOperationsInput | string
  }

  export type favourite_contentUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutFavourite_contentNestedInput
    content?: contentUpdateOneWithoutFavourite_contentNestedInput
    product?: productUpdateOneWithoutFavourite_contentNestedInput
  }

  export type favourite_contentUncheckedUpdateWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    contentId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type favourite_contentUncheckedUpdateManyWithoutStoreInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    contentId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderProductsCreateManyProductInput = {
    id?: string
    orderID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ratingCreateManyProductInput = {
    id?: string
    userID?: string | null
    rating?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type reviewCreateManyProductInput = {
    id?: string
    userID?: string | null
    review?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type favourite_contentCreateManyProductInput = {
    id?: string
    userId: string
    contentId?: string | null
    storeId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type orderProductsUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    order?: orderUpdateOneWithoutOrderProductsNestedInput
  }

  export type orderProductsUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderProductsUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    orderID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ratingUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneWithoutRatingNestedInput
  }

  export type ratingUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ratingUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reviewUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    review?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneWithoutReviewNestedInput
  }

  export type reviewUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type reviewUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type favourite_contentUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutFavourite_contentNestedInput
    content?: contentUpdateOneWithoutFavourite_contentNestedInput
    store?: storeUpdateOneWithoutFavourite_contentNestedInput
  }

  export type favourite_contentUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    contentId?: NullableStringFieldUpdateOperationsInput | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type favourite_contentUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    contentId?: NullableStringFieldUpdateOperationsInput | string | null
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type productCreateManyProductImageInput = {
    id?: string
    productName: string
    description: string
    quantity?: number | null
    price: string
    rating?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    storeId?: string | null
  }

  export type productUpdateWithoutProductImageInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderProducts?: orderProductsUpdateManyWithoutProductNestedInput
    store?: storeUpdateOneWithoutProductsNestedInput
    ratings?: ratingUpdateManyWithoutProductNestedInput
    reviews?: reviewUpdateManyWithoutProductNestedInput
    favourite_content?: favourite_contentUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateWithoutProductImageInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
    orderProducts?: orderProductsUncheckedUpdateManyWithoutProductNestedInput
    ratings?: ratingUncheckedUpdateManyWithoutProductNestedInput
    reviews?: reviewUncheckedUpdateManyWithoutProductNestedInput
    favourite_content?: favourite_contentUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productUncheckedUpdateManyWithoutProductImageInput = {
    id?: StringFieldUpdateOperationsInput | string
    productName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    price?: StringFieldUpdateOperationsInput | string
    rating?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    storeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type subscriptionCreateManyPaymentInput = {
    id?: string
    userId: string
    contentId?: string | null
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type subscriptionUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutSubscriptionNestedInput
    content?: contentUpdateOneWithoutSubscriptionNestedInput
  }

  export type subscriptionUncheckedUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    contentId?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type subscriptionUncheckedUpdateManyWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    contentId?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderProductsCreateManyOrderInput = {
    id?: string
    productID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type paymentCreateManyOrderInput = {
    id?: string
    userID?: string | null
    storeID?: string | null
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod?: string | null
    paymentStatus?: string | null
    type?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentRef?: string | null
  }

  export type orderProductsUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: productUpdateOneWithoutOrderProductsNestedInput
  }

  export type orderProductsUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    productID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type orderProductsUncheckedUpdateManyWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    productID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type paymentUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentRef?: NullableStringFieldUpdateOperationsInput | string | null
    store?: storeUpdateOneWithoutPaymentNestedInput
    user?: userUpdateOneWithoutPaymentNestedInput
    subscription?: subscriptionUpdateManyWithoutPaymentNestedInput
  }

  export type paymentUncheckedUpdateWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
    storeID?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentRef?: NullableStringFieldUpdateOperationsInput | string | null
    subscription?: subscriptionUncheckedUpdateManyWithoutPaymentNestedInput
  }

  export type paymentUncheckedUpdateManyWithoutOrderInput = {
    id?: StringFieldUpdateOperationsInput | string
    userID?: NullableStringFieldUpdateOperationsInput | string | null
    storeID?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    paymentStatus?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentRef?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}