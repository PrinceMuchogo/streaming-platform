generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                   String             @id @default(uuid())
  email                String             @unique @db.VarChar(255)
  password             String?
  profile_image_url    String?
  uploadedProfileImage String?
  imagePublicID        String?
  role                 String?
  category String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  isOnline             Boolean?
  username             String
  acknowledgements     acknowledgement[]
  comments             comment[]
  commentLikes         commentLikes[]
  commentReplies       commentReplies[]
  favourite_videos     favourite_videos[]
  likes                like[]
  order                order[]
  payment              payment[]
  rating               rating[]
  review               review[]
  subscriptions        subscription[]
  video                video[]
  views                view[]
}

model video {
  id               String             @id @default(uuid())
  video_name       String?            @unique @db.VarChar(255)
  caption          String?
  thumbnail_url    String?
  url              String?
  userID           String?
  storeID          String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  package          String?
  video_public_ID  String?
  likes            Int?
  views            Int?
  videoComments    comment[]
  favourite_videos favourite_videos[]
  videoLikes       like[]
  store            store?             @relation(fields: [storeID], references: [id])
  user             user?              @relation(fields: [userID], references: [id])
  videoViews       view[]
}

model package_type {
  id            String         @id @default(uuid())
  name          String?        @unique @db.VarChar(255)
  interval      String?
  amount        Decimal        @db.Decimal(12, 10)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions subscription[]
}

model comment {
  id             String           @id @default(uuid())
  comment_text   String
  videoID        String?
  userID         String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           user?            @relation(fields: [userID], references: [id])
  video          video?           @relation(fields: [videoID], references: [id])
  commentLikes   commentLikes[]
  commentReplies commentReplies[]
}

model like {
  id        String   @id @default(uuid())
  userID    String?
  videoID   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      user?    @relation(fields: [userID], references: [id])
  video     video?   @relation(fields: [videoID], references: [id])
}

model view {
  id        String   @id @default(uuid())
  userID    String?
  videoID   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      user?    @relation(fields: [userID], references: [id])
  video     video?   @relation(fields: [videoID], references: [id])
}

model favourite_videos {
  id        String   @id @default(uuid())
  videoID   String?
  userID    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      user?    @relation(fields: [userID], references: [id])
  video     video?   @relation(fields: [videoID], references: [id])
}

model store {
  id            String      @id @default(uuid())
  storeName     String?     @unique @db.VarChar(255)
  storeLogo     String?
  imagePublicID String?
  storeOwnerID  String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  order         order[]
  payment       payment[]
  products      product[]
  storeOwner    storeOwner? @relation(fields: [storeOwnerID], references: [id])
  video         video[]
}

model product {
  id             String          @id @default(uuid())
  productName    String          @db.VarChar(255)
  description    String          @db.VarChar(255)
  productImageID String?
  quantity       Int?
  price          String          @db.VarChar(255)
  rating         Decimal?        @db.Decimal(1, 1)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  storeId        String?
  orderProducts  orderProducts[]
  productImage   productImage?   @relation(fields: [productImageID], references: [productImageID])
  store          store?          @relation(fields: [storeId], references: [id])
  ratings        rating[]
  reviews        review[]
}

model productImage {
  id             String    @id @default(uuid())
  productImage   String?
  imagePublicID  String?
  productImageID String?   @unique @db.VarChar(255)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  product        product[]
}

model storeOwner {
  id                    String   @id @default(uuid())
  name                  String?
  mobile                String?
  address               String?
  nationalID            String   @unique @db.VarChar(255)
  accountNumber         String?
  creditCardSecurityKey String?
  image                 String?
  imagePublicID         String?
  status                String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  store                 store[]
}

model payment {
  id            String   @id @default(uuid())
  userID        String?
  storeID       String?
  amount        Decimal  @db.Decimal(12, 10)
  paymentMethod String?
  paymentStatus String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orderId       String?
  paymentRef    String?
  order         order?   @relation(fields: [orderId], references: [id])
  store         store?   @relation(fields: [storeID], references: [id])
  user          user?    @relation(fields: [userID], references: [id])
}

model order {
  id              String          @id @default(uuid())
  userID          String?
  storeID         String?
  shippingAddress String?
  amount          Decimal         @db.Decimal(12, 10)
  status          String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  store           store?          @relation(fields: [storeID], references: [id])
  user            user?           @relation(fields: [userID], references: [id])
  orderProducts   orderProducts[]
  payment         payment[]
}

model orderProducts {
  id        String   @id @default(uuid())
  orderID   String?
  productID String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     order?   @relation(fields: [orderID], references: [id])
  product   product? @relation(fields: [productID], references: [id])
}

model review {
  id        String   @id @default(uuid())
  userID    String?
  productID String?
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   product? @relation(fields: [productID], references: [id])
  user      user?    @relation(fields: [userID], references: [id])
}

model rating {
  id        String   @id @default(uuid())
  userID    String?
  productID String?
  rating    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   product? @relation(fields: [productID], references: [id])
  user      user?    @relation(fields: [userID], references: [id])
}

model commentReplies {
  id              String   @id @default(uuid())
  userId          String
  parentCommentId String?
  replyText       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  comment         comment? @relation(fields: [parentCommentId], references: [id])
  user            user     @relation(fields: [userId], references: [id])
}

model commentLikes {
  id        String   @id @default(uuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  updatedAt DateTime
  comment   comment  @relation(fields: [commentId], references: [id])
  user      user     @relation(fields: [userId], references: [id])

  @@unique([userId, commentId])
}

model syspayment {
  id             String        @id @default(uuid())
  subscriptionId String?
  amount         Decimal       @db.Decimal(12, 10)
  paymentMethod  String?
  paymentStatus  String?
  paymentRef     String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  subscription   subscription? @relation(fields: [subscriptionId], references: [id])
}

model subscription {
  id           String       @id @default(uuid())
  packageId    String
  userId       String
  status       String
  expiresOn    DateTime?
  createdAt    DateTime     @default(now())
  updateAt     DateTime     @updatedAt
  user         user         @relation(fields: [userId], references: [id])
  package_type package_type @relation(fields: [packageId], references: [id])
  payment      syspayment[]
}

model acknowledgement {
  id        String   @id @default(uuid())
  type      String
  interval  String
  userId    String
  expiresOn DateTime
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  user      user     @relation(fields: [userId], references: [id])
}
