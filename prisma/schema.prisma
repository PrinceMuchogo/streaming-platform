// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                   String             @id @default(uuid())
  fullname             String
  email                String             @unique @db.VarChar(255)
  password             String?
  profile_image_url    String?
  uploadedProfileImage String?
  imagePublicID        String?
  role                 String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  username             String
  acknowledgements     acknowledgement[]
  order                order[]
  payment              payment[]
}

model Content {
  id          String   @id @default(uuid())
  title       String
  description String?
  mediaUrl    String
  thumbnailUrl String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  brandId     String

  artistId    String
  artist      User     @relation(fields: [artistId], references: [id])
  brand       Brand    @relation(fields: [brandId], references: [id])
}

model Brand {
  id          String   @id @default(uuid())
  name        String
  description String?
  logoUrl     String?
  artistId    String
  artist      User     @relation(fields: [artistId], references: [id])
  products    Product[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  currency    String   // "USD", "ETH", etc.
  mediaUrl    String?  // Image or preview
  brandId     String
  brand       Brand    @relation(fields: [brandId], references: [id])

  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id        String   @id @default(uuid())
  buyerId   String
  productId String
  quantity  Int      @default(1)
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime @default(now())

  buyer     User     @relation(fields: [buyerId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model Subscription {
  id         String   @id @default(uuid())
  userId     String
  contentId  String?
  artistId   String?

  // One of the above must be non-null
  user       User     @relation("UserSubscriptions", fields: [userId], references: [id])
  content    Content? @relation(fields: [contentId], references: [id])
  artist     User?    @relation(fields: [artistId], references: [id])

  startDate  DateTime @default(now())
  endDate    DateTime?
  isActive   Boolean  @default(true)
}

model Transaction {
  id          String   @id @default(uuid())
  userId      String
  contentId   String?
  amount      Float
  currency    String   // e.g., USD, ETH, etc.
  type        TransactionType
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  content     Content? @relation(fields: [contentId], references: [id])
}

enum TransactionType {
  SUBSCRIPTION
  DONATION
  TIP
  LICENSE_PURCHASE
}

model FanEngagement {
  id        String   @id @default(uuid())
  userId    String
  contentId String
  action    EngagementAction
  value     Int      // e.g., 10 points for a like

  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  content   Content  @relation(fields: [contentId], references: [id])
}

enum EngagementAction {
  LIKE
  COMMENT
  SHARE
  VIEW
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])

  contentId  String?  // Optional if favoriting content
  content    Content? @relation(fields: [contentId], references: [id])

  productId  String?  // Optional if favoriting product
  product    Product? @relation(fields: [productId], references: [id])

  brandId    String?  // Optional if favoriting brand
  brand      Brand?   @relation(fields: [brandId], references: [id])

  createdAt  DateTime @default(now())

  @@unique([userId, contentId])
  @@unique([userId, productId])
  @@unique([userId, brandId])
}
